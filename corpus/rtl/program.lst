
program.elf:     file format elf64-littleriscv
program.elf
architecture: riscv:rv64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000048000000

Program Header:
0x70000003 off    0x000000000001e23a vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**0
         filesz 0x00000000000002b8 memsz 0x0000000000000000 flags r--
    LOAD off    0x0000000000001000 vaddr 0x0000000048000000 paddr 0x0000000048000000 align 2**12
         filesz 0x0000000000006216 memsz 0x0000000000006216 flags rwx
    LOAD off    0x0000000000008000 vaddr 0x0000000080000000 paddr 0x00000000480064f0 align 2**12
         filesz 0x0000000000001048 memsz 0x0000000000001048 flags rw-
     TLS off    0x0000000000009048 vaddr 0x0000000080001048 paddr 0x0000000048007538 align 2**3
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
    LOAD off    0x0000000000000048 vaddr 0x0000000080001048 paddr 0x0000000080001048 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000f98 flags rw-
    LOAD off    0x0000000000000200 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---
    LOAD off    0x0000000000007218 vaddr 0x0000000048006218 paddr 0x0000000048006218 align 2**12
         filesz 0x00000000000002d8 memsz 0x00000000000002d8 flags r--
    LOAD off    0x0000000000000200 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags ---

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .init         000004ee  0000000048000000  0000000048000000  00001000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init_array   00000008  00000000480004f0  00000000480004f0  000014f0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       00000500  00000000480004f8  00000000480004f8  000014f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .itim         00000000  0000000080000000  0000000080000000  00009048  2**3
                  CONTENTS
  4 .lim          00000000  0000000080000000  0000000080000000  00009048  2**3
                  CONTENTS
  5 .text         00005816  0000000048000a00  0000000048000a00  00001a00  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .startup_rodata 000002d8  0000000048006218  0000000048006218  00007218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00001048  0000000080000000  00000000480064f0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .tdata        00000000  0000000080001048  0000000048007538  00009048  2**3
                  CONTENTS, ALLOC, LOAD, DATA, THREAD_LOCAL
  9 .bss          00000398  0000000080001048  0000000080001048  00009048  2**3
                  ALLOC
 10 .stack        00000400  00000000800013e0  00000000800013e0  00009048  2**4
                  ALLOC
 11 .heap         00000800  00000000800017e0  00000000800017e0  00009048  2**3
                  ALLOC
 12 .debug_abbrev 00001d17  0000000000000000  0000000000000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000f028  0000000000000000  0000000000000000  0000ad5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str_offsets 00000020  0000000000000000  0000000000000000  00019d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00003e34  0000000000000000  0000000000000000  00019da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_addr   00000018  0000000000000000  0000000000000000  0001dbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000073  0000000000000000  0000000000000000  0001dbf3  2**0
                  CONTENTS, READONLY
 18 .GCC.command.line 000005d4  0000000000000000  0000000000000000  0001dc66  2**0
                  CONTENTS, READONLY
 19 .riscv.attributes 000002b8  0000000000000000  0000000000000000  0001e23a  2**0
                  CONTENTS, READONLY
 20 .debug_line   00007eb0  0000000000000000  0000000000000000  0001e4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  0000000000000000  0000000000000000  000263a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00000fb0  0000000000000000  0000000000000000  00026400  2**4
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000ee0  0000000000000000  0000000000000000  000273b0  2**4
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  000032b8  0000000000000000  0000000000000000  00028290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000048000000 l    d  .init	0000000000000000 .init
00000000480004f0 l    d  .init_array	0000000000000000 .init_array
00000000480004f8 l    d  .rodata	0000000000000000 .rodata
0000000080000000 l    d  .itim	0000000000000000 .itim
0000000080000000 l    d  .lim	0000000000000000 .lim
0000000048000a00 l    d  .text	0000000000000000 .text
0000000048006218 l    d  .startup_rodata	0000000000000000 .startup_rodata
0000000080000000 l    d  .data	0000000000000000 .data
0000000080001048 l    d  .tdata	0000000000000000 .tdata
0000000080001048 l    d  .bss	0000000000000000 .bss
00000000800013e0 l    d  .stack	0000000000000000 .stack
00000000800017e0 l    d  .heap	0000000000000000 .heap
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_str_offsets	0000000000000000 .debug_str_offsets
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .debug_addr	0000000000000000 .debug_addr
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .GCC.command.line	0000000000000000 .GCC.command.line
0000000000000000 l    d  .riscv.attributes	0000000000000000 .riscv.attributes
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_ranges	0000000000000000 .debug_ranges
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    df *ABS*	0000000000000000 entry.o
0000000000000000 l    df *ABS*	0000000000000000 scrub.o
00000000480004da l       .init	0000000000000000 skip_scrub
0000000000000000 l    df *ABS*	0000000000000000 trap.o
0000000000000000 l    df *ABS*	0000000000000000 __call_atexit.c
0000000048000a00 l     F .text	0000000000000014 register_fini
0000000000000000 l    df *ABS*	0000000000000000 init.c
0000000048000a66 l     F .text	000000000000000e __metal_wake_harts
0000000080001090 l     O .bss	0000000000000004 init_done.1
0000000080000030 l     O .data	0000000000000010 argv.0
0000000000000000 l    df *ABS*	0000000000000000 riscv_clint0.c
0000000048001254 l     F .text	000000000000002a __metal_driver_sifive_clint0_control_base
000000004800127e l     F .text	0000000000000028 __metal_driver_sifive_clint0_num_interrupts
00000000480012a6 l     F .text	0000000000000044 __metal_driver_sifive_clint0_interrupt_parents
00000000480012ea l     F .text	0000000000000038 __metal_driver_sifive_clint0_interrupt_lines
000000004800142c l     F .text	0000000000000036 _get_cpu_intc
0000000000000000 l    df *ABS*	0000000000000000 riscv_cpu.c
0000000048001a34 l     F .text	0000000000000028 __metal_driver_cpu_hartid
0000000048001a5c l     F .text	000000000000002e __metal_driver_cpu_mtime_frequency
0000000048001a8a l     F .text	000000000000002e __metal_driver_cpu_clock_frequency
0000000048001ab8 l     F .text	000000000000002e __metal_driver_cpu_interrupt_controller
0000000048001ae6 l     F .text	000000000000002a __metal_driver_cpu_buserror
0000000048001b10 l     F .text	0000000000000028 __metal_driver_cpu_is_worldguard_aware
0000000000000000 l    df *ABS*	0000000000000000 sifive_aplic0.c
0000000000000000 l    df *ABS*	0000000000000000 sifive_extensiblecache0.c
00000000480008c8 l     O .rodata	0000000000000020 _SLICES
0000000048004a1c l     F .text	0000000000000030 _is_region_valid
0000000048004a4c l     F .text	0000000000000030 _is_range_valid
0000000048004a7c l     F .text	00000000000000a0 sifive_extensiblecache0_flush
0000000000000000 l    df *ABS*	0000000000000000 sifive_global-external-interrupts0.c
0000000048004b72 l     F .text	000000000000002e __metal_driver_sifive_global_external_interrupts0_interrupt_parent
0000000048004ba0 l     F .text	000000000000002a __metal_driver_sifive_global_external_interrupts0_num_interrupts
0000000048004bca l     F .text	0000000000000aca __metal_driver_sifive_global_external_interrupts0_interrupt_lines
0000000000000000 l    df *ABS*	0000000000000000 main.c
0000000000000000 l    df *ABS*	0000000000000000 interrupt.c
0000000000000000 l    df *ABS*	0000000000000000 tty.c
0000000000000000 l    df *ABS*	0000000000000000 inline.c
0000000000000000 l    df *ABS*	0000000000000000 sifive_buserror0.c
0000000048003c82 l     F .text	0000000000000026 __metal_driver_sifive_buserror0_control_base
0000000048003ca8 l     F .text	000000000000002a __metal_driver_sifive_buserror0_interrupt_parent
0000000048003cd2 l     F .text	0000000000000026 __metal_driver_sifive_buserror0_interrupt_id
0000000000000000 l    df *ABS*	0000000000000000 sifive_scr1.c
00000000480059f8 l     F .text	0000000000000026 __metal_driver_sifive_scr1_base
0000000000000000 l    df *ABS*	0000000000000000 cpu.c
0000000000000000 l    df *ABS*	0000000000000000 shutdown.c
0000000000000000 l    df *ABS*	0000000000000000 vector.o
0000000048005f00 l       .text	0000000000000000 IRQ_0
0000000048005f04 l       .text	0000000000000000 IRQ_1
0000000048005f08 l       .text	0000000000000000 IRQ_2
0000000048005f0c l       .text	0000000000000000 IRQ_3
0000000048005f10 l       .text	0000000000000000 IRQ_4
0000000048005f14 l       .text	0000000000000000 IRQ_5
0000000048005f18 l       .text	0000000000000000 IRQ_6
0000000048005f1c l       .text	0000000000000000 IRQ_7
0000000048005f20 l       .text	0000000000000000 IRQ_8
0000000048005f24 l       .text	0000000000000000 IRQ_9
0000000048005f28 l       .text	0000000000000000 IRQ_10
0000000048005f2c l       .text	0000000000000000 IRQ_11
0000000048005f30 l       .text	0000000000000000 IRQ_12
0000000048005f34 l       .text	0000000000000000 IRQ_13
0000000048005f38 l       .text	0000000000000000 IRQ_14
0000000048005f3c l       .text	0000000000000000 IRQ_15
0000000048005f40 l       .text	0000000000000000 IRQ_LC0
0000000048005f44 l       .text	0000000000000000 IRQ_LC1
0000000048005f48 l       .text	0000000000000000 IRQ_LC2
0000000048005f4c l       .text	0000000000000000 IRQ_LC3
0000000048005f50 l       .text	0000000000000000 IRQ_LC4
0000000048005f54 l       .text	0000000000000000 IRQ_LC5
0000000048005f58 l       .text	0000000000000000 IRQ_LC6
0000000048005f5c l       .text	0000000000000000 IRQ_LC7
0000000048005f60 l       .text	0000000000000000 IRQ_LC8
0000000048005f64 l       .text	0000000000000000 IRQ_LC9
0000000048005f68 l       .text	0000000000000000 IRQ_LC10
0000000048005f6c l       .text	0000000000000000 IRQ_LC11
0000000048005f70 l       .text	0000000000000000 IRQ_LC12
0000000048005f74 l       .text	0000000000000000 IRQ_LC13
0000000048005f78 l       .text	0000000000000000 IRQ_LC14
0000000048005f7c l       .text	0000000000000000 IRQ_LC15
0000000000000000 l    df *ABS*	0000000000000000 atexit.c
0000000000000000 l    df *ABS*	0000000000000000 exit.c
0000000000000000 l    df *ABS*	0000000000000000 fini.c
0000000000000000 l    df *ABS*	0000000000000000 impure.c
0000000080000878 l     O .data	0000000000000748 impure_data
0000000000000000 l    df *ABS*	0000000000000000 init.c
0000000000000000 l    df *ABS*	0000000000000000 __atexit.c
0000000000000000 l    df *ABS*	0000000000000000 sys_exit.c
00000000480004f8 l       .init_array	0000000000000000 __fini_array_end
00000000480004f8 l       .init_array	0000000000000000 __fini_array_start
00000000480004f8 l       .init_array	0000000000000000 __init_array_end
00000000480004f0 l       .init_array	0000000000000000 __preinit_array_end
00000000480004f0 l       .init_array	0000000000000000 __init_array_start
00000000480004f0 l       .init_array	0000000000000000 __preinit_array_start
0000000048005b64 g     F .text	0000000000000026 metal_cpu_timer_get_interrupt_id
0000000048005a1e g     F .text	000000000000005a __metal_driver_sifive_scr1_exit
000000004800267e  w    F .text	00000000000000e2 metal_lc4_interrupt_vector_handler
000000004800164e g     F .text	0000000000000060 __metal_driver_riscv_clint0_set_vector_mode
0000000048000380 g     F .init	0000000000000000 metal_init_copy_segment
000000004800259c  w    F .text	00000000000000e2 metal_lc3_interrupt_vector_handler
00000000480003a8 g     F .init	0000000000000000 metal_disable_cclf
0000000048000a00 g       *ABS*	0000000000000000 metal_segment_text_source_start
0000000048003238 g     F .text	0000000000000068 __metal_valid_interrupt_id
0000000048001226 g     F .text	0000000000000020 nop_putc
00000000480037a0 g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_get_vector_mode
00000000800011b0 g       *ABS*	0000000000000000 __global_pointer$
0000000048000f62 g     F .text	0000000000000034 metal_interrupt_get_priority
0000000048001246 g     F .text	000000000000000e metal_tty_init
0000000048005b3e g     F .text	0000000000000026 metal_cpu_timer_interrupt_controller
00000000480034b0 g     F .text	00000000000001e2 __metal_driver_riscv_cpu_controller_interrupt_register
0000000080001048 g       .tdata	0000000000000000 __tls_base
0000000048000fe4 g     F .text	0000000000000042 metal_interrupt_get_preemptive_level
0000000048005d9a g     F .text	000000000000002e metal_cpu_get
0000000048006248  w    O .startup_rodata	0000000000000008 __metal_wgmarker2_base_address_table
0000000048000508 g     O .rodata	00000000000000e0 __metal_driver_vtable_riscv_clint0
00000000800013e0 g       .stack	0000000000000000 metal_segment_stack_begin
00000000800013e0 g       .bss	0000000000000000 metal_segment_bss_target_end
000000004800477a g     F .text	000000000000008a sifive_extensiblecache0_lock_full
0000000048001322 g     F .text	000000000000006c __metal_clint0_mtime_get
0000000048003bdc g     F .text	0000000000000030 __metal_driver_cpu_get_instruction_length
0000000048000be6  w    F .text	0000000000000016 metal_secondary_init_run
0000000000000001 g       *ABS*	0000000000000000 __metal_chicken_bit
0000000080000700 g     O .data	0000000000000010 __metal_dt_global_external_interrupts
0000000048003d48 g     F .text	00000000000000c2 metal_buserror_set_event_enabled
0000000080000fc0 g       .data	0000000000000000 __gp_range_start
0000000048003f90 g     F .text	000000000000004a metal_buserror_get_cause
0000000048000a74 g     F .text	0000000000000096 metal_chickenbits_init
0000000080000000 g       .itim	0000000000000000 metal_segment_itim_target_start
0000000080001048 g     O .bss	0000000000000004 global_val
00000000800013a0 g       .bss	0000000000000000 __gp_range_end
0000000048000e22 g     F .text	0000000000000042 metal_interrupt_register_vector_handler
0000000080001048 g       .tdata	0000000000000000 metal_segment_bss_target_start
00000000480041a6 g     F .text	0000000000000016 metal_buserror_get_local_interrupt_id
000000004800138e g     F .text	000000000000009e __metal_driver_riscv_clint0_mtimecmp_set
00000000480036ee g     F .text	000000000000007a __metal_driver_riscv_cpu_controller_interrupt_enable_vector
0000000000000400 g       *ABS*	0000000000000000 __stack_size
0000000048002ae8  w    F .text	00000000000000e2 metal_lc9_interrupt_vector_handler
00000000480003d8  w    F .init	0000000000000000 __metal_before_start
0000000048000bd0  w    F .text	0000000000000016 metal_init_run
00000000480045cc g     F .text	0000000000000080 sifive_extensiblecache0_clock_gating_set_hysteresis
0000000048003e0a g     F .text	0000000000000040 metal_buserror_get_event_enabled
0000000048005850 g     F .text	0000000000000048 __metal_driver_sifive_global_external_interrupt_set_threshold
0000000048004804 g     F .text	000000000000007a sifive_extensiblecache0_set_lock_enable
0000000048005c3a g     F .text	0000000000000032 metal_cpu_get_msip
0000000048000748 g     O .rodata	00000000000000a0 __metal_driver_vtable_cpu
0000000048000efa g     F .text	0000000000000028 metal_interrupt_get_threshold
0000000000000001 g       *ABS*	0000000000000000 __metal_eccscrub_bit
000000004800383c g     F .text	0000000000000022 __metal_driver_cpu_mcycle_get
0000000048004022 g     F .text	000000000000003e metal_buserror_get_event_address
00000000800017e0 g       .heap	0000000000000000 metal_segment_heap_target_start
0000000080000110 g     O .data	0000000000000010 __metal_dt_cpu_0
0000000048002a06  w    F .text	00000000000000e2 metal_lc8_interrupt_vector_handler
0000000080001050  w    O .bss	0000000000000008 __metal_errormanager_table
0000000048002e70  w    F .text	00000000000000e2 metal_lc13_interrupt_vector_handler
0000000048005898 g     F .text	000000000000003e __metal_driver_sifive_global_external_interrupt_get_threshold
0000000048001cf6 g     F .text	000000000000001a __metal_default_exception_handler
0000000048005b8a g     F .text	0000000000000026 metal_cpu_software_interrupt_controller
00000000480019fc g     F .text	0000000000000038 __metal_driver_riscv_clint0_set_interrupt
000000004800108a g     F .text	000000000000003a _metal_interrupt_command_request
0000000048003e4a g     F .text	00000000000000a2 metal_buserror_set_platform_interrupt
00000000480037be g     F .text	0000000000000060 __metal_driver_riscv_cpu_controller_set_vector_mode
0000000048000d22 g     F .text	0000000000000032 metal_interrupt_set_privilege
0000000048001b38 g     F .text	0000000000000030 __metal_driver_cpu_get
0000000048000668 g     O .rodata	00000000000000e0 __metal_driver_vtable_riscv_cpu_intc
0000000048001172 g     F .text	0000000000000034 metal_interrupt_affinity_get_threshold
0000000048001be2 g     F .text	0000000000000018 __metal_interrupt_global_disable
00000000480038e6 g     F .text	0000000000000030 __metal_driver_cpu_mtime_timebase_get
0000000048002924  w    F .text	00000000000000e2 metal_lc7_interrupt_vector_handler
0000000048005cfa g     F .text	0000000000000026 metal_cpu_get_exception_pc
0000000048002bca  w    F .text	00000000000000e2 metal_lc10_interrupt_vector_handler
000000004800337e g     F .text	0000000000000054 __metal_exception_register
0000000048000b0a g     F .text	0000000000000088 metal_init
0000000048003986 g     F .text	000000000000001a __metal_driver_cpu_timer_controller_interrupt
0000000048003b62 g     F .text	0000000000000030 __metal_driver_cpu_disable_interrupt
0000000048005aea g     F .text	0000000000000026 metal_cpu_get_mtime_timebase
0000000080000000 g       .lim	0000000000000000 metal_segment_lim_target_end
00000000800000d0 g     O .data	0000000000000018 __metal_dt_testram_20000000
0000000080001088  w    O .bss	0000000000000008 __metal_wgchecker2_table
0000000048001e62 g     F .text	000000000000006c __metal_default_sw_handler
0000000048005d20 g     F .text	000000000000002e metal_cpu_set_exception_pc
0000000048000d54 g     F .text	0000000000000028 metal_interrupt_get_privilege
00000000480010c4 g     F .text	000000000000003a metal_interrupt_affinity_enable
0000000048003768 g     F .text	0000000000000038 __metal_driver_riscv_cpu_controller_interrupt_disable_vector
0000000080001078  w    O .bss	0000000000000008 __metal_uart_table
0000000080001040 g     O .data	0000000000000008 _global_impure_ptr
0000000048001ece  w    F .text	00000000000000e2 metal_timer_interrupt_vector_handler
0000000048006060 g     F .text	000000000000006a __libc_init_array
0000000048002cac  w    F .text	00000000000000e2 metal_lc11_interrupt_vector_handler
0000000048004186 g     F .text	0000000000000020 metal_buserror_get_platform_interrupt_id
000000004800385e g     F .text	0000000000000030 __metal_driver_cpu_clock_timebase_get
0000000048003692 g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_enable
0000000048003b32 g     F .text	0000000000000030 __metal_driver_cpu_enable_interrupt
00000000800013a0 g     O .bss	0000000000000040 __metal_dt_pmp
000000004800039a g     F .init	0000000000000002 _init
0000000048001c44 g     F .text	000000000000001a __metal_interrupt_timer_disable
0000000048003a48 g     F .text	0000000000000066 __metal_driver_cpu_clear_sw_ipi
0000000048000cfa g     F .text	0000000000000028 metal_interrupt_get_vector_mode
0000000048006028 g     F .text	0000000000000038 __libc_fini_array
00000000480039ce g     F .text	0000000000000014 __metal_driver_cpu_get_sw_interrupt_id
0000000048006240  w    O .startup_rodata	0000000000000008 __metal_wgmarker1_base_address_table
0000000048003c4a g     F .text	0000000000000020 __metal_driver_cpu_get_buserror
0000000080000000 g       .data	0000000000000000 metal_segment_data_target_start
0000000048001c92 g     F .text	0000000000000032 __metal_interrupt_local_enable
00000000480019c4 g     F .text	0000000000000038 __metal_driver_riscv_clint0_clear_interrupt
0000000048001226  w    F .text	0000000000000020 metal_tty_putc
0000000048005732 g     F .text	000000000000006a __metal_driver_sifive_global_external_interrupt_register
00000000800006f0 g     O .data	0000000000000010 __metal_dt_error_bank_2015000
0000000048004352 g     F .text	00000000000000c8 sifive_extensiblecache0_clock_gating_enable
0000000000000000 g       *ABS*	0000000000000000 __metal_init_hart
0000000000000000 g       *ABS*	0000000000000000 __tbss_size
0000000048000ec8 g     F .text	0000000000000032 metal_interrupt_set_threshold
0000000048006220  w    O .startup_rodata	0000000000000008 __metal_ls_wrapper_base_address_table
0000000000000800 g       *ABS*	0000000000000000 __heap_size
0000000048001fb0 g     F .text	0000000000000018 __metal_default_beu_handler
0000000048006238  w    O .startup_rodata	0000000000000008 __metal_wgcpu_mwidlist_masks_table
0000000048005ac4 g     F .text	0000000000000026 metal_cpu_get_mtime
0000000048001c78 g     F .text	000000000000001a __metal_interrupt_external_disable
0000000080001070  w    O .bss	0000000000000008 __metal_simuart_table
00000000800006e0 g     O .data	0000000000000010 __metal_dt_error_bank_2011000
000000004800381e g     F .text	000000000000001e __metal_driver_riscv_cpu_controller_command_request
0000000048001138 g     F .text	000000000000003a metal_interrupt_affinity_set_threshold
000000004800579c g     F .text	000000000000005a __metal_driver_sifive_global_external_interrupt_enable
00000000480033d2 g     F .text	00000000000000de __metal_driver_riscv_cpu_controller_interrupt_init
0000000048003b92 g     F .text	000000000000004a __metal_driver_cpu_exception_register
0000000048001bfa g     F .text	0000000000000018 __metal_interrupt_software_enable
00000000480023d8  w    F .text	00000000000000e2 metal_lc1_interrupt_vector_handler
00000000480042c4 g     F .text	000000000000008e sifive_extensiblecache0_get_tag_config
0000000048003116 g     F .text	0000000000000058 __metal_controller_interrupt_vector_mode
000000004800613a g     F .text	00000000000000c4 __call_exitprocs
00000000480057f6 g     F .text	000000000000005a __metal_driver_sifive_global_external_interrupt_disable
00000000800017e0 g       .stack	0000000000000000 _sp
0000000048000bfc g     F .text	0000000000000054 _start
0000000080001080  w    O .bss	0000000000000008 __metal_wgchecker1_table
0000000048001058 g     F .text	0000000000000032 metal_interrupt_vector_disable
0000000048000a00 g       .text	0000000000000000 metal_segment_text_target_start
0000000048003b12 g     F .text	0000000000000020 __metal_driver_cpu_controller_interrupt
0000000048003c0c g     F .text	000000000000001e __metal_driver_cpu_get_exception_pc
000000004800487e g     F .text	0000000000000072 sifive_extensiblecache0_get_lock_enable
0000000048004166 g     F .text	0000000000000020 metal_buserror_get_platform_interrupt_parent
0000000048001c5e g     F .text	000000000000001a __metal_interrupt_external_enable
00000000480060ca g     F .text	0000000000000070 __register_exitproc
0000000048002012  w    F .text	00000000000000e2 metal_external_interrupt_vector_handler
0000000048005c92 g     F .text	000000000000003a metal_cpu_exception_register
0000000048006218  w    O .startup_rodata	0000000000000008 __metal_errormanager_base_address_table
0000000048002842  w    F .text	00000000000000e2 metal_lc6_interrupt_vector_handler
00000000480046b8 g     F .text	00000000000000c2 sifive_extensiblecache0_lock_range
0000000048001b68 g     F .text	000000000000001a __metal_myhart_id
00000000480049a2 g     F .text	000000000000007a sifive_extensiblecache0_flush_full
0000000080001058  w    O .bss	0000000000000008 __metal_ras_mapping_table
0000000080001158 g     O .bss	0000000000000001 __metal_dt_bus_error_unit_1700000
000000004800464c g     F .text	000000000000006c sifive_extensiblecache0_clock_gating_get_hysteresis
0000000048001d80  w    F .text	00000000000000e2 metal_software_interrupt_vector_handler
00000000480036c0 g     F .text	000000000000002e __metal_driver_riscv_cpu_controller_interrupt_disable
0000000048005a78 g     F .text	0000000000000026 metal_cpu_get_timer
00000000480010fe g     F .text	000000000000003a metal_interrupt_affinity_disable
0000000048001502 g     F .text	0000000000000104 __metal_driver_riscv_clint0_register
0000000080000100 g     O .data	0000000000000010 __metal_dt_clint_2000000
0000000048000de0 g     F .text	0000000000000042 metal_interrupt_register_handler
0000000048000b92 g     F .text	000000000000003e metal_secondary_init
0000000048003cf8 g     F .text	0000000000000050 metal_buserror_init
0000000048000c50  w    F .text	0000000000000054 secondary_main
00000000800006d0 g     O .data	0000000000000010 __metal_dt_aplic_irq_domain_c004000
0000000048001d2a  w    F .text	0000000000000056 metal_interrupt_vector_handler
0000000048003fda g     F .text	0000000000000048 metal_buserror_clear_cause
0000000048000d7c g     F .text	0000000000000032 metal_interrupt_clear
00000000480032a0 g     F .text	00000000000000de __metal_local_interrupt_enable
000000004800185a g     F .text	000000000000016a __metal_driver_riscv_clint0_command_request
0000000048002760  w    F .text	00000000000000e2 metal_lc5_interrupt_vector_handler
0000000048000a14 g     F .text	0000000000000022 main
0000000080001048 g       .tdata	0000000000000000 metal_segment_data_target_end
0000000048005a9e g     F .text	0000000000000026 metal_cpu_get_mcycle_timebase
00000000480039e2 g     F .text	0000000000000066 __metal_driver_cpu_set_sw_ipi
0000000048003aae g     F .text	0000000000000064 __metal_driver_cpu_get_msip
0000000048005e38 g     F .text	000000000000001c metal_shutdown
0000000080000000 g       .itim	0000000000000000 metal_segment_itim_target_end
0000000048003c2a g     F .text	0000000000000020 __metal_driver_cpu_set_exception_pc
0000000080001068  w    O .bss	0000000000000008 __metal_ls_wrapper_table
00000000480044fa g     F .text	00000000000000d2 sifive_extensiblecache0_clock_gating_get_status
0000000048002d8e  w    F .text	00000000000000e2 metal_lc12_interrupt_vector_handler
00000000480011a6 g     F .text	0000000000000080 metal_interrupt_get_controller
0000000048001630 g     F .text	000000000000001e __metal_driver_riscv_clint0_get_vector_mode
0000000048001026 g     F .text	0000000000000032 metal_interrupt_vector_enable
0000000048000f22 g     F .text	0000000000000040 metal_interrupt_set_priority
00000000800017e0 g       .stack	0000000000000000 metal_segment_stack_end
0000000080000fe0 g     O .data	0000000000000008 __metal_dt_soc_scr_3fffb000
0000000048000000 g       .init	0000000000000000 _enter
0000000048005de8 g     F .text	000000000000001a metal_cpu_get_current_hartid
0000000048005f00 g       .text	0000000000000000 __metal_vector_table
0000000048006228  w    O .startup_rodata	0000000000000008 __metal_wgchecker1_base_address_table
0000000048005694 g     F .text	000000000000009e __metal_driver_sifive_global_external_interrupt_init
00000000480009f8 g       *ABS*	0000000000000000 metal_segment_itim_source_start
0000000048004236 g     F .text	000000000000008e sifive_extensiblecache0_get_data_config
0000000080001060  w    O .bss	0000000000000008 __metal_ras_summary_table
000000004800592c g     F .text	000000000000004a __metal_driver_sifive_global_external_interrupt_get_priority
0000000080000fc0  w    O .data	0000000000000008 __metal_cpu_table
0000000080000120 g     O .data	00000000000005b0 __metal_dt_cpu_0_interrupt_controller
000000004800039a g     F .init	0000000000000002 _fini
0000000080000000 g       .lim	0000000000000000 metal_segment_lim_target_start
0000000048000368 g     F .init	0000000000000000 metal_init_clear_segment
0000000048001bca g     F .text	0000000000000018 __metal_interrupt_global_enable
0000000048006216 g       .text	0000000000000000 metal_segment_text_target_end
0000000048006000 g     F .text	000000000000000a atexit
0000000048005dc8 g     F .text	0000000000000020 metal_cpu_set_cpu_specific
0000000048001b82 g     F .text	0000000000000048 __metal_zero_memory
0000000048001c2a g     F .text	000000000000001a __metal_interrupt_timer_enable
000000004800441a g     F .text	00000000000000e0 sifive_extensiblecache0_clock_gating_disable
0000000048001784 g     F .text	00000000000000d6 __metal_driver_riscv_clint0_disable
0000000048005c08 g     F .text	0000000000000032 metal_cpu_software_clear_ipi
0000000080001030 g     O .data	0000000000000008 _impure_ptr
0000000048003916 g     F .text	0000000000000070 __metal_driver_cpu_mtimecmp_set
0000000048000a36 g     F .text	0000000000000000 _metal_trap
00000000800000e8 g     O .data	0000000000000018 __metal_dt_memory_80000000
0000000048005e12 g     F .text	0000000000000026 __metal_shutdown_exit
00000000480040cc g     F .text	000000000000009a metal_buserror_clear_event_accrued
0000000048003c6a g     F .text	0000000000000018 __metal_driver_cpu_get_cpu_specific
00000000480048f0 g     F .text	00000000000000b2 sifive_extensiblecache0_flush_range
0000000048004060 g     F .text	000000000000006c metal_buserror_is_event_accrued
00000000480016ae g     F .text	00000000000000d6 __metal_driver_riscv_clint0_enable
0000000080001038 g     O .data	0000000000000008 __metal_driver_vtable_sifive_scr1
00000000480064f0 g       *ABS*	0000000000000000 metal_segment_data_source_start
00000000480004e0 g       .init	0000000000000000 early_trap_vector
0000000080001fe0 g       .heap	0000000000000000 metal_segment_heap_target_end
000000004800316e g     F .text	00000000000000ca __metal_controller_interrupt_vector
00000000480041bc g     F .text	000000000000007a sifive_extensiblecache0_init
0000000048003eec g     F .text	00000000000000a4 metal_buserror_set_local_interrupt
0000000048000dae g     F .text	0000000000000032 metal_interrupt_set
0000000048001fc8 g     F .text	000000000000004a __metal_default_timer_handler
00000000480024ba  w    F .text	00000000000000e2 metal_lc2_interrupt_vector_handler
0000000048005976 g     F .text	0000000000000082 __metal_driver_sifive_global_external_command_request
0000000048003034  w    F .text	00000000000000e2 metal_lc15_interrupt_vector_handler
0000000048005c6c g     F .text	0000000000000026 metal_cpu_interrupt_controller
00000000480007e8 g     O .rodata	00000000000000e0 __metal_driver_vtable_sifive_aplic0
0000000048000ca4 g     F .text	0000000000000024 metal_interrupt_init
0000000048005b10 g     F .text	000000000000002e metal_cpu_set_mtimecmp
00000000800000b8 g     O .data	0000000000000018 __metal_dt_testram_40000000
000000004800600a g     F .text	000000000000001e exit
0000000048004b1c g     F .text	0000000000000056 sifive_extensiblecache0_noDirtyFill_set
0000000048005bd6 g     F .text	0000000000000032 metal_cpu_software_set_ipi
0000000048005e02 g     F .text	0000000000000010 metal_cpu_get_num_harts
00000000480009f8 g       *ABS*	0000000000000000 metal_segment_lim_source_start
0000000048005bb0 g     F .text	0000000000000026 metal_cpu_software_get_interrupt_id
0000000048000918 g     O .rodata	00000000000000e0 __metal_driver_vtable_sifive_global_external_interrupts0
0000000048001d10 g     F .text	000000000000001a __metal_default_interrupt_handler
0000000048000e64 g     F .text	0000000000000032 metal_interrupt_enable
0000000048002100 g     F .text	00000000000001d4 __metal_exception_handler
00000000480022f6  w    F .text	00000000000000e2 metal_lc0_interrupt_vector_handler
00000000480061fe g     F .text	0000000000000018 _exit
0000000048006230  w    O .startup_rodata	0000000000000008 __metal_wgchecker2_base_address_table
000000004800388e g     F .text	0000000000000058 __metal_driver_cpu_mtime_get
0000000048001606 g     F .text	000000000000002a __metal_driver_riscv_clint0_vector_register
0000000080000008  w    O .data	0000000000000018 __metal_memory_table
0000000048005ccc g     F .text	000000000000002e metal_cpu_get_instruction_length
0000000048002f52  w    F .text	00000000000000e2 metal_lc14_interrupt_vector_handler
0000000048001462 g     F .text	00000000000000a0 __metal_driver_riscv_clint0_init
00000000480058d6 g     F .text	0000000000000056 __metal_driver_sifive_global_external_interrupt_set_priority
0000000048000cc8 g     F .text	0000000000000032 metal_interrupt_set_vector_mode
00000000480039a0 g     F .text	0000000000000014 __metal_driver_cpu_get_timer_interrupt_id
0000000000000001 g       *ABS*	0000000000000000 __metal_hart_count
00000000480003a2  w      .init	0000000000000000 __register_frame_info
0000000080000020  w    O .data	0000000000000010 __metal_ras_bank_table
00000000480039b4 g     F .text	000000000000001a __metal_driver_cpu_sw_controller_interrupt
0000000048001cc4 g     F .text	0000000000000032 __metal_interrupt_local_disable
0000000048001c12 g     F .text	0000000000000018 __metal_interrupt_software_disable
0000000048005d74 g     F .text	0000000000000026 metal_cpu_is_worldguard_aware
0000000048005d4e g     F .text	0000000000000026 metal_cpu_get_buserror
0000000048000f96 g     F .text	000000000000004e metal_interrupt_set_preemptive_level
0000000000000000 g       *ABS*	0000000000000000 __metal_boot_hart
0000000048000e96 g     F .text	0000000000000032 metal_interrupt_disable



Disassembly of section .init:

0000000048000000 <_enter>:
_enter():
validation-software/freedom-metal/src/entry.S:54
    /* The absolute first thing that must happen is configuring the global
     * pointer register, which must be done with relaxation disabled because
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
    long_load gp, __global_pointer$
    48000000:	a801                	j	48000010 <_enter+0x10>
    48000002:	0001                	nop
    48000004:	00000013          	nop
    48000008:	800011b0          	.word	0x800011b0
    4800000c:	00000000          	.word	0x00000000
    48000010:	00000197          	auipc	gp,0x0
    48000014:	ff818193          	add	gp,gp,-8 # 48000008 <_enter+0x8>
    48000018:	0001b183          	ld	gp,0(gp) # 800011b0 <__global_pointer$>
validation-software/freedom-metal/src/entry.S:65
    csrw jvt, a0
#endif // __riscv_zcmt

    /* Set TLS pointer */
    .weak __tls_base
    long_load tp, __tls_base
    4800001c:	a031                	j	48000028 <_enter+0x28>
    4800001e:	0001                	nop
    48000020:	80001048          	.word	0x80001048
    48000024:	00000000          	.word	0x00000000
    48000028:	00000217          	auipc	tp,0x0
    4800002c:	ff820213          	add	tp,tp,-8 # 48000020 <_enter+0x20>
    48000030:	00023203          	ld	tp,0(tp) # 0 <__metal_boot_hart>
validation-software/freedom-metal/src/entry.S:69

#if defined(HAS_RNMI)    
    //csrsi CSR_MNSTATUS, MNSTATUS_NMIE
    csrsi 0x744,8
    48000034:	74446073          	csrs	mnstatus,8
validation-software/freedom-metal/src/entry.S:73
#endif

    /* Disable and clear all interrupt sources */
    li   a3, -1
    48000038:	56fd                	li	a3,-1
validation-software/freedom-metal/src/entry.S:74
    csrc mie, a3
    4800003a:	3046b073          	csrc	mie,a3
validation-software/freedom-metal/src/entry.S:75
    csrc mip, a3
    4800003e:	3446b073          	csrc	mip,a3
validation-software/freedom-metal/src/entry.S:79

    /* The delegation CSRs exist if user mode interrupts (N extension) or
     * supervisor mode (S extension) are supported */
    csrr a5, misa
    48000042:	301027f3          	csrr	a5,misa
validation-software/freedom-metal/src/entry.S:80
    lui  a4, 0x42
    48000046:	00042737          	lui	a4,0x42
validation-software/freedom-metal/src/entry.S:81
    and  a4, a4, a5
    4800004a:	8f7d                	and	a4,a4,a5
validation-software/freedom-metal/src/entry.S:82
    beqz a4, 1f
    4800004c:	c709                	beqz	a4,48000056 <_enter+0x56>
validation-software/freedom-metal/src/entry.S:83
    csrc mideleg, a3
    4800004e:	3036b073          	csrc	mideleg,a3
validation-software/freedom-metal/src/entry.S:84
    csrc medeleg, a3
    48000052:	3026b073          	csrc	medeleg,a3
validation-software/freedom-metal/src/entry.S:88
1:

    /* The satp CSR exists if supervisor mode (S extension) is supported */
    lui  a4, 0x40
    48000056:	00040737          	lui	a4,0x40
validation-software/freedom-metal/src/entry.S:89
    and  a4, a4, a5
    4800005a:	8f7d                	and	a4,a4,a5
validation-software/freedom-metal/src/entry.S:90
    beqz a4, 1f
    4800005c:	c319                	beqz	a4,48000062 <_enter+0x62>
validation-software/freedom-metal/src/entry.S:91
    csrc satp, a3
    4800005e:	1806b073          	csrc	satp,a3
validation-software/freedom-metal/src/entry.S:95
1:

    /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
    li   a4, 0x10028
    48000062:	6741                	lui	a4,0x10
    48000064:	0287071b          	addw	a4,a4,40 # 10028 <__heap_size+0xf828>
validation-software/freedom-metal/src/entry.S:96
    and  a5, a5, a4
    48000068:	8ff9                	and	a5,a5,a4
validation-software/freedom-metal/src/entry.S:97
    beqz a5, 1f
    4800006a:	cb89                	beqz	a5,4800007c <_enter+0x7c>
validation-software/freedom-metal/src/entry.S:98
    csrr a5, mstatus
    4800006c:	300027f3          	csrr	a5,mstatus
validation-software/freedom-metal/src/entry.S:99
    lui  a4, 0x2
    48000070:	6709                	lui	a4,0x2
validation-software/freedom-metal/src/entry.S:100
    or   a5, a5, a4
    48000072:	8fd9                	or	a5,a5,a4
validation-software/freedom-metal/src/entry.S:101
    csrw mstatus, a5
    48000074:	30079073          	csrw	mstatus,a5
validation-software/freedom-metal/src/entry.S:102
    csrwi fcsr, 0
    48000078:	00305073          	csrw	fcsr,0
validation-software/freedom-metal/src/entry.S:127
    /* Unfortunately, Zve* (embedded vector extensions) do not set misa.V,
     * so, until the RISC-V standard discovery mechanism is finalized, we use
     * a trick: we set mstatus.VS to Dirty, and then read it back. It's set to
     * Off iff there's no vector unit. This should detect the presence of any
     * standard vector extension (V or Zve*) or the absence of all. */
    li a5, 0x600
    4800007c:	60000793          	li	a5,1536
validation-software/freedom-metal/src/entry.S:128
    csrs mstatus, a5
    48000080:	3007a073          	csrs	mstatus,a5
validation-software/freedom-metal/src/entry.S:129
    csrr a5, mstatus
    48000084:	300027f3          	csrr	a5,mstatus
validation-software/freedom-metal/src/entry.S:130
    andi a5, a5, 0x600
    48000088:	6007f793          	and	a5,a5,1536
validation-software/freedom-metal/src/entry.S:131
    beqz a5, 1f
    4800008c:	c789                	beqz	a5,48000096 <_enter+0x96>
validation-software/freedom-metal/src/entry.S:132
    vsetivli x0, 0, e8, m1, ta, ma
    4800008e:	cc007057          	vsetivli	zero,0,e8,m1,ta,ma
validation-software/freedom-metal/src/entry.S:133
    csrwi vcsr, 0
    48000092:	00f05073          	csrw	vcsr,0
validation-software/freedom-metal/src/entry.S:138
1:
#endif

    /* set a0 to mhartid */
    csrr a0, mhartid
    48000096:	f1402573          	csrr	a0,mhartid
validation-software/freedom-metal/src/entry.S:142

    /* Only allow supported harts to proceed. If a hardware configuration contains more harts than
     * expected in software, they are blocked here to prevent any potential memory corruption. */
    la t0, __metal_hart_count
    4800009a:	00100293          	li	t0,1
validation-software/freedom-metal/src/entry.S:143
    blt a0, t0, 1f
    4800009e:	00554563          	blt	a0,t0,480000a8 <_enter+0xa8>
validation-software/freedom-metal/src/entry.S:145
.Lcore_barrier:
    wfi
    480000a2:	10500073          	wfi
validation-software/freedom-metal/src/entry.S:146
    j .Lcore_barrier
    480000a6:	bff5                	j	480000a2 <_enter+0xa2>
validation-software/freedom-metal/src/entry.S:373
.align 4
1:

#else /* !(defined(METAL_SIFIVE_WORLDGUARD1) || defined(METAL_SIFIVE_WORLDGUARD2)) */

    la t0, __metal_init_hart
    480000a8:	00000293          	li	t0,0
validation-software/freedom-metal/src/entry.S:375
    /* If we're __metal_init_hart, go to initialization step (a0 contains mhartid) */
    beq a0, t0, .Linit
    480000ac:	04550663          	beq	a0,t0,480000f8 <_enter+0xf8>
validation-software/freedom-metal/src/entry.S:383

    /* We're not __metal_init_hart */

    /* If the __metal_chicken_bit symbol is set to 0, do not change the Feature
     * Disable registers. */
    la t0, __metal_chicken_bit
    480000b0:	00100293          	li	t0,1
validation-software/freedom-metal/src/entry.S:384
    beqz t0, 1f
    480000b4:	00028e63          	beqz	t0,480000d0 <_enter+0xd0>
validation-software/freedom-metal/src/entry.S:387
    /* Trap over the Feature Disable registers' clearing since some SiFive chips
     * don't have them (for example, FE310 and FU540) */
    la t0, 1f
    480000b8:	00000297          	auipc	t0,0x0
    480000bc:	01828293          	add	t0,t0,24 # 480000d0 <_enter+0xd0>
validation-software/freedom-metal/src/entry.S:388
    csrw mtvec, t0
    480000c0:	30529073          	csrw	mtvec,t0
validation-software/freedom-metal/src/entry.S:390
    /* Clear the Feature Disable registers' bits */
    csrw 0x7C1, x0
    480000c4:	7c101073          	csrw	0x7c1,zero
validation-software/freedom-metal/src/entry.S:391
    csrw 0x7C2, x0
    480000c8:	7c201073          	csrw	0x7c2,zero
validation-software/freedom-metal/src/entry.S:394

    /* Disable Cross cache line fetching for Mallard Panda and earlier cores */
    call metal_disable_cclf
    480000cc:	2dc000ef          	jal	480003a8 <metal_disable_cclf>
validation-software/freedom-metal/src/entry.S:401
.align 4
1:

    /* Put hart in WFI loop until signaled using IPI from __metal_init_hart */
    /* enable software interrupt for M-mode */
    csrsi mie, 1 << 3
    480000d0:	30446073          	csrs	mie,8
validation-software/freedom-metal/src/entry.S:404
1:
    /* Wait for interrupt */
    wfi
    480000d4:	10500073          	wfi
validation-software/freedom-metal/src/entry.S:406
    /* Check if the interrupt was software interrupt, otherwise go back to wfi */
    csrr t1, mip
    480000d8:	34402373          	csrr	t1,mip
validation-software/freedom-metal/src/entry.S:407
    andi t1, t1, 1 << 3
    480000dc:	00837313          	and	t1,t1,8
validation-software/freedom-metal/src/entry.S:408
    beqz t1, 1b
    480000e0:	fe030ae3          	beqz	t1,480000d4 <_enter+0xd4>
validation-software/freedom-metal/src/entry.S:410
    /* disable software interrupt for M-mode*/
    csrci mie, 1 << 3
    480000e4:	30447073          	csrc	mie,8
validation-software/freedom-metal/src/entry.S:413
    /* Set t0 to CLINT/CLIC MSIP */
#ifdef CLINT_MSIP
    li t0, CLINT_MSIP
    480000e8:	020002b7          	lui	t0,0x2000
validation-software/freedom-metal/src/entry.S:418
#else
    #error Multi-Core initialization requires either a CLINT or a CLIC
#endif
    /* Add hart offset (a0 contains mhartid) */
    slli t1, a0, 2
    480000ec:	00251313          	sll	t1,a0,0x2
validation-software/freedom-metal/src/entry.S:419
    add t0, t0, t1
    480000f0:	929a                	add	t0,t0,t1
validation-software/freedom-metal/src/entry.S:421
    /* Reset MSIP[hartid] */
    sw x0, 0(t0)
    480000f2:	0002a023          	sw	zero,0(t0) # 2000000 <__heap_size+0x1fff800>
validation-software/freedom-metal/src/entry.S:422
    j .Lpost_sync
    480000f6:	a02d                	j	48000120 <_enter+0x120>
validation-software/freedom-metal/src/entry.S:427

.Linit:
    /* If the __metal_chicken_bit symbol is set to 0, do not change the Feature
     * Disable registers. */
    la t0, __metal_chicken_bit
    480000f8:	00100293          	li	t0,1
validation-software/freedom-metal/src/entry.S:428
    beqz t0, 1f
    480000fc:	02028263          	beqz	t0,48000120 <_enter+0x120>
validation-software/freedom-metal/src/entry.S:431
    /* Trap over the Feature Disable registers' clearing since some SiFive chips
     * don't have them (for example, FE310 and FU540) */
    la t0, 1f
    48000100:	00000297          	auipc	t0,0x0
    48000104:	02028293          	add	t0,t0,32 # 48000120 <_enter+0x120>
validation-software/freedom-metal/src/entry.S:432
    csrw mtvec, t0
    48000108:	30529073          	csrw	mtvec,t0
validation-software/freedom-metal/src/entry.S:436
    /* Clear the Feature Disable registers' bits, except the
     * suppressCorruptOnGrantData bit (this one will be cleared later in the
     * boot sequence). */
    li t0, ~(1 << 9)
    4800010c:	dff00293          	li	t0,-513
validation-software/freedom-metal/src/entry.S:437
    csrc 0x7C1, t0
    48000110:	7c12b073          	csrc	0x7c1,t0
validation-software/freedom-metal/src/entry.S:438
    csrw 0x7C2, x0
    48000114:	7c201073          	csrw	0x7c2,zero
validation-software/freedom-metal/src/entry.S:441

    /* Disable Cross cache line fetching for Mallard Panda and earlier cores */
    call metal_disable_cclf
    48000118:	290000ef          	jal	480003a8 <metal_disable_cclf>
    4800011c:	00000013          	nop
validation-software/freedom-metal/src/entry.S:477
#endif /* !__riscv_cmodel_compact */

.Lpost_sync:
    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
    48000120:	00000297          	auipc	t0,0x0
    48000124:	3c028293          	add	t0,t0,960 # 480004e0 <early_trap_vector>
validation-software/freedom-metal/src/entry.S:478
    csrw mtvec, t0
    48000128:	30529073          	csrw	mtvec,t0
validation-software/freedom-metal/src/entry.S:484

   /* The METAL is designed for a bare-metal environment and therefore is expected
    * to define its own stack pointer. We also align the stack pointer here
    * because the only RISC-V ABI that's currently defined, mandates 16-byte
    * stack alignment. */
    long_load sp, _sp
    4800012c:	a031                	j	48000138 <_enter+0x138>
    4800012e:	0001                	nop
    48000130:	800017e0          	.word	0x800017e0
    48000134:	00000000          	.word	0x00000000
    48000138:	00000117          	auipc	sp,0x0
    4800013c:	ff810113          	add	sp,sp,-8 # 48000130 <_enter+0x130>
    48000140:	6102                	ld	sp,0(sp)
validation-software/freedom-metal/src/entry.S:487
1:
    /* Increment by hartid number of stack sizes */
    csrr a0, mhartid
    48000142:	f1402573          	csrr	a0,mhartid
validation-software/freedom-metal/src/entry.S:488
    li t0, 0
    48000146:	4281                	li	t0,0
validation-software/freedom-metal/src/entry.S:489
    la t1, __stack_size
    48000148:	40000313          	li	t1,1024
validation-software/freedom-metal/src/entry.S:491
1:
    andi sp, sp, -16
    4800014c:	ff017113          	and	sp,sp,-16
validation-software/freedom-metal/src/entry.S:492
    beq t0, a0, 1f
    48000150:	00a28563          	beq	t0,a0,4800015a <_enter+0x15a>
validation-software/freedom-metal/src/entry.S:493
    add sp, sp, t1
    48000154:	911a                	add	sp,sp,t1
validation-software/freedom-metal/src/entry.S:494
    addi t0, t0, 1
    48000156:	0285                	add	t0,t0,1
validation-software/freedom-metal/src/entry.S:495
    j 1b
    48000158:	bfd5                	j	4800014c <_enter+0x14c>
validation-software/freedom-metal/src/entry.S:499
1:

    /* If we're not __metal_init_hart, skip the initialization work */
    csrr a0, mhartid
    4800015a:	f1402573          	csrr	a0,mhartid
validation-software/freedom-metal/src/entry.S:500
    la t0, __metal_init_hart
    4800015e:	00000293          	li	t0,0
validation-software/freedom-metal/src/entry.S:501
    bne a0, t0, .Lskip_init
    48000162:	1a551663          	bne	a0,t0,4800030e <_enter+0x30e>
validation-software/freedom-metal/src/entry.S:509
     * just skip over the call entirely.   Note that __metal_before_start isn't
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    la ra, __metal_before_start
    48000166:	00000097          	auipc	ra,0x0
    4800016a:	27208093          	add	ra,ra,626 # 480003d8 <__metal_before_start>
validation-software/freedom-metal/src/entry.S:510
    beqz ra, 1f
    4800016e:	00008363          	beqz	ra,48000174 <_enter+0x174>
validation-software/freedom-metal/src/entry.S:511
    jalr ra
    48000172:	9082                	jalr	ra
validation-software/freedom-metal/src/entry.S:516
1:

    /* If the __metal_chicken_bit symbol is set to 0, do not change the Feature
     * Disable registers. */
    la t0, __metal_chicken_bit
    48000174:	00100293          	li	t0,1
validation-software/freedom-metal/src/entry.S:517
    beqz t0, 1f
    48000178:	02028463          	beqz	t0,480001a0 <_enter+0x1a0>
validation-software/freedom-metal/src/entry.S:520
    /* Trap over the Feature Disable registers' clearing since some SiFive chips
     * don't have them (for example, FE310 and FU540) */
    la t0, 1f
    4800017c:	00000297          	auipc	t0,0x0
    48000180:	02428293          	add	t0,t0,36 # 480001a0 <_enter+0x1a0>
validation-software/freedom-metal/src/entry.S:521
    csrw mtvec, t0
    48000184:	30529073          	csrw	mtvec,t0
validation-software/freedom-metal/src/entry.S:523
    /* Clear the Feature Disable registers' suppressCorruptOnGrantData bit */
    li t0, (1 << 9)
    48000188:	20000293          	li	t0,512
validation-software/freedom-metal/src/entry.S:524
    csrc 0x7C1, t0
    4800018c:	7c12b073          	csrc	0x7c1,t0
validation-software/freedom-metal/src/entry.S:527

     /* Disable Cross cache line fetching for Mallard Panda and earlier cores */
    call metal_disable_cclf
    48000190:	218000ef          	jal	480003a8 <metal_disable_cclf>
    48000194:	00000013          	nop
    48000198:	00000013          	nop
    4800019c:	00000013          	nop
validation-software/freedom-metal/src/entry.S:532

.align 4
1:
    /* Put back early trap vector */
    la t0, early_trap_vector
    480001a0:	00000297          	auipc	t0,0x0
    480001a4:	34028293          	add	t0,t0,832 # 480004e0 <early_trap_vector>
validation-software/freedom-metal/src/entry.S:533
    csrw mtvec, t0
    480001a8:	30529073          	csrw	mtvec,t0
validation-software/freedom-metal/src/entry.S:542
     * boot and then need to get relocated into a non-persistant writable memory
     * before C code can execute.  If this is the case we do so here.  This step
     * is optional: if the METAL provides an environment in which this relocation
     * is not necessary then it must simply set metal_segment_data_source_start to
     * be equal to metal_segment_data_target_start. */
    long_load a0, metal_segment_data_source_start
    480001ac:	a031                	j	480001b8 <_enter+0x1b8>
    480001ae:	0001                	nop
    480001b0:	480064f0          	.word	0x480064f0
    480001b4:	00000000          	.word	0x00000000
    480001b8:	00000517          	auipc	a0,0x0
    480001bc:	ff850513          	add	a0,a0,-8 # 480001b0 <_enter+0x1b0>
    480001c0:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/entry.S:543
    long_load a1, metal_segment_data_target_start
    480001c2:	a039                	j	480001d0 <_enter+0x1d0>
    480001c4:	00000013          	nop
    480001c8:	80000000          	.word	0x80000000
    480001cc:	00000000          	.word	0x00000000
    480001d0:	00000597          	auipc	a1,0x0
    480001d4:	ff858593          	add	a1,a1,-8 # 480001c8 <_enter+0x1c8>
    480001d8:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/entry.S:544
    long_load a2, metal_segment_data_target_end
    480001da:	a039                	j	480001e8 <_enter+0x1e8>
    480001dc:	00000013          	nop
    480001e0:	80001048          	.word	0x80001048
    480001e4:	00000000          	.word	0x00000000
    480001e8:	00000617          	auipc	a2,0x0
    480001ec:	ff860613          	add	a2,a2,-8 # 480001e0 <_enter+0x1e0>
    480001f0:	6210                	ld	a2,0(a2)
validation-software/freedom-metal/src/entry.S:545
    call metal_init_copy_segment
    480001f2:	18e000ef          	jal	48000380 <metal_init_copy_segment>
validation-software/freedom-metal/src/entry.S:548

    /* Copy the ITIM section */
    long_load a0, metal_segment_itim_source_start
    480001f6:	a029                	j	48000200 <_enter+0x200>
    480001f8:	480009f8          	.word	0x480009f8
    480001fc:	00000000          	.word	0x00000000
    48000200:	00000517          	auipc	a0,0x0
    48000204:	ff850513          	add	a0,a0,-8 # 480001f8 <_enter+0x1f8>
    48000208:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/entry.S:549
    long_load a1, metal_segment_itim_target_start
    4800020a:	a039                	j	48000218 <_enter+0x218>
    4800020c:	00000013          	nop
    48000210:	80000000          	.word	0x80000000
    48000214:	00000000          	.word	0x00000000
    48000218:	00000597          	auipc	a1,0x0
    4800021c:	ff858593          	add	a1,a1,-8 # 48000210 <_enter+0x210>
    48000220:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/entry.S:550
    long_load a2, metal_segment_itim_target_end
    48000222:	a039                	j	48000230 <_enter+0x230>
    48000224:	00000013          	nop
    48000228:	80000000          	.word	0x80000000
    4800022c:	00000000          	.word	0x00000000
    48000230:	00000617          	auipc	a2,0x0
    48000234:	ff860613          	add	a2,a2,-8 # 48000228 <_enter+0x228>
    48000238:	6210                	ld	a2,0(a2)
validation-software/freedom-metal/src/entry.S:551
    call metal_init_copy_segment
    4800023a:	146000ef          	jal	48000380 <metal_init_copy_segment>
validation-software/freedom-metal/src/entry.S:554

    /* Copy the LIM section */
    long_load a0, metal_segment_lim_source_start
    4800023e:	a029                	j	48000248 <_enter+0x248>
    48000240:	480009f8          	.word	0x480009f8
    48000244:	00000000          	.word	0x00000000
    48000248:	00000517          	auipc	a0,0x0
    4800024c:	ff850513          	add	a0,a0,-8 # 48000240 <_enter+0x240>
    48000250:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/entry.S:555
    long_load a1, metal_segment_lim_target_start
    48000252:	a039                	j	48000260 <_enter+0x260>
    48000254:	00000013          	nop
    48000258:	80000000          	.word	0x80000000
    4800025c:	00000000          	.word	0x00000000
    48000260:	00000597          	auipc	a1,0x0
    48000264:	ff858593          	add	a1,a1,-8 # 48000258 <_enter+0x258>
    48000268:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/entry.S:556
    long_load a2, metal_segment_lim_target_end
    4800026a:	a039                	j	48000278 <_enter+0x278>
    4800026c:	00000013          	nop
    48000270:	80000000          	.word	0x80000000
    48000274:	00000000          	.word	0x00000000
    48000278:	00000617          	auipc	a2,0x0
    4800027c:	ff860613          	add	a2,a2,-8 # 48000270 <_enter+0x270>
    48000280:	6210                	ld	a2,0(a2)
validation-software/freedom-metal/src/entry.S:557
    call metal_init_copy_segment
    48000282:	0fe000ef          	jal	48000380 <metal_init_copy_segment>
validation-software/freedom-metal/src/entry.S:558
    fence.i
    48000286:	0000100f          	fence.i
validation-software/freedom-metal/src/entry.S:561

    /* Copy the text section if needed*/
    long_load a0, metal_segment_text_source_start
    4800028a:	a039                	j	48000298 <_enter+0x298>
    4800028c:	00000013          	nop
    48000290:	48000a00          	.word	0x48000a00
    48000294:	00000000          	.word	0x00000000
    48000298:	00000517          	auipc	a0,0x0
    4800029c:	ff850513          	add	a0,a0,-8 # 48000290 <_enter+0x290>
    480002a0:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/entry.S:562
    long_load a1, metal_segment_text_target_start
    480002a2:	a039                	j	480002b0 <_enter+0x2b0>
    480002a4:	00000013          	nop
    480002a8:	48000a00          	.word	0x48000a00
    480002ac:	00000000          	.word	0x00000000
    480002b0:	00000597          	auipc	a1,0x0
    480002b4:	ff858593          	add	a1,a1,-8 # 480002a8 <_enter+0x2a8>
    480002b8:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/entry.S:563
    long_load a2, metal_segment_text_target_end
    480002ba:	a039                	j	480002c8 <_enter+0x2c8>
    480002bc:	00000013          	nop
    480002c0:	48006216          	.word	0x48006216
    480002c4:	00000000          	.word	0x00000000
    480002c8:	00000617          	auipc	a2,0x0
    480002cc:	ff860613          	add	a2,a2,-8 # 480002c0 <_enter+0x2c0>
    480002d0:	6210                	ld	a2,0(a2)
validation-software/freedom-metal/src/entry.S:564
    call metal_init_copy_segment
    480002d2:	0ae000ef          	jal	48000380 <metal_init_copy_segment>
validation-software/freedom-metal/src/entry.S:568

    /* Fence all subsequent instruction fetches until after the ITIM & LIM
     * writes complete */
    fence.i
    480002d6:	0000100f          	fence.i
validation-software/freedom-metal/src/entry.S:571

    /* Zero the BSS segment. */
    long_load a0, metal_segment_bss_target_start
    480002da:	a039                	j	480002e8 <_enter+0x2e8>
    480002dc:	00000013          	nop
    480002e0:	80001048          	.word	0x80001048
    480002e4:	00000000          	.word	0x00000000
    480002e8:	00000517          	auipc	a0,0x0
    480002ec:	ff850513          	add	a0,a0,-8 # 480002e0 <_enter+0x2e0>
    480002f0:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/entry.S:572
    long_load a1, metal_segment_bss_target_end
    480002f2:	a039                	j	48000300 <_enter+0x300>
    480002f4:	00000013          	nop
    480002f8:	800013e0          	.word	0x800013e0
    480002fc:	00000000          	.word	0x00000000
    48000300:	00000597          	auipc	a1,0x0
    48000304:	ff858593          	add	a1,a1,-8 # 480002f8 <_enter+0x2f8>
    48000308:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/entry.S:573
    call metal_init_clear_segment
    4800030a:	05e000ef          	jal	48000368 <metal_init_clear_segment>
validation-software/freedom-metal/src/entry.S:581
     * thing to do is to make the callback to the parent environment if it's
     * been requested to do so. */

.Lskip_init:

    csrr a0, mhartid
    4800030e:	f1402573          	csrr	a0,mhartid
validation-software/freedom-metal/src/entry.S:582
    long_load t0, _start
    48000312:	a039                	j	48000320 <_enter+0x320>
    48000314:	00000013          	nop
    48000318:	48000bfc          	.word	0x48000bfc
    4800031c:	00000000          	.word	0x00000000
    48000320:	00000297          	auipc	t0,0x0
    48000324:	ff828293          	add	t0,t0,-8 # 48000318 <_enter+0x318>
    48000328:	0002b283          	ld	t0,0(t0)
validation-software/freedom-metal/src/entry.S:583
    jalr t0
    4800032c:	9282                	jalr	t0
validation-software/freedom-metal/src/entry.S:588

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
    4800032e:	00000093          	li	ra,0
validation-software/freedom-metal/src/entry.S:589
    beqz ra, 1f
    48000332:	00008363          	beqz	ra,48000338 <_enter+0x338>
validation-software/freedom-metal/src/entry.S:590
    jalr ra
    48000336:	9082                	jalr	ra
validation-software/freedom-metal/src/entry.S:595
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
    la t0, 1f
    48000338:	00000297          	auipc	t0,0x0
    4800033c:	01828293          	add	t0,t0,24 # 48000350 <_enter+0x350>
validation-software/freedom-metal/src/entry.S:596
    csrw mtvec, t0
    48000340:	30529073          	csrw	mtvec,t0
    48000344:	00000013          	nop
    48000348:	00000013          	nop
    4800034c:	00000013          	nop
validation-software/freedom-metal/src/entry.S:599
.align 4
1:
    lw t1, 0(x0)
    48000350:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
validation-software/freedom-metal/src/entry.S:600
    j 1b
    48000354:	bff5                	j	48000350 <_enter+0x350>
	...

0000000048000368 <metal_init_clear_segment>:
metal_init_clear_segment():
validation-software/freedom-metal/src/entry.S:615
    /*
     * void metal_init_clear_segment(uintptr_t *start, uintptr_t *end)
     *
     * Zero a memory segment.
     */
    bge a0, a1, 2f
    48000368:	00b55763          	bge	a0,a1,48000376 <metal_init_clear_segment+0xe>
validation-software/freedom-metal/src/entry.S:618

1:
    store_x x0, 0(a0)
    4800036c:	00053023          	sd	zero,0(a0)
validation-software/freedom-metal/src/entry.S:619
    addi a0, a0, REG_SIZE
    48000370:	0521                	add	a0,a0,8
validation-software/freedom-metal/src/entry.S:620
    blt a0, a1, 1b
    48000372:	feb54de3          	blt	a0,a1,4800036c <metal_init_clear_segment+0x4>
validation-software/freedom-metal/src/entry.S:622
2:
    ret
    48000376:	8082                	ret
	...

0000000048000380 <metal_init_copy_segment>:
metal_init_copy_segment():
validation-software/freedom-metal/src/entry.S:642
     * to get relocated into a non-persistant writable memory before C code can
     * execute.  If this is the case we do so here.  This step is optional:
     * If this relocation is not necessary then it must simply set
     * metal_segment_data_source_start to equal to metal_segment_data_target_start.
     */
    beq a0, a1, 2f
    48000380:	00b50c63          	beq	a0,a1,48000398 <metal_init_copy_segment+0x18>
validation-software/freedom-metal/src/entry.S:643
    bge a1, a2, 2f
    48000384:	00c5da63          	bge	a1,a2,48000398 <metal_init_copy_segment+0x18>
validation-software/freedom-metal/src/entry.S:646

1:
    load_x t0, 0(a0)
    48000388:	00053283          	ld	t0,0(a0)
validation-software/freedom-metal/src/entry.S:647
    addi a0, a0, REG_SIZE
    4800038c:	0521                	add	a0,a0,8
validation-software/freedom-metal/src/entry.S:648
    store_x t0, 0(a1)
    4800038e:	0055b023          	sd	t0,0(a1)
validation-software/freedom-metal/src/entry.S:649
    addi a1, a1, REG_SIZE
    48000392:	05a1                	add	a1,a1,8
validation-software/freedom-metal/src/entry.S:650
    blt a1, a2, 1b
    48000394:	fec5cae3          	blt	a1,a2,48000388 <metal_init_copy_segment+0x8>
validation-software/freedom-metal/src/entry.S:652
2:
    ret
    48000398:	8082                	ret

000000004800039a <_fini>:
_fini():
validation-software/freedom-metal/src/entry.S:663
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
    4800039a:	8082                	ret
_init():
    4800039c:	0000                	unimp
    4800039e:	0000                	unimp
	...

00000000480003a2 <__register_frame_info>:
__register_frame_info():
validation-software/freedom-metal/src/entry.S:677
 * going to leave this in for now.  At least it's fairly cheap :) */
.weak __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
    480003a2:	8082                	ret
    480003a4:	0000                	unimp
	...

00000000480003a8 <metal_disable_cclf>:
metal_disable_cclf():
validation-software/freedom-metal/src/entry.S:696
     * Mallard Panda cores Identification:  
     * marchid bits[7-0] = 0x08  (Mallard Generator) 
     * mimpid bits[31-24] = 0x0B (Panda Branch)   
     * This routine modifies t0 and t1 registers 
     */
    csrr t0, marchid
    480003a8:	f12022f3          	csrr	t0,marchid
validation-software/freedom-metal/src/entry.S:697
    andi t0, t0, 0xff
    480003ac:	0ff2f293          	zext.b	t0,t0
validation-software/freedom-metal/src/entry.S:698
    li t1, METAL_ARCH_MALLARD_VERSION
    480003b0:	4321                	li	t1,8
validation-software/freedom-metal/src/entry.S:699
    bgt  t0, t1, 1f
    480003b2:	00534f63          	blt	t1,t0,480003d0 <metal_disable_cclf+0x28>
validation-software/freedom-metal/src/entry.S:700
    csrr t0, mimpid
    480003b6:	f13022f3          	csrr	t0,mimpid
validation-software/freedom-metal/src/entry.S:701
    srli t0, t0, 24
    480003ba:	0182d293          	srl	t0,t0,0x18
validation-software/freedom-metal/src/entry.S:702
    andi t0, t0, 0xff
    480003be:	0ff2f293          	zext.b	t0,t0
validation-software/freedom-metal/src/entry.S:703
    li t1, METAL_ARCH_PANDA_BRANCH  
    480003c2:	432d                	li	t1,11
validation-software/freedom-metal/src/entry.S:704
    bgt t0, t1, 1f  
    480003c4:	00534663          	blt	t1,t0,480003d0 <metal_disable_cclf+0x28>
validation-software/freedom-metal/src/entry.S:705
    li t0, (1 << 21)
    480003c8:	002002b7          	lui	t0,0x200
validation-software/freedom-metal/src/entry.S:706
    csrs 0x7C1, t0
    480003cc:	7c12a073          	csrs	0x7c1,t0
validation-software/freedom-metal/src/entry.S:708
1:
    ret
    480003d0:	8082                	ret
    480003d2:	0000                	unimp
    480003d4:	0000                	unimp
	...

00000000480003d8 <__metal_before_start>:
__metal_before_start():
validation-software/freedom-metal/src/scrub.S:15
.section .text.metal.init.scrub
.weak __metal_before_start
.type __metal_before_start, @function
__metal_before_start:
    /* Save caller ra */
    mv      a5, ra
    480003d8:	8786                	mv	a5,ra
validation-software/freedom-metal/src/scrub.S:18

    .weak __metal_eccscrub_bit
    la      t0, __metal_eccscrub_bit
    480003da:	00100293          	li	t0,1
validation-software/freedom-metal/src/scrub.S:19
    beqz    t0, skip_scrub
    480003de:	0e028e63          	beqz	t0,480004da <skip_scrub>
validation-software/freedom-metal/src/scrub.S:22

    /* Disable machine interrupts to be safe */
    li      a3, 8
    480003e2:	46a1                	li	a3,8
validation-software/freedom-metal/src/scrub.S:23
    csrc    mstatus, a3
    480003e4:	3006b073          	csrc	mstatus,a3
validation-software/freedom-metal/src/scrub.S:26

    /* Zero out stack memory */
    long_load  a0, metal_segment_stack_begin
    480003e8:	a801                	j	480003f8 <__metal_before_start+0x20>
    480003ea:	0001                	nop
    480003ec:	00000013          	nop
    480003f0:	800013e0          	.word	0x800013e0
    480003f4:	00000000          	.word	0x00000000
    480003f8:	00000517          	auipc	a0,0x0
    480003fc:	ff850513          	add	a0,a0,-8 # 480003f0 <__metal_before_start+0x18>
    48000400:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/scrub.S:27
    long_load  a1, metal_segment_stack_end
    48000402:	a039                	j	48000410 <__metal_before_start+0x38>
    48000404:	00000013          	nop
    48000408:	800017e0          	.word	0x800017e0
    4800040c:	00000000          	.word	0x00000000
    48000410:	00000597          	auipc	a1,0x0
    48000414:	ff858593          	add	a1,a1,-8 # 48000408 <__metal_before_start+0x30>
    48000418:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/scrub.S:28
    beq     a0, a1, 1f
    4800041a:	00b50463          	beq	a0,a1,48000422 <__metal_before_start+0x4a>
validation-software/freedom-metal/src/scrub.S:29
    jal     metal_init_clear_segment
    4800041e:	f4bff0ef          	jal	48000368 <metal_init_clear_segment>
validation-software/freedom-metal/src/scrub.S:33
1:

    /* Zero out heap memory */
    long_load  a0, metal_segment_heap_target_start
    48000422:	a039                	j	48000430 <__metal_before_start+0x58>
    48000424:	00000013          	nop
    48000428:	800017e0          	.word	0x800017e0
    4800042c:	00000000          	.word	0x00000000
    48000430:	00000517          	auipc	a0,0x0
    48000434:	ff850513          	add	a0,a0,-8 # 48000428 <__metal_before_start+0x50>
    48000438:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/scrub.S:34
    long_load  a1, metal_segment_heap_target_end
    4800043a:	a039                	j	48000448 <__metal_before_start+0x70>
    4800043c:	00000013          	nop
    48000440:	80001fe0          	.word	0x80001fe0
    48000444:	00000000          	.word	0x00000000
    48000448:	00000597          	auipc	a1,0x0
    4800044c:	ff858593          	add	a1,a1,-8 # 48000440 <__metal_before_start+0x68>
    48000450:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/scrub.S:35
    beq     a0, a1, 2f
    48000452:	00b50b63          	beq	a0,a1,48000468 <__metal_before_start+0x90>
validation-software/freedom-metal/src/scrub.S:39
    /* By default zero-scrub at most 64KB, for limiting RTL simulation run time.
     * If more than 64KB of heap is used, please override the 0x10000 (in bytes)
     * value below. */
    li       t0, 0x10000
    48000456:	62c1                	lui	t0,0x10
validation-software/freedom-metal/src/scrub.S:40
    add      t0, t0, a0
    48000458:	92aa                	add	t0,t0,a0
validation-software/freedom-metal/src/scrub.S:43
    /* Scrub the address range between metal_segment_heap_target_start and
     * min{(heap start address + 64 KB), heap end address} */
    slt      t1, t0, a1
    4800045a:	00b2a333          	slt	t1,t0,a1
validation-software/freedom-metal/src/scrub.S:44
    beqz     t1, 1f
    4800045e:	00030363          	beqz	t1,48000464 <__metal_before_start+0x8c>
validation-software/freedom-metal/src/scrub.S:45
    mv       a1, t0
    48000462:	8596                	mv	a1,t0
validation-software/freedom-metal/src/scrub.S:47
1:
    jal     metal_init_clear_segment
    48000464:	f05ff0ef          	jal	48000368 <metal_init_clear_segment>
validation-software/freedom-metal/src/scrub.S:53
2:

    /* No need to scrub the data segment, this will be done later in entry.S */

    /* Zero out ITIM memory */
    long_load  a0, metal_segment_itim_target_start
    48000468:	a801                	j	48000478 <__metal_before_start+0xa0>
    4800046a:	0001                	nop
    4800046c:	00000013          	nop
    48000470:	80000000          	.word	0x80000000
    48000474:	00000000          	.word	0x00000000
    48000478:	00000517          	auipc	a0,0x0
    4800047c:	ff850513          	add	a0,a0,-8 # 48000470 <__metal_before_start+0x98>
    48000480:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/scrub.S:54
    long_load  a1, metal_segment_itim_target_end
    48000482:	a039                	j	48000490 <__metal_before_start+0xb8>
    48000484:	00000013          	nop
    48000488:	80000000          	.word	0x80000000
    4800048c:	00000000          	.word	0x00000000
    48000490:	00000597          	auipc	a1,0x0
    48000494:	ff858593          	add	a1,a1,-8 # 48000488 <__metal_before_start+0xb0>
    48000498:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/scrub.S:55
    beq     a0, a1, 1f
    4800049a:	00b50463          	beq	a0,a1,480004a2 <__metal_before_start+0xca>
validation-software/freedom-metal/src/scrub.S:56
    jal     metal_init_clear_segment
    4800049e:	ecbff0ef          	jal	48000368 <metal_init_clear_segment>
validation-software/freedom-metal/src/scrub.S:60
1:

    /* Zero out LIM memory */
    long_load  a0, metal_segment_lim_target_start
    480004a2:	a039                	j	480004b0 <__metal_before_start+0xd8>
    480004a4:	00000013          	nop
    480004a8:	80000000          	.word	0x80000000
    480004ac:	00000000          	.word	0x00000000
    480004b0:	00000517          	auipc	a0,0x0
    480004b4:	ff850513          	add	a0,a0,-8 # 480004a8 <__metal_before_start+0xd0>
    480004b8:	6108                	ld	a0,0(a0)
validation-software/freedom-metal/src/scrub.S:61
    long_load  a1, metal_segment_lim_target_end
    480004ba:	a039                	j	480004c8 <__metal_before_start+0xf0>
    480004bc:	00000013          	nop
    480004c0:	80000000          	.word	0x80000000
    480004c4:	00000000          	.word	0x00000000
    480004c8:	00000597          	auipc	a1,0x0
    480004cc:	ff858593          	add	a1,a1,-8 # 480004c0 <__metal_before_start+0xe8>
    480004d0:	618c                	ld	a1,0(a1)
validation-software/freedom-metal/src/scrub.S:62
    beq     a0, a1, 1f
    480004d2:	00b50463          	beq	a0,a1,480004da <skip_scrub>
validation-software/freedom-metal/src/scrub.S:63
    jal     metal_init_clear_segment
    480004d6:	e93ff0ef          	jal	48000368 <metal_init_clear_segment>

00000000480004da <skip_scrub>:
skip_scrub():
validation-software/freedom-metal/src/scrub.S:71
    /* @todo any other memories to be scrubbed for ECC errors should be added
     * here */

skip_scrub:
    /* Restore caller ra */
    mv      ra, a5
    480004da:	80be                	mv	ra,a5
validation-software/freedom-metal/src/scrub.S:72
    ret
    480004dc:	8082                	ret
	...

00000000480004e0 <early_trap_vector>:
early_trap_vector():
validation-software/freedom-metal/src/trap.S:64
.section .text.metal.init.trapvec
.global early_trap_vector
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
    480004e0:	342022f3          	csrr	t0,mcause
validation-software/freedom-metal/src/trap.S:65
    csrr t1, mepc
    480004e4:	34102373          	csrr	t1,mepc
validation-software/freedom-metal/src/trap.S:66
    csrr t2, mtval
    480004e8:	343023f3          	csrr	t2,mtval
validation-software/freedom-metal/src/trap.S:67
    j early_trap_vector
    480004ec:	bfd5                	j	480004e0 <early_trap_vector>

Disassembly of section .text:

0000000048000a00 <register_fini>:
register_fini():
    48000a00:	00000793          	li	a5,0
    48000a04:	c799                	beqz	a5,48000a12 <register_fini+0x12>
    48000a06:	00005517          	auipc	a0,0x5
    48000a0a:	62250513          	add	a0,a0,1570 # 48006028 <__libc_fini_array>
    48000a0e:	5f20506f          	j	48006000 <atexit>
    48000a12:	8082                	ret

0000000048000a14 <main>:
main():
sw/main.c:3
volatile int global_val = 0;

int main() {
    48000a14:	1101                	add	sp,sp,-32
    48000a16:	ec06                	sd	ra,24(sp)
    48000a18:	e822                	sd	s0,16(sp)
    48000a1a:	1000                	add	s0,sp,32
    48000a1c:	4501                	li	a0,0
    48000a1e:	fea42623          	sw	a0,-20(s0)
sw/main.c:4
  global_val = 1;
    48000a22:	e9818613          	add	a2,gp,-360 # 80001048 <global_val>
    48000a26:	4585                	li	a1,1
    48000a28:	c20c                	sw	a1,0(a2)
sw/main.c:6

  return 0;
    48000a2a:	fe040113          	add	sp,s0,-32
    48000a2e:	60e2                	ld	ra,24(sp)
    48000a30:	6442                	ld	s0,16(sp)
    48000a32:	6105                	add	sp,sp,32
    48000a34:	8082                	ret

0000000048000a36 <_metal_trap>:
_metal_trap():
validation-software/freedom-metal/src/trap.S:20
    addi t0, ra, -1
    48000a36:	fff08293          	add	t0,ra,-1
validation-software/freedom-metal/src/trap.S:21
    csrw mepc, t0
    48000a3a:	34129073          	csrw	mepc,t0
validation-software/freedom-metal/src/trap.S:24
    csrw mcause, a0
    48000a3e:	34251073          	csrw	mcause,a0
validation-software/freedom-metal/src/trap.S:27
    csrr t0, mstatus
    48000a42:	300022f3          	csrr	t0,mstatus
validation-software/freedom-metal/src/trap.S:30
    li t1, -1
    48000a46:	537d                	li	t1,-1
validation-software/freedom-metal/src/trap.S:31
    xori t1, t1, METAL_MSTATUS_MIE_SHIFT
    48000a48:	00834313          	xor	t1,t1,8
validation-software/freedom-metal/src/trap.S:32
    and t0, t0, t1
    48000a4c:	0062f2b3          	and	t0,t0,t1
validation-software/freedom-metal/src/trap.S:35
    li t1, METAL_MSTATUS_MPP_M
    48000a50:	430d                	li	t1,3
validation-software/freedom-metal/src/trap.S:36
    slli t1, t1, METAL_MSTATUS_MPP_SHIFT
    48000a52:	032e                	sll	t1,t1,0xb
validation-software/freedom-metal/src/trap.S:37
    or t0, t0, t1
    48000a54:	0062e2b3          	or	t0,t0,t1
validation-software/freedom-metal/src/trap.S:40
    csrw mstatus, t0
    48000a58:	30029073          	csrw	mstatus,t0
validation-software/freedom-metal/src/trap.S:43
    csrr t0, mtvec
    48000a5c:	305022f3          	csrr	t0,mtvec
validation-software/freedom-metal/src/trap.S:49
    andi t0, t0, METAL_MTVEC_MODE_MASK
    48000a60:	0032f293          	and	t0,t0,3
validation-software/freedom-metal/src/trap.S:52
    jr t0
    48000a64:	8282                	jr	t0

0000000048000a66 <__metal_wake_harts>:
__metal_wake_harts():
validation-software/freedom-metal/src/init.c:72
/*
 * _synchronize_harts() is called by init.c to cause harts > 0 to wait for
 * hart 0 to finish copying the data section, zeroing the BSS, and running
 * the libc contstructors.
 */
static void __metal_wake_harts(void) {
    48000a66:	1141                	add	sp,sp,-16
    48000a68:	e422                	sd	s0,8(sp)
    48000a6a:	0800                	add	s0,sp,16
validation-software/freedom-metal/src/init.c:114
            METAL_MSIP(msip_base, i) = 1;
        }
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
    48000a6c:	0001                	nop
    48000a6e:	6422                	ld	s0,8(sp)
    48000a70:	0141                	add	sp,sp,16
    48000a72:	8082                	ret

0000000048000a74 <metal_chickenbits_init>:
metal_chickenbits_init():
validation-software/freedom-metal/src/init.c:122
#define LOADL1NOALLOCVECTOR_VALUE 1
/*
 *  Chicken bits will be initialized for the modules which are not having
 *  their respective driver implementation.
 */
void metal_chickenbits_init(void) {
    48000a74:	7179                	add	sp,sp,-48
    48000a76:	f422                	sd	s0,40(sp)
    48000a78:	1800                	add	s0,sp,48
validation-software/freedom-metal/src/init.c:133
    *smc0_clock_gating_disable_reg = 0;
#endif /* defined(METAL_SIFIVE_SMC0) */

// Assuming there is only one SMC in the platform
#if defined(METAL_SIFIVE_SMC1) && defined(METAL_SIFIVE_SMC1_0_BASE_ADDRESS)
    volatile uint32_t *smc1_clock_gating_disable_reg = 
    48000a7a:	031007b7          	lui	a5,0x3100
    48000a7e:	05078793          	add	a5,a5,80 # 3100050 <__heap_size+0x30ff850>
    48000a82:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/init.c:135
         (uint32_t*)(METAL_SIFIVE_SMC1_0_BASE_ADDRESS + METAL_SIFIVE_SMC1_CHICKEN);
    *smc1_clock_gating_disable_reg = 0;
    48000a86:	fe043783          	ld	a5,-32(s0)
    48000a8a:	0007a023          	sw	zero,0(a5)
validation-software/freedom-metal/src/init.c:146
            (idx << 0xc) + METAL_SIFIVE_CMC2_CHICKEN)) = 0;
}
#endif

#if defined(METAL_SIFIVE_TMC1)
for(int idx = 0; idx < METAL_SIFIVE_TMC1_COUNT; idx++) {
    48000a8e:	fe042623          	sw	zero,-20(s0)
    48000a92:	a01d                	j	48000ab8 <metal_chickenbits_init+0x44>
validation-software/freedom-metal/src/init.c:148 (discriminator 3)
    (*(volatile uint32_t *)(METAL_SIFIVE_TMC1_0_BASE_ADDRESS + 
            (idx << 0xc) + METAL_SIFIVE_TMC1_CHICKEN)) = 0;
    48000a94:	fec42783          	lw	a5,-20(s0)
    48000a98:	00c7979b          	sllw	a5,a5,0xc
    48000a9c:	2781                	sext.w	a5,a5
    48000a9e:	873e                	mv	a4,a5
    48000aa0:	031017b7          	lui	a5,0x3101
    48000aa4:	05078793          	add	a5,a5,80 # 3101050 <__heap_size+0x3100850>
    48000aa8:	97ba                	add	a5,a5,a4
    48000aaa:	0007a023          	sw	zero,0(a5)
validation-software/freedom-metal/src/init.c:146 (discriminator 3)
for(int idx = 0; idx < METAL_SIFIVE_TMC1_COUNT; idx++) {
    48000aae:	fec42783          	lw	a5,-20(s0)
    48000ab2:	2785                	addw	a5,a5,1
    48000ab4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/init.c:146 (discriminator 1)
    48000ab8:	fec42783          	lw	a5,-20(s0)
    48000abc:	2781                	sext.w	a5,a5
    48000abe:	fcf05be3          	blez	a5,48000a94 <metal_chickenbits_init+0x20>
validation-software/freedom-metal/src/init.c:162
    }
#endif

#if defined(METAL_SIFIVE_ORDER_OBLITERATOR0)
#define CLOCK_GATE_DISABLE_OFFSET 0x8
    (*(volatile uint32_t *)(METAL_SIFIVE_ORDER_OBLITERATOR0_0_BASE_ADDRESS ))
    48000ac2:	170047b7          	lui	a5,0x17004
    48000ac6:	439c                	lw	a5,0(a5)
    48000ac8:	0007871b          	sext.w	a4,a5
    48000acc:	170047b7          	lui	a5,0x17004
validation-software/freedom-metal/src/init.c:163
                              &=  1 << CLOCK_GATE_DISABLE_OFFSET;
    48000ad0:	10077713          	and	a4,a4,256
    48000ad4:	2701                	sext.w	a4,a4
    48000ad6:	c398                	sw	a4,0(a5)
validation-software/freedom-metal/src/init.c:169

#endif

#if defined(METAL_SIFIVE_L2PF3)
#define SCALAR_LOAD_SUPPORT_EN 0x0
    (*(volatile uint32_t *)(METAL_SIFIVE_L2PF3_0_BASE_ADDRESS + 
    48000ad8:	020307b7          	lui	a5,0x2030
    48000adc:	439c                	lw	a5,0(a5)
    48000ade:	0007871b          	sext.w	a4,a5
    48000ae2:	020307b7          	lui	a5,0x2030
validation-software/freedom-metal/src/init.c:170
         METAL_SIFIVE_L2PF3_BASIC_CONTROL)) |=  1 << SCALAR_LOAD_SUPPORT_EN;
    48000ae6:	00176713          	or	a4,a4,1
    48000aea:	2701                	sext.w	a4,a4
    48000aec:	c398                	sw	a4,0(a5)
validation-software/freedom-metal/src/init.c:176

#endif

// Assuming there is only one APLICS in the system
#if defined(METAL_SIFIVE_APLICS) && defined(METAL_SIFIVE_APLICS_0_BASE_ADDRESS)
    volatile uint32_t *aplic_clock_gating_disable_reg = 
    48000aee:	0c0007b7          	lui	a5,0xc000
    48000af2:	fcf43c23          	sd	a5,-40(s0)
validation-software/freedom-metal/src/init.c:178
         (uint32_t*)(METAL_SIFIVE_APLICS_0_BASE_ADDRESS + METAL_SIFIVE_APLICS_GCTL_BASE);
    *aplic_clock_gating_disable_reg = 0;
    48000af6:	fd843783          	ld	a5,-40(s0)
    48000afa:	0007a023          	sw	zero,0(a5) # c000000 <__heap_size+0xbfff800>
validation-software/freedom-metal/src/init.c:182
#endif /* defined(METAL_SIFIVE_APLICS) */


   uint64_t resetval = 0;
    48000afe:	fc043823          	sd	zero,-48(s0)
validation-software/freedom-metal/src/init.c:195
    temp   <<= LOADL1NOALLOCVECTOR_OFFSET;
    resetval |= temp;
    __asm__ volatile("csrw 0x7C2, %0" ::"r"(resetval));
#endif /* METAL_SIFIVE_PL2CACHE*/

}
    48000b02:	0001                	nop
    48000b04:	7422                	ld	s0,40(sp)
    48000b06:	6145                	add	sp,sp,48
    48000b08:	8082                	ret

0000000048000b0a <metal_init>:
metal_init():
validation-software/freedom-metal/src/init.c:197

void metal_init(void) {
    48000b0a:	7179                	add	sp,sp,-48
    48000b0c:	f406                	sd	ra,40(sp)
    48000b0e:	f022                	sd	s0,32(sp)
    48000b10:	1800                	add	s0,sp,48
validation-software/freedom-metal/src/init.c:200
    /* Make sure the initialization is only run once */
    static int init_done = 0;
    if (init_done) {
    48000b12:	ee018793          	add	a5,gp,-288 # 80001090 <init_done.1>
    48000b16:	439c                	lw	a5,0(a5)
    48000b18:	e3b5                	bnez	a5,48000b7c <metal_init+0x72>
validation-software/freedom-metal/src/init.c:203
        return;
    }
    init_done = 1;
    48000b1a:	ee018793          	add	a5,gp,-288 # 80001090 <init_done.1>
    48000b1e:	4705                	li	a4,1
    48000b20:	c398                	sw	a4,0(a5)
validation-software/freedom-metal/src/init.c:216
#elif defined(METAL_SIFIVE_CCACHE0)
    sifive_ccache0_init();
#endif /* METAL_SIFIVE_CCACHE1 */

#ifdef METAL_SIFIVE_EXTENSIBLECACHE0
    sifive_extensiblecache0_init();
    48000b22:	69a030ef          	jal	480041bc <sifive_extensiblecache0_init>
validation-software/freedom-metal/src/init.c:219
#endif /* METAL_SIFIVE_EXTENSIBLECACHE0 */

    metal_chickenbits_init();
    48000b26:	f4fff0ef          	jal	48000a74 <metal_chickenbits_init>
validation-software/freedom-metal/src/init.c:228
     * accessible from all harts. */
    struct metal_cpu *cpu;
    struct metal_interrupt *cpu_intr;
    struct metal_interrupt *tmr_intr;

    cpu = metal_cpu_get(metal_cpu_get_current_hartid());
    48000b2a:	2be050ef          	jal	48005de8 <metal_cpu_get_current_hartid>
    48000b2e:	87aa                	mv	a5,a0
    48000b30:	2781                	sext.w	a5,a5
    48000b32:	853e                	mv	a0,a5
    48000b34:	266050ef          	jal	48005d9a <metal_cpu_get>
    48000b38:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/init.c:229
    if (cpu == NULL) {
    48000b3c:	fe843783          	ld	a5,-24(s0)
    48000b40:	c3a1                	beqz	a5,48000b80 <metal_init+0x76>
validation-software/freedom-metal/src/init.c:232
        return ;
    }
    cpu_intr = metal_cpu_interrupt_controller(cpu);
    48000b42:	fe843503          	ld	a0,-24(s0)
    48000b46:	126050ef          	jal	48005c6c <metal_cpu_interrupt_controller>
    48000b4a:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/init.c:233
    if (cpu_intr == NULL) {
    48000b4e:	fe043783          	ld	a5,-32(s0)
    48000b52:	cb8d                	beqz	a5,48000b84 <metal_init+0x7a>
validation-software/freedom-metal/src/init.c:236
        return ;
    }
    metal_interrupt_init(cpu_intr);
    48000b54:	fe043503          	ld	a0,-32(s0)
    48000b58:	14c000ef          	jal	48000ca4 <metal_interrupt_init>
validation-software/freedom-metal/src/init.c:238

    tmr_intr = metal_cpu_timer_interrupt_controller(cpu);
    48000b5c:	fe843503          	ld	a0,-24(s0)
    48000b60:	7df040ef          	jal	48005b3e <metal_cpu_timer_interrupt_controller>
    48000b64:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/init.c:239
    if (tmr_intr == NULL) {
    48000b68:	fd843783          	ld	a5,-40(s0)
    48000b6c:	cf91                	beqz	a5,48000b88 <metal_init+0x7e>
validation-software/freedom-metal/src/init.c:242
        return ;
    }
    metal_interrupt_init(tmr_intr);
    48000b6e:	fd843503          	ld	a0,-40(s0)
    48000b72:	132000ef          	jal	48000ca4 <metal_interrupt_init>
validation-software/freedom-metal/src/init.c:245

    /* Initilize tty */
    metal_tty_init();
    48000b76:	6d0000ef          	jal	48001246 <metal_tty_init>
    48000b7a:	a801                	j	48000b8a <metal_init+0x80>
validation-software/freedom-metal/src/init.c:201
        return;
    48000b7c:	0001                	nop
    48000b7e:	a031                	j	48000b8a <metal_init+0x80>
validation-software/freedom-metal/src/init.c:230
        return ;
    48000b80:	0001                	nop
    48000b82:	a021                	j	48000b8a <metal_init+0x80>
validation-software/freedom-metal/src/init.c:234
        return ;
    48000b84:	0001                	nop
    48000b86:	a011                	j	48000b8a <metal_init+0x80>
validation-software/freedom-metal/src/init.c:240
        return ;
    48000b88:	0001                	nop
validation-software/freedom-metal/src/init.c:246
}
    48000b8a:	70a2                	ld	ra,40(sp)
    48000b8c:	7402                	ld	s0,32(sp)
    48000b8e:	6145                	add	sp,sp,48
    48000b90:	8082                	ret

0000000048000b92 <metal_secondary_init>:
metal_secondary_init():
validation-software/freedom-metal/src/init.c:248

void metal_secondary_init(void) {
    48000b92:	1101                	add	sp,sp,-32
    48000b94:	ec06                	sd	ra,24(sp)
    48000b96:	e822                	sd	s0,16(sp)
    48000b98:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/init.c:251
#ifdef METAL_SIFIVE_BUSERROR0
    struct metal_cpu *cpu;
    cpu = metal_cpu_get(metal_cpu_get_current_hartid());
    48000b9a:	24e050ef          	jal	48005de8 <metal_cpu_get_current_hartid>
    48000b9e:	87aa                	mv	a5,a0
    48000ba0:	2781                	sext.w	a5,a5
    48000ba2:	853e                	mv	a0,a5
    48000ba4:	1f6050ef          	jal	48005d9a <metal_cpu_get>
    48000ba8:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/init.c:253

    struct metal_buserror *beu = metal_cpu_get_buserror(cpu);
    48000bac:	fe843503          	ld	a0,-24(s0)
    48000bb0:	19e050ef          	jal	48005d4e <metal_cpu_get_buserror>
    48000bb4:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/init.c:254
    if (beu != NULL) {
    48000bb8:	fe043783          	ld	a5,-32(s0)
    48000bbc:	c789                	beqz	a5,48000bc6 <metal_secondary_init+0x34>
validation-software/freedom-metal/src/init.c:255
        metal_buserror_init(beu);
    48000bbe:	fe043503          	ld	a0,-32(s0)
    48000bc2:	136030ef          	jal	48003cf8 <metal_buserror_init>
validation-software/freedom-metal/src/init.c:281
#elif METAL_SIFIVE_HWPF1
    sifive_hwpf1_init();
#elif defined(METAL_SIFIVE_HWPF0)
    sifive_hwpf0_init();
#endif /* defined(METAL_SIFIVE_HWPF0) */
}
    48000bc6:	0001                	nop
    48000bc8:	60e2                	ld	ra,24(sp)
    48000bca:	6442                	ld	s0,16(sp)
    48000bcc:	6105                	add	sp,sp,32
    48000bce:	8082                	ret

0000000048000bd0 <metal_init_run>:
metal_init_run():
validation-software/freedom-metal/src/init.c:283

void metal_init_run(void) {
    48000bd0:	1141                	add	sp,sp,-16
    48000bd2:	e406                	sd	ra,8(sp)
    48000bd4:	e022                	sd	s0,0(sp)
    48000bd6:	0800                	add	s0,sp,16
validation-software/freedom-metal/src/init.c:284
    metal_init();
    48000bd8:	f33ff0ef          	jal	48000b0a <metal_init>
validation-software/freedom-metal/src/init.c:285
}
    48000bdc:	0001                	nop
    48000bde:	60a2                	ld	ra,8(sp)
    48000be0:	6402                	ld	s0,0(sp)
    48000be2:	0141                	add	sp,sp,16
    48000be4:	8082                	ret

0000000048000be6 <metal_secondary_init_run>:
metal_secondary_init_run():
validation-software/freedom-metal/src/init.c:287

void metal_secondary_init_run(void) {
    48000be6:	1141                	add	sp,sp,-16
    48000be8:	e406                	sd	ra,8(sp)
    48000bea:	e022                	sd	s0,0(sp)
    48000bec:	0800                	add	s0,sp,16
validation-software/freedom-metal/src/init.c:288
    metal_secondary_init();
    48000bee:	fa5ff0ef          	jal	48000b92 <metal_secondary_init>
validation-software/freedom-metal/src/init.c:289
}
    48000bf2:	0001                	nop
    48000bf4:	60a2                	ld	ra,8(sp)
    48000bf6:	6402                	ld	s0,0(sp)
    48000bf8:	0141                	add	sp,sp,16
    48000bfa:	8082                	ret

0000000048000bfc <_start>:
_start():
validation-software/freedom-metal/src/init.c:298
 *
 * @param[in] hartid the RISCV Hard identifier
 */

void _start(uintptr_t hartid)
{
    48000bfc:	7179                	add	sp,sp,-48
    48000bfe:	f406                	sd	ra,40(sp)
    48000c00:	f022                	sd	s0,32(sp)
    48000c02:	1800                	add	s0,sp,48
    48000c04:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/init.c:301
    static const char *argv[] = {"freedom-metal", NULL};

    if (hartid == (uintptr_t)&__metal_init_hart) {
    48000c08:	00000793          	li	a5,0
    48000c0c:	fd843703          	ld	a4,-40(s0)
    48000c10:	00f71e63          	bne	a4,a5,48000c2c <_start+0x30>
validation-software/freedom-metal/src/init.c:303
        /* Register finalization function */
        atexit(__libc_fini_array);
    48000c14:	00005517          	auipc	a0,0x5
    48000c18:	41450513          	add	a0,a0,1044 # 48006028 <__libc_fini_array>
    48000c1c:	3e4050ef          	jal	48006000 <atexit>
validation-software/freedom-metal/src/init.c:305
        /* Init libc array */
        __libc_init_array();
    48000c20:	440050ef          	jal	48006060 <__libc_init_array>
validation-software/freedom-metal/src/init.c:307
        /* Run primary initialization (shared peripherals) */
        metal_init_run();
    48000c24:	fadff0ef          	jal	48000bd0 <metal_init_run>
validation-software/freedom-metal/src/init.c:309
        /* Wake up other harts (if any) that were waiting in a WFI loop */
        __metal_wake_harts();
    48000c28:	e3fff0ef          	jal	48000a66 <__metal_wake_harts>
validation-software/freedom-metal/src/init.c:313
    }

    /* Run secondary initialization (per-hart peripherals) */
    metal_secondary_init_run();
    48000c2c:	fbbff0ef          	jal	48000be6 <metal_secondary_init_run>
validation-software/freedom-metal/src/init.c:321
    /* Run secondary WorldGuard init (mwiddeleg, mlwid and slwid CSRs) */
    metal_secondary_init_worldguard();
#endif /* defined(METAL_SIFIVE_WORLDGUARD1) || defined(METAL_SIFIVE_WORLDGUARD2) */

    /* select and run main for each core */
    int ret = secondary_main(1, argv, NULL);
    48000c30:	4601                	li	a2,0
    48000c32:	37fff597          	auipc	a1,0x37fff
    48000c36:	3fe58593          	add	a1,a1,1022 # 80000030 <argv.0>
    48000c3a:	4505                	li	a0,1
    48000c3c:	014000ef          	jal	48000c50 <secondary_main>
    48000c40:	87aa                	mv	a5,a0
    48000c42:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/init.c:322
    exit(ret);
    48000c46:	fec42783          	lw	a5,-20(s0)
    48000c4a:	853e                	mv	a0,a5
    48000c4c:	3be050ef          	jal	4800600a <exit>

0000000048000c50 <secondary_main>:
secondary_main():
validation-software/freedom-metal/src/init.c:329

/* prototype for standard main function */
int main(int argc, const char *argv[], const char *envp[]);

int secondary_main(int argc, const char *argv[], const char *envp[])
{
    48000c50:	7139                	add	sp,sp,-64
    48000c52:	fc06                	sd	ra,56(sp)
    48000c54:	f822                	sd	s0,48(sp)
    48000c56:	0080                	add	s0,sp,64
    48000c58:	87aa                	mv	a5,a0
    48000c5a:	fcb43823          	sd	a1,-48(s0)
    48000c5e:	fcc43423          	sd	a2,-56(s0)
    48000c62:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/init.c:330
    uintptr_t hartid = 0;
    48000c66:	fe043423          	sd	zero,-24(s0)
validation-software/freedom-metal/src/init.c:331
    __asm__ __volatile__("csrr %[hartid], mhartid"
    48000c6a:	f14027f3          	csrr	a5,mhartid
    48000c6e:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/init.c:333
                         : [hartid] "=r"(hartid)::"memory");
    if (hartid == (uintptr_t)&__metal_boot_hart) {
    48000c72:	00000793          	li	a5,0
    48000c76:	fe843703          	ld	a4,-24(s0)
    48000c7a:	00f71d63          	bne	a4,a5,48000c94 <secondary_main+0x44>
validation-software/freedom-metal/src/init.c:334
        return main(argc, argv, envp);
    48000c7e:	fdc42783          	lw	a5,-36(s0)
    48000c82:	fc843603          	ld	a2,-56(s0)
    48000c86:	fd043583          	ld	a1,-48(s0)
    48000c8a:	853e                	mv	a0,a5
    48000c8c:	d89ff0ef          	jal	48000a14 <main>
    48000c90:	87aa                	mv	a5,a0
    48000c92:	a021                	j	48000c9a <secondary_main+0x4a>
validation-software/freedom-metal/src/init.c:337 (discriminator 1)
    } else {
        while (1) {
            __asm__ __volatile__("wfi");
    48000c94:	10500073          	wfi
    48000c98:	bff5                	j	48000c94 <secondary_main+0x44>
validation-software/freedom-metal/src/init.c:340 (discriminator 1)
        };
    }
}
    48000c9a:	853e                	mv	a0,a5
    48000c9c:	70e2                	ld	ra,56(sp)
    48000c9e:	7442                	ld	s0,48(sp)
    48000ca0:	6121                	add	sp,sp,64
    48000ca2:	8082                	ret

0000000048000ca4 <metal_interrupt_init>:
metal_interrupt_init():
validation-software/freedom-metal/metal/interrupt.h:133
 * before any interrupts are registered or enabled with the handler. It
 * is invalid to initialize an interrupt controller more than once.
 *
 * @param controller The handle for the interrupt controller
 */
__inline__ void metal_interrupt_init(struct metal_interrupt *controller) {
    48000ca4:	1101                	add	sp,sp,-32
    48000ca6:	ec06                	sd	ra,24(sp)
    48000ca8:	e822                	sd	s0,16(sp)
    48000caa:	1000                	add	s0,sp,32
    48000cac:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/interrupt.h:134
    controller->vtable->interrupt_init(controller);
    48000cb0:	fe843783          	ld	a5,-24(s0)
    48000cb4:	639c                	ld	a5,0(a5)
    48000cb6:	639c                	ld	a5,0(a5)
    48000cb8:	fe843503          	ld	a0,-24(s0)
    48000cbc:	9782                	jalr	a5
validation-software/freedom-metal/metal/interrupt.h:135
}
    48000cbe:	0001                	nop
    48000cc0:	60e2                	ld	ra,24(sp)
    48000cc2:	6442                	ld	s0,16(sp)
    48000cc4:	6105                	add	sp,sp,32
    48000cc6:	8082                	ret

0000000048000cc8 <metal_interrupt_set_vector_mode>:
metal_interrupt_set_vector_mode():
validation-software/freedom-metal/metal/interrupt.h:160
 * @param mode The vector mode of the interrupt controller.
 * @return 0 upon success
 */
__inline__ int
metal_interrupt_set_vector_mode(struct metal_interrupt *controller,
                                metal_vector_mode mode) {
    48000cc8:	1101                	add	sp,sp,-32
    48000cca:	ec06                	sd	ra,24(sp)
    48000ccc:	e822                	sd	s0,16(sp)
    48000cce:	1000                	add	s0,sp,32
    48000cd0:	fea43423          	sd	a0,-24(s0)
    48000cd4:	87ae                	mv	a5,a1
    48000cd6:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:161
    return controller->vtable->interrupt_set_vector_mode(controller, mode);
    48000cda:	fe843783          	ld	a5,-24(s0)
    48000cde:	639c                	ld	a5,0(a5)
    48000ce0:	679c                	ld	a5,8(a5)
    48000ce2:	fe442703          	lw	a4,-28(s0)
    48000ce6:	85ba                	mv	a1,a4
    48000ce8:	fe843503          	ld	a0,-24(s0)
    48000cec:	9782                	jalr	a5
    48000cee:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:162
}
    48000cf0:	853e                	mv	a0,a5
    48000cf2:	60e2                	ld	ra,24(sp)
    48000cf4:	6442                	ld	s0,16(sp)
    48000cf6:	6105                	add	sp,sp,32
    48000cf8:	8082                	ret

0000000048000cfa <metal_interrupt_get_vector_mode>:
metal_interrupt_get_vector_mode():
validation-software/freedom-metal/metal/interrupt.h:176
 * @param controller The handle for the interrupt controller
 * @param mode The vector mode of the interrupt controller.
 * @return The interrupt vector mode
 */
__inline__ metal_vector_mode
metal_interrupt_get_vector_mode(struct metal_interrupt *controller) {
    48000cfa:	1101                	add	sp,sp,-32
    48000cfc:	ec06                	sd	ra,24(sp)
    48000cfe:	e822                	sd	s0,16(sp)
    48000d00:	1000                	add	s0,sp,32
    48000d02:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/interrupt.h:177
    return controller->vtable->interrupt_get_vector_mode(controller);
    48000d06:	fe843783          	ld	a5,-24(s0)
    48000d0a:	639c                	ld	a5,0(a5)
    48000d0c:	6b9c                	ld	a5,16(a5)
    48000d0e:	fe843503          	ld	a0,-24(s0)
    48000d12:	9782                	jalr	a5
    48000d14:	87aa                	mv	a5,a0
    48000d16:	2781                	sext.w	a5,a5
validation-software/freedom-metal/metal/interrupt.h:178
}
    48000d18:	853e                	mv	a0,a5
    48000d1a:	60e2                	ld	ra,24(sp)
    48000d1c:	6442                	ld	s0,16(sp)
    48000d1e:	6105                	add	sp,sp,32
    48000d20:	8082                	ret

0000000048000d22 <metal_interrupt_set_privilege>:
metal_interrupt_set_privilege():
validation-software/freedom-metal/metal/interrupt.h:192
 * @param controller The handle for the interrupt controller
 * @param privilege The privilege mode of the interrupt controller.
 * @return 0 upon success
 */
__inline__ int metal_interrupt_set_privilege(struct metal_interrupt *controller,
                                             metal_intr_priv_mode privilege) {
    48000d22:	1101                	add	sp,sp,-32
    48000d24:	ec06                	sd	ra,24(sp)
    48000d26:	e822                	sd	s0,16(sp)
    48000d28:	1000                	add	s0,sp,32
    48000d2a:	fea43423          	sd	a0,-24(s0)
    48000d2e:	87ae                	mv	a5,a1
    48000d30:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:193
    return controller->vtable->interrupt_set_privilege(controller, privilege);
    48000d34:	fe843783          	ld	a5,-24(s0)
    48000d38:	639c                	ld	a5,0(a5)
    48000d3a:	6f9c                	ld	a5,24(a5)
    48000d3c:	fe442703          	lw	a4,-28(s0)
    48000d40:	85ba                	mv	a1,a4
    48000d42:	fe843503          	ld	a0,-24(s0)
    48000d46:	9782                	jalr	a5
    48000d48:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:194
}
    48000d4a:	853e                	mv	a0,a5
    48000d4c:	60e2                	ld	ra,24(sp)
    48000d4e:	6442                	ld	s0,16(sp)
    48000d50:	6105                	add	sp,sp,32
    48000d52:	8082                	ret

0000000048000d54 <metal_interrupt_get_privilege>:
metal_interrupt_get_privilege():
validation-software/freedom-metal/metal/interrupt.h:207
 *
 * @param controller The handle for the interrupt controller
 * @return The interrupt privilege mode
 */
__inline__ metal_intr_priv_mode
metal_interrupt_get_privilege(struct metal_interrupt *controller) {
    48000d54:	1101                	add	sp,sp,-32
    48000d56:	ec06                	sd	ra,24(sp)
    48000d58:	e822                	sd	s0,16(sp)
    48000d5a:	1000                	add	s0,sp,32
    48000d5c:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/interrupt.h:208
    return controller->vtable->interrupt_get_privilege(controller);
    48000d60:	fe843783          	ld	a5,-24(s0)
    48000d64:	639c                	ld	a5,0(a5)
    48000d66:	739c                	ld	a5,32(a5)
    48000d68:	fe843503          	ld	a0,-24(s0)
    48000d6c:	9782                	jalr	a5
    48000d6e:	87aa                	mv	a5,a0
    48000d70:	2781                	sext.w	a5,a5
validation-software/freedom-metal/metal/interrupt.h:209
}
    48000d72:	853e                	mv	a0,a5
    48000d74:	60e2                	ld	ra,24(sp)
    48000d76:	6442                	ld	s0,16(sp)
    48000d78:	6105                	add	sp,sp,32
    48000d7a:	8082                	ret

0000000048000d7c <metal_interrupt_clear>:
metal_interrupt_clear():
validation-software/freedom-metal/metal/interrupt.h:218
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to trigger
 * @return 0 upon success
 */
__inline__ int metal_interrupt_clear(struct metal_interrupt *controller,
                                     int id) {
    48000d7c:	1101                	add	sp,sp,-32
    48000d7e:	ec06                	sd	ra,24(sp)
    48000d80:	e822                	sd	s0,16(sp)
    48000d82:	1000                	add	s0,sp,32
    48000d84:	fea43423          	sd	a0,-24(s0)
    48000d88:	87ae                	mv	a5,a1
    48000d8a:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:219
    return controller->vtable->interrupt_clear(controller, id);
    48000d8e:	fe843783          	ld	a5,-24(s0)
    48000d92:	639c                	ld	a5,0(a5)
    48000d94:	779c                	ld	a5,40(a5)
    48000d96:	fe442703          	lw	a4,-28(s0)
    48000d9a:	85ba                	mv	a1,a4
    48000d9c:	fe843503          	ld	a0,-24(s0)
    48000da0:	9782                	jalr	a5
    48000da2:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:220
}
    48000da4:	853e                	mv	a0,a5
    48000da6:	60e2                	ld	ra,24(sp)
    48000da8:	6442                	ld	s0,16(sp)
    48000daa:	6105                	add	sp,sp,32
    48000dac:	8082                	ret

0000000048000dae <metal_interrupt_set>:
metal_interrupt_set():
validation-software/freedom-metal/metal/interrupt.h:228
 * @brief Set an interrupt
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to trigger
 * @return 0 upon success
 */
__inline__ int metal_interrupt_set(struct metal_interrupt *controller, int id) {
    48000dae:	1101                	add	sp,sp,-32
    48000db0:	ec06                	sd	ra,24(sp)
    48000db2:	e822                	sd	s0,16(sp)
    48000db4:	1000                	add	s0,sp,32
    48000db6:	fea43423          	sd	a0,-24(s0)
    48000dba:	87ae                	mv	a5,a1
    48000dbc:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:229
    return controller->vtable->interrupt_set(controller, id);
    48000dc0:	fe843783          	ld	a5,-24(s0)
    48000dc4:	639c                	ld	a5,0(a5)
    48000dc6:	7b9c                	ld	a5,48(a5)
    48000dc8:	fe442703          	lw	a4,-28(s0)
    48000dcc:	85ba                	mv	a1,a4
    48000dce:	fe843503          	ld	a0,-24(s0)
    48000dd2:	9782                	jalr	a5
    48000dd4:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:230
}
    48000dd6:	853e                	mv	a0,a5
    48000dd8:	60e2                	ld	ra,24(sp)
    48000dda:	6442                	ld	s0,16(sp)
    48000ddc:	6105                	add	sp,sp,32
    48000dde:	8082                	ret

0000000048000de0 <metal_interrupt_register_handler>:
metal_interrupt_register_handler():
validation-software/freedom-metal/metal/interrupt.h:243
 * @return 0 upon success
 */
__inline__ int
metal_interrupt_register_handler(struct metal_interrupt *controller, int id,
                                 metal_interrupt_handler_t handler,
                                 void *priv_data) {
    48000de0:	7179                	add	sp,sp,-48
    48000de2:	f406                	sd	ra,40(sp)
    48000de4:	f022                	sd	s0,32(sp)
    48000de6:	1800                	add	s0,sp,48
    48000de8:	fea43423          	sd	a0,-24(s0)
    48000dec:	87ae                	mv	a5,a1
    48000dee:	fcc43c23          	sd	a2,-40(s0)
    48000df2:	fcd43823          	sd	a3,-48(s0)
    48000df6:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:244
    return controller->vtable->interrupt_register(controller, id, handler,
    48000dfa:	fe843783          	ld	a5,-24(s0)
    48000dfe:	639c                	ld	a5,0(a5)
    48000e00:	7f9c                	ld	a5,56(a5)
    48000e02:	fe442703          	lw	a4,-28(s0)
    48000e06:	fd043683          	ld	a3,-48(s0)
    48000e0a:	fd843603          	ld	a2,-40(s0)
    48000e0e:	85ba                	mv	a1,a4
    48000e10:	fe843503          	ld	a0,-24(s0)
    48000e14:	9782                	jalr	a5
    48000e16:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:246
                                                  priv_data);
}
    48000e18:	853e                	mv	a0,a5
    48000e1a:	70a2                	ld	ra,40(sp)
    48000e1c:	7402                	ld	s0,32(sp)
    48000e1e:	6145                	add	sp,sp,48
    48000e20:	8082                	ret

0000000048000e22 <metal_interrupt_register_vector_handler>:
metal_interrupt_register_vector_handler():
validation-software/freedom-metal/metal/interrupt.h:258
 * @param priv_data Private data for the interrupt handler
 * @return 0 upon success
 */
__inline__ int metal_interrupt_register_vector_handler(
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t handler, void *priv_data) {
    48000e22:	7179                	add	sp,sp,-48
    48000e24:	f406                	sd	ra,40(sp)
    48000e26:	f022                	sd	s0,32(sp)
    48000e28:	1800                	add	s0,sp,48
    48000e2a:	fea43423          	sd	a0,-24(s0)
    48000e2e:	87ae                	mv	a5,a1
    48000e30:	fcc43c23          	sd	a2,-40(s0)
    48000e34:	fcd43823          	sd	a3,-48(s0)
    48000e38:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:259
    return controller->vtable->interrupt_vector_register(controller, id,
    48000e3c:	fe843783          	ld	a5,-24(s0)
    48000e40:	639c                	ld	a5,0(a5)
    48000e42:	63bc                	ld	a5,64(a5)
    48000e44:	fe442703          	lw	a4,-28(s0)
    48000e48:	fd043683          	ld	a3,-48(s0)
    48000e4c:	fd843603          	ld	a2,-40(s0)
    48000e50:	85ba                	mv	a1,a4
    48000e52:	fe843503          	ld	a0,-24(s0)
    48000e56:	9782                	jalr	a5
    48000e58:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:261
                                                         handler, priv_data);
}
    48000e5a:	853e                	mv	a0,a5
    48000e5c:	70a2                	ld	ra,40(sp)
    48000e5e:	7402                	ld	s0,32(sp)
    48000e60:	6145                	add	sp,sp,48
    48000e62:	8082                	ret

0000000048000e64 <metal_interrupt_enable>:
metal_interrupt_enable():
validation-software/freedom-metal/metal/interrupt.h:270
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to enable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_enable(struct metal_interrupt *controller,
                                      int id) {
    48000e64:	1101                	add	sp,sp,-32
    48000e66:	ec06                	sd	ra,24(sp)
    48000e68:	e822                	sd	s0,16(sp)
    48000e6a:	1000                	add	s0,sp,32
    48000e6c:	fea43423          	sd	a0,-24(s0)
    48000e70:	87ae                	mv	a5,a1
    48000e72:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:271
    return controller->vtable->interrupt_enable(controller, id);
    48000e76:	fe843783          	ld	a5,-24(s0)
    48000e7a:	639c                	ld	a5,0(a5)
    48000e7c:	67bc                	ld	a5,72(a5)
    48000e7e:	fe442703          	lw	a4,-28(s0)
    48000e82:	85ba                	mv	a1,a4
    48000e84:	fe843503          	ld	a0,-24(s0)
    48000e88:	9782                	jalr	a5
    48000e8a:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:272
}
    48000e8c:	853e                	mv	a0,a5
    48000e8e:	60e2                	ld	ra,24(sp)
    48000e90:	6442                	ld	s0,16(sp)
    48000e92:	6105                	add	sp,sp,32
    48000e94:	8082                	ret

0000000048000e96 <metal_interrupt_disable>:
metal_interrupt_disable():
validation-software/freedom-metal/metal/interrupt.h:281
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to disable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_disable(struct metal_interrupt *controller,
                                       int id) {
    48000e96:	1101                	add	sp,sp,-32
    48000e98:	ec06                	sd	ra,24(sp)
    48000e9a:	e822                	sd	s0,16(sp)
    48000e9c:	1000                	add	s0,sp,32
    48000e9e:	fea43423          	sd	a0,-24(s0)
    48000ea2:	87ae                	mv	a5,a1
    48000ea4:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:282
    return controller->vtable->interrupt_disable(controller, id);
    48000ea8:	fe843783          	ld	a5,-24(s0)
    48000eac:	639c                	ld	a5,0(a5)
    48000eae:	6bbc                	ld	a5,80(a5)
    48000eb0:	fe442703          	lw	a4,-28(s0)
    48000eb4:	85ba                	mv	a1,a4
    48000eb6:	fe843503          	ld	a0,-24(s0)
    48000eba:	9782                	jalr	a5
    48000ebc:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:283
}
    48000ebe:	853e                	mv	a0,a5
    48000ec0:	60e2                	ld	ra,24(sp)
    48000ec2:	6442                	ld	s0,16(sp)
    48000ec4:	6105                	add	sp,sp,32
    48000ec6:	8082                	ret

0000000048000ec8 <metal_interrupt_set_threshold>:
metal_interrupt_set_threshold():
validation-software/freedom-metal/metal/interrupt.h:292
 * @param controller The handle for the interrupt controller
 * @param threshold The interrupt threshold level
 * @return 0 upon success
 */
__inline__ int metal_interrupt_set_threshold(struct metal_interrupt *controller,
                                             unsigned int level) {
    48000ec8:	1101                	add	sp,sp,-32
    48000eca:	ec06                	sd	ra,24(sp)
    48000ecc:	e822                	sd	s0,16(sp)
    48000ece:	1000                	add	s0,sp,32
    48000ed0:	fea43423          	sd	a0,-24(s0)
    48000ed4:	87ae                	mv	a5,a1
    48000ed6:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:293
    return controller->vtable->interrupt_set_threshold(controller, level);
    48000eda:	fe843783          	ld	a5,-24(s0)
    48000ede:	639c                	ld	a5,0(a5)
    48000ee0:	7bbc                	ld	a5,112(a5)
    48000ee2:	fe442703          	lw	a4,-28(s0)
    48000ee6:	85ba                	mv	a1,a4
    48000ee8:	fe843503          	ld	a0,-24(s0)
    48000eec:	9782                	jalr	a5
    48000eee:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:294
}
    48000ef0:	853e                	mv	a0,a5
    48000ef2:	60e2                	ld	ra,24(sp)
    48000ef4:	6442                	ld	s0,16(sp)
    48000ef6:	6105                	add	sp,sp,32
    48000ef8:	8082                	ret

0000000048000efa <metal_interrupt_get_threshold>:
metal_interrupt_get_threshold():
validation-software/freedom-metal/metal/interrupt.h:302
 * @brief Get an interrupt threshold level
 * @param controller The handle for the interrupt controller
 * @return The interrupt threshold level
 */
__inline__ unsigned int
metal_interrupt_get_threshold(struct metal_interrupt *controller) {
    48000efa:	1101                	add	sp,sp,-32
    48000efc:	ec06                	sd	ra,24(sp)
    48000efe:	e822                	sd	s0,16(sp)
    48000f00:	1000                	add	s0,sp,32
    48000f02:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/interrupt.h:303
    return controller->vtable->interrupt_get_threshold(controller);
    48000f06:	fe843783          	ld	a5,-24(s0)
    48000f0a:	639c                	ld	a5,0(a5)
    48000f0c:	77bc                	ld	a5,104(a5)
    48000f0e:	fe843503          	ld	a0,-24(s0)
    48000f12:	9782                	jalr	a5
    48000f14:	87aa                	mv	a5,a0
    48000f16:	2781                	sext.w	a5,a5
validation-software/freedom-metal/metal/interrupt.h:304
}
    48000f18:	853e                	mv	a0,a5
    48000f1a:	60e2                	ld	ra,24(sp)
    48000f1c:	6442                	ld	s0,16(sp)
    48000f1e:	6105                	add	sp,sp,32
    48000f20:	8082                	ret

0000000048000f22 <metal_interrupt_set_priority>:
metal_interrupt_set_priority():
validation-software/freedom-metal/metal/interrupt.h:314
 * @param id The interrupt ID to enable
 * @param priority The interrupt priority level
 * @return 0 upon success
 */
__inline__ int metal_interrupt_set_priority(struct metal_interrupt *controller,
                                            int id, unsigned int priority) {
    48000f22:	1101                	add	sp,sp,-32
    48000f24:	ec06                	sd	ra,24(sp)
    48000f26:	e822                	sd	s0,16(sp)
    48000f28:	1000                	add	s0,sp,32
    48000f2a:	fea43423          	sd	a0,-24(s0)
    48000f2e:	87ae                	mv	a5,a1
    48000f30:	8732                	mv	a4,a2
    48000f32:	fef42223          	sw	a5,-28(s0)
    48000f36:	87ba                	mv	a5,a4
    48000f38:	fef42023          	sw	a5,-32(s0)
validation-software/freedom-metal/metal/interrupt.h:315
    return controller->vtable->interrupt_set_priority(controller, id, priority);
    48000f3c:	fe843783          	ld	a5,-24(s0)
    48000f40:	639c                	ld	a5,0(a5)
    48000f42:	63dc                	ld	a5,128(a5)
    48000f44:	fe042683          	lw	a3,-32(s0)
    48000f48:	fe442703          	lw	a4,-28(s0)
    48000f4c:	8636                	mv	a2,a3
    48000f4e:	85ba                	mv	a1,a4
    48000f50:	fe843503          	ld	a0,-24(s0)
    48000f54:	9782                	jalr	a5
    48000f56:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:316
}
    48000f58:	853e                	mv	a0,a5
    48000f5a:	60e2                	ld	ra,24(sp)
    48000f5c:	6442                	ld	s0,16(sp)
    48000f5e:	6105                	add	sp,sp,32
    48000f60:	8082                	ret

0000000048000f62 <metal_interrupt_get_priority>:
metal_interrupt_get_priority():
validation-software/freedom-metal/metal/interrupt.h:325
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to enable
 * @return The interrupt priority level
 */
__inline__ unsigned int
metal_interrupt_get_priority(struct metal_interrupt *controller, int id) {
    48000f62:	1101                	add	sp,sp,-32
    48000f64:	ec06                	sd	ra,24(sp)
    48000f66:	e822                	sd	s0,16(sp)
    48000f68:	1000                	add	s0,sp,32
    48000f6a:	fea43423          	sd	a0,-24(s0)
    48000f6e:	87ae                	mv	a5,a1
    48000f70:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:326
    return controller->vtable->interrupt_get_priority(controller, id);
    48000f74:	fe843783          	ld	a5,-24(s0)
    48000f78:	639c                	ld	a5,0(a5)
    48000f7a:	7fbc                	ld	a5,120(a5)
    48000f7c:	fe442703          	lw	a4,-28(s0)
    48000f80:	85ba                	mv	a1,a4
    48000f82:	fe843503          	ld	a0,-24(s0)
    48000f86:	9782                	jalr	a5
    48000f88:	87aa                	mv	a5,a0
    48000f8a:	2781                	sext.w	a5,a5
validation-software/freedom-metal/metal/interrupt.h:327
}
    48000f8c:	853e                	mv	a0,a5
    48000f8e:	60e2                	ld	ra,24(sp)
    48000f90:	6442                	ld	s0,16(sp)
    48000f92:	6105                	add	sp,sp,32
    48000f94:	8082                	ret

0000000048000f96 <metal_interrupt_set_preemptive_level>:
metal_interrupt_set_preemptive_level():
validation-software/freedom-metal/metal/interrupt.h:341
 * @param level The interrupt level and priority are encoded together
 * @return 0 upon success
 */
__inline__ int
metal_interrupt_set_preemptive_level(struct metal_interrupt *controller, int id,
                                     unsigned int level) {
    48000f96:	1101                	add	sp,sp,-32
    48000f98:	ec06                	sd	ra,24(sp)
    48000f9a:	e822                	sd	s0,16(sp)
    48000f9c:	1000                	add	s0,sp,32
    48000f9e:	fea43423          	sd	a0,-24(s0)
    48000fa2:	87ae                	mv	a5,a1
    48000fa4:	8732                	mv	a4,a2
    48000fa6:	fef42223          	sw	a5,-28(s0)
    48000faa:	87ba                	mv	a5,a4
    48000fac:	fef42023          	sw	a5,-32(s0)
validation-software/freedom-metal/metal/interrupt.h:342
    if (controller->vtable->interrupt_set_preemptive_level)
    48000fb0:	fe843783          	ld	a5,-24(s0)
    48000fb4:	639c                	ld	a5,0(a5)
    48000fb6:	6bdc                	ld	a5,144(a5)
    48000fb8:	c385                	beqz	a5,48000fd8 <metal_interrupt_set_preemptive_level+0x42>
validation-software/freedom-metal/metal/interrupt.h:343
        return controller->vtable->interrupt_set_preemptive_level(controller,
    48000fba:	fe843783          	ld	a5,-24(s0)
    48000fbe:	639c                	ld	a5,0(a5)
    48000fc0:	6bdc                	ld	a5,144(a5)
    48000fc2:	fe042683          	lw	a3,-32(s0)
    48000fc6:	fe442703          	lw	a4,-28(s0)
    48000fca:	8636                	mv	a2,a3
    48000fcc:	85ba                	mv	a1,a4
    48000fce:	fe843503          	ld	a0,-24(s0)
    48000fd2:	9782                	jalr	a5
    48000fd4:	87aa                	mv	a5,a0
    48000fd6:	a011                	j	48000fda <metal_interrupt_set_preemptive_level+0x44>
validation-software/freedom-metal/metal/interrupt.h:346
                                                                  id, level);
    else
        return 0;
    48000fd8:	4781                	li	a5,0
validation-software/freedom-metal/metal/interrupt.h:347
}
    48000fda:	853e                	mv	a0,a5
    48000fdc:	60e2                	ld	ra,24(sp)
    48000fde:	6442                	ld	s0,16(sp)
    48000fe0:	6105                	add	sp,sp,32
    48000fe2:	8082                	ret

0000000048000fe4 <metal_interrupt_get_preemptive_level>:
metal_interrupt_get_preemptive_level():
validation-software/freedom-metal/metal/interrupt.h:357
 * @param id The interrupt ID to enable
 * @return The interrupt level
 */
__inline__ unsigned int
metal_interrupt_get_preemptive_level(struct metal_interrupt *controller,
                                     int id) {
    48000fe4:	1101                	add	sp,sp,-32
    48000fe6:	ec06                	sd	ra,24(sp)
    48000fe8:	e822                	sd	s0,16(sp)
    48000fea:	1000                	add	s0,sp,32
    48000fec:	fea43423          	sd	a0,-24(s0)
    48000ff0:	87ae                	mv	a5,a1
    48000ff2:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:358
    if (controller->vtable->interrupt_get_preemptive_level)
    48000ff6:	fe843783          	ld	a5,-24(s0)
    48000ffa:	639c                	ld	a5,0(a5)
    48000ffc:	67dc                	ld	a5,136(a5)
    48000ffe:	cf91                	beqz	a5,4800101a <metal_interrupt_get_preemptive_level+0x36>
validation-software/freedom-metal/metal/interrupt.h:359
        return controller->vtable->interrupt_get_preemptive_level(controller,
    48001000:	fe843783          	ld	a5,-24(s0)
    48001004:	639c                	ld	a5,0(a5)
    48001006:	67dc                	ld	a5,136(a5)
    48001008:	fe442703          	lw	a4,-28(s0)
    4800100c:	85ba                	mv	a1,a4
    4800100e:	fe843503          	ld	a0,-24(s0)
    48001012:	9782                	jalr	a5
    48001014:	87aa                	mv	a5,a0
    48001016:	2781                	sext.w	a5,a5
    48001018:	a011                	j	4800101c <metal_interrupt_get_preemptive_level+0x38>
validation-software/freedom-metal/metal/interrupt.h:362
                                                                  id);
    else
        return 0;
    4800101a:	4781                	li	a5,0
validation-software/freedom-metal/metal/interrupt.h:363
}
    4800101c:	853e                	mv	a0,a5
    4800101e:	60e2                	ld	ra,24(sp)
    48001020:	6442                	ld	s0,16(sp)
    48001022:	6105                	add	sp,sp,32
    48001024:	8082                	ret

0000000048001026 <metal_interrupt_vector_enable>:
metal_interrupt_vector_enable():
validation-software/freedom-metal/metal/interrupt.h:372
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to enable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_vector_enable(struct metal_interrupt *controller,
                                             int id) {
    48001026:	1101                	add	sp,sp,-32
    48001028:	ec06                	sd	ra,24(sp)
    4800102a:	e822                	sd	s0,16(sp)
    4800102c:	1000                	add	s0,sp,32
    4800102e:	fea43423          	sd	a0,-24(s0)
    48001032:	87ae                	mv	a5,a1
    48001034:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:373
    return controller->vtable->interrupt_vector_enable(controller, id);
    48001038:	fe843783          	ld	a5,-24(s0)
    4800103c:	639c                	ld	a5,0(a5)
    4800103e:	6fbc                	ld	a5,88(a5)
    48001040:	fe442703          	lw	a4,-28(s0)
    48001044:	85ba                	mv	a1,a4
    48001046:	fe843503          	ld	a0,-24(s0)
    4800104a:	9782                	jalr	a5
    4800104c:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:374
}
    4800104e:	853e                	mv	a0,a5
    48001050:	60e2                	ld	ra,24(sp)
    48001052:	6442                	ld	s0,16(sp)
    48001054:	6105                	add	sp,sp,32
    48001056:	8082                	ret

0000000048001058 <metal_interrupt_vector_disable>:
metal_interrupt_vector_disable():
validation-software/freedom-metal/metal/interrupt.h:383
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to disable
 * @return 0 upon success
 */
__inline__ int
metal_interrupt_vector_disable(struct metal_interrupt *controller, int id) {
    48001058:	1101                	add	sp,sp,-32
    4800105a:	ec06                	sd	ra,24(sp)
    4800105c:	e822                	sd	s0,16(sp)
    4800105e:	1000                	add	s0,sp,32
    48001060:	fea43423          	sd	a0,-24(s0)
    48001064:	87ae                	mv	a5,a1
    48001066:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:384
    return controller->vtable->interrupt_vector_disable(controller, id);
    4800106a:	fe843783          	ld	a5,-24(s0)
    4800106e:	639c                	ld	a5,0(a5)
    48001070:	73bc                	ld	a5,96(a5)
    48001072:	fe442703          	lw	a4,-28(s0)
    48001076:	85ba                	mv	a1,a4
    48001078:	fe843503          	ld	a0,-24(s0)
    4800107c:	9782                	jalr	a5
    4800107e:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:385
}
    48001080:	853e                	mv	a0,a5
    48001082:	60e2                	ld	ra,24(sp)
    48001084:	6442                	ld	s0,16(sp)
    48001086:	6105                	add	sp,sp,32
    48001088:	8082                	ret

000000004800108a <_metal_interrupt_command_request>:
_metal_interrupt_command_request():
validation-software/freedom-metal/metal/interrupt.h:534

/* Utilities function to controll, manages devices via a given interrupt
 * controller */
__inline__ int
_metal_interrupt_command_request(struct metal_interrupt *controller, int cmd,
                                 void *data) {
    4800108a:	7179                	add	sp,sp,-48
    4800108c:	f406                	sd	ra,40(sp)
    4800108e:	f022                	sd	s0,32(sp)
    48001090:	1800                	add	s0,sp,48
    48001092:	fea43423          	sd	a0,-24(s0)
    48001096:	87ae                	mv	a5,a1
    48001098:	fcc43c23          	sd	a2,-40(s0)
    4800109c:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:535
    return controller->vtable->command_request(controller, cmd, data);
    480010a0:	fe843783          	ld	a5,-24(s0)
    480010a4:	639c                	ld	a5,0(a5)
    480010a6:	6fdc                	ld	a5,152(a5)
    480010a8:	fe442703          	lw	a4,-28(s0)
    480010ac:	fd843603          	ld	a2,-40(s0)
    480010b0:	85ba                	mv	a1,a4
    480010b2:	fe843503          	ld	a0,-24(s0)
    480010b6:	9782                	jalr	a5
    480010b8:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:536
}
    480010ba:	853e                	mv	a0,a5
    480010bc:	70a2                	ld	ra,40(sp)
    480010be:	7402                	ld	s0,32(sp)
    480010c0:	6145                	add	sp,sp,48
    480010c2:	8082                	ret

00000000480010c4 <metal_interrupt_affinity_enable>:
metal_interrupt_affinity_enable():
validation-software/freedom-metal/metal/interrupt.h:547
 * @param id The interrupt ID to enable
 * @return The result of each hart context. 0 upon success at relevant bit.
 */
__inline__ metal_affinity
metal_interrupt_affinity_enable(struct metal_interrupt *controller,
                                metal_affinity bitmask, int id) {
    480010c4:	7179                	add	sp,sp,-48
    480010c6:	f406                	sd	ra,40(sp)
    480010c8:	f022                	sd	s0,32(sp)
    480010ca:	1800                	add	s0,sp,48
    480010cc:	fea43423          	sd	a0,-24(s0)
    480010d0:	feb43023          	sd	a1,-32(s0)
    480010d4:	87b2                	mv	a5,a2
    480010d6:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/metal/interrupt.h:548
    return controller->vtable->interrupt_affinity_enable(controller, bitmask,
    480010da:	fe843783          	ld	a5,-24(s0)
    480010de:	639c                	ld	a5,0(a5)
    480010e0:	77dc                	ld	a5,168(a5)
    480010e2:	fdc42703          	lw	a4,-36(s0)
    480010e6:	863a                	mv	a2,a4
    480010e8:	fe043583          	ld	a1,-32(s0)
    480010ec:	fe843503          	ld	a0,-24(s0)
    480010f0:	9782                	jalr	a5
    480010f2:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:550
                                                         id);
}
    480010f4:	853e                	mv	a0,a5
    480010f6:	70a2                	ld	ra,40(sp)
    480010f8:	7402                	ld	s0,32(sp)
    480010fa:	6145                	add	sp,sp,48
    480010fc:	8082                	ret

00000000480010fe <metal_interrupt_affinity_disable>:
metal_interrupt_affinity_disable():
validation-software/freedom-metal/metal/interrupt.h:561
 * @param id The interrupt ID to disable
 * @return The result of each hart context. 0 upon success at relevant bit.
 */
__inline__ metal_affinity
metal_interrupt_affinity_disable(struct metal_interrupt *controller,
                                 metal_affinity bitmask, int id) {
    480010fe:	7179                	add	sp,sp,-48
    48001100:	f406                	sd	ra,40(sp)
    48001102:	f022                	sd	s0,32(sp)
    48001104:	1800                	add	s0,sp,48
    48001106:	fea43423          	sd	a0,-24(s0)
    4800110a:	feb43023          	sd	a1,-32(s0)
    4800110e:	87b2                	mv	a5,a2
    48001110:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/metal/interrupt.h:562
    return controller->vtable->interrupt_affinity_disable(controller, bitmask,
    48001114:	fe843783          	ld	a5,-24(s0)
    48001118:	639c                	ld	a5,0(a5)
    4800111a:	7bdc                	ld	a5,176(a5)
    4800111c:	fdc42703          	lw	a4,-36(s0)
    48001120:	863a                	mv	a2,a4
    48001122:	fe043583          	ld	a1,-32(s0)
    48001126:	fe843503          	ld	a0,-24(s0)
    4800112a:	9782                	jalr	a5
    4800112c:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:564
                                                          id);
}
    4800112e:	853e                	mv	a0,a5
    48001130:	70a2                	ld	ra,40(sp)
    48001132:	7402                	ld	s0,32(sp)
    48001134:	6145                	add	sp,sp,48
    48001136:	8082                	ret

0000000048001138 <metal_interrupt_affinity_set_threshold>:
metal_interrupt_affinity_set_threshold():
validation-software/freedom-metal/metal/interrupt.h:576
 * @return The result of each hart context. 0 upon success at relevant bit.
 */
__inline__ metal_affinity
metal_interrupt_affinity_set_threshold(struct metal_interrupt *controller,
                                       metal_affinity bitmask,
                                       unsigned int level) {
    48001138:	7179                	add	sp,sp,-48
    4800113a:	f406                	sd	ra,40(sp)
    4800113c:	f022                	sd	s0,32(sp)
    4800113e:	1800                	add	s0,sp,48
    48001140:	fea43423          	sd	a0,-24(s0)
    48001144:	feb43023          	sd	a1,-32(s0)
    48001148:	87b2                	mv	a5,a2
    4800114a:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/metal/interrupt.h:577
    return controller->vtable->interrupt_affinity_set_threshold(controller,
    4800114e:	fe843783          	ld	a5,-24(s0)
    48001152:	639c                	ld	a5,0(a5)
    48001154:	7fdc                	ld	a5,184(a5)
    48001156:	fdc42703          	lw	a4,-36(s0)
    4800115a:	863a                	mv	a2,a4
    4800115c:	fe043583          	ld	a1,-32(s0)
    48001160:	fe843503          	ld	a0,-24(s0)
    48001164:	9782                	jalr	a5
    48001166:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/interrupt.h:579
                                                                bitmask, level);
}
    48001168:	853e                	mv	a0,a5
    4800116a:	70a2                	ld	ra,40(sp)
    4800116c:	7402                	ld	s0,32(sp)
    4800116e:	6145                	add	sp,sp,48
    48001170:	8082                	ret

0000000048001172 <metal_interrupt_affinity_get_threshold>:
metal_interrupt_affinity_get_threshold():
validation-software/freedom-metal/metal/interrupt.h:589
 * @param context_id The hart context ID to get threshold
 * @return The interrupt threshold level
 */
__inline__ unsigned int
metal_interrupt_affinity_get_threshold(struct metal_interrupt *controller,
                                       int context_id) {
    48001172:	1101                	add	sp,sp,-32
    48001174:	ec06                	sd	ra,24(sp)
    48001176:	e822                	sd	s0,16(sp)
    48001178:	1000                	add	s0,sp,32
    4800117a:	fea43423          	sd	a0,-24(s0)
    4800117e:	87ae                	mv	a5,a1
    48001180:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/interrupt.h:590
    return controller->vtable->interrupt_affinity_get_threshold(controller,
    48001184:	fe843783          	ld	a5,-24(s0)
    48001188:	639c                	ld	a5,0(a5)
    4800118a:	63fc                	ld	a5,192(a5)
    4800118c:	fe442703          	lw	a4,-28(s0)
    48001190:	85ba                	mv	a1,a4
    48001192:	fe843503          	ld	a0,-24(s0)
    48001196:	9782                	jalr	a5
    48001198:	87aa                	mv	a5,a0
    4800119a:	2781                	sext.w	a5,a5
validation-software/freedom-metal/metal/interrupt.h:592
                                                                context_id);
}
    4800119c:	853e                	mv	a0,a5
    4800119e:	60e2                	ld	ra,24(sp)
    480011a0:	6442                	ld	s0,16(sp)
    480011a2:	6105                	add	sp,sp,32
    480011a4:	8082                	ret

00000000480011a6 <metal_interrupt_get_controller>:
metal_interrupt_get_controller():
validation-software/freedom-metal/src/interrupt.c:9
#include <metal/interrupt.h>
#include <metal/machine.h>
#include <string.h>

struct metal_interrupt *
metal_interrupt_get_controller(metal_intr_cntrl_type cntrl, int id) {
    480011a6:	1101                	add	sp,sp,-32
    480011a8:	ec22                	sd	s0,24(sp)
    480011aa:	1000                	add	s0,sp,32
    480011ac:	87aa                	mv	a5,a0
    480011ae:	872e                	mv	a4,a1
    480011b0:	fef42623          	sw	a5,-20(s0)
    480011b4:	87ba                	mv	a5,a4
    480011b6:	fef42423          	sw	a5,-24(s0)
validation-software/freedom-metal/src/interrupt.c:10
    switch (cntrl) {
    480011ba:	fec42783          	lw	a5,-20(s0)
    480011be:	0007871b          	sext.w	a4,a5
    480011c2:	478d                	li	a5,3
    480011c4:	04f70963          	beq	a4,a5,48001216 <metal_interrupt_get_controller+0x70>
    480011c8:	fec42783          	lw	a5,-20(s0)
    480011cc:	0007871b          	sext.w	a4,a5
    480011d0:	478d                	li	a5,3
    480011d2:	04e7e563          	bltu	a5,a4,4800121c <metal_interrupt_get_controller+0x76>
    480011d6:	fec42783          	lw	a5,-20(s0)
    480011da:	0007871b          	sext.w	a4,a5
    480011de:	4789                	li	a5,2
    480011e0:	02f70963          	beq	a4,a5,48001212 <metal_interrupt_get_controller+0x6c>
    480011e4:	fec42783          	lw	a5,-20(s0)
    480011e8:	0007871b          	sext.w	a4,a5
    480011ec:	4789                	li	a5,2
    480011ee:	02e7e763          	bltu	a5,a4,4800121c <metal_interrupt_get_controller+0x76>
    480011f2:	fec42783          	lw	a5,-20(s0)
    480011f6:	2781                	sext.w	a5,a5
    480011f8:	c38d                	beqz	a5,4800121a <metal_interrupt_get_controller+0x74>
    480011fa:	fec42783          	lw	a5,-20(s0)
    480011fe:	0007871b          	sext.w	a4,a5
    48001202:	4785                	li	a5,1
    48001204:	00f71c63          	bne	a4,a5,4800121c <metal_interrupt_get_controller+0x76>
validation-software/freedom-metal/src/interrupt.c:15
    case METAL_CPU_CONTROLLER:
        break;
    case METAL_CLINT_CONTROLLER:
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
        return __METAL_DT_RISCV_CLINT0_HANDLE;
    48001208:	37fff797          	auipc	a5,0x37fff
    4800120c:	ef878793          	add	a5,a5,-264 # 80000100 <__metal_dt_clint_2000000>
    48001210:	a039                	j	4800121e <metal_interrupt_get_controller+0x78>
validation-software/freedom-metal/src/interrupt.c:24
#ifdef __METAL_DT_SIFIVE_CLIC0_HANDLE
        return __METAL_DT_SIFIVE_CLIC0_HANDLE;
#elif defined(__METAL_DT_SIFIVE_CLIC1_HANDLE)
        return __METAL_DT_SIFIVE_CLIC1_HANDLE;
#else
        return NULL;
    48001212:	4781                	li	a5,0
    48001214:	a029                	j	4800121e <metal_interrupt_get_controller+0x78>
validation-software/freedom-metal/src/interrupt.c:33
#ifdef __METAL_DT_RISCV_PLIC0_HANDLE
        return __METAL_DT_RISCV_PLIC0_HANDLE;
#elif defined(__METAL_DT_SIFIVE_PLIC1_HANDLE)
        return __METAL_DT_SIFIVE_PLIC1_HANDLE;
#else
        return NULL;
    48001216:	4781                	li	a5,0
    48001218:	a019                	j	4800121e <metal_interrupt_get_controller+0x78>
validation-software/freedom-metal/src/interrupt.c:12
        break;
    4800121a:	0001                	nop
validation-software/freedom-metal/src/interrupt.c:37
#endif
        break;
    }
    return NULL;
    4800121c:	4781                	li	a5,0
validation-software/freedom-metal/src/interrupt.c:38
}
    4800121e:	853e                	mv	a0,a5
    48001220:	6462                	ld	s0,24(sp)
    48001222:	6105                	add	sp,sp,32
    48001224:	8082                	ret

0000000048001226 <nop_putc>:
nop_putc():
validation-software/freedom-metal/src/tty.c:39
 * can link to metal_tty_putc. */
int nop_putc(int c) __attribute__((section(".text.metal.nop.putc")));
// Use a customizable NOP hint instruction so that a post-processor parser can
// look for this instruction, and use the value in a0 as the character to be
// printed.
int nop_putc(int c) {
    48001226:	1101                	add	sp,sp,-32
    48001228:	ec22                	sd	s0,24(sp)
    4800122a:	1000                	add	s0,sp,32
    4800122c:	87aa                	mv	a5,a0
    4800122e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/tty.c:47
    // break this assumption.  We want to ensure that the passed argument is
    // truly in a0, for easier post-processing, and so there is a single
    // 32-bit opcode to match against.
    // So explicitly ensure that the argument is placed into a0 first, and
    // ensure we let the compiler know a0 is clobbered (final portion of asm).
    __asm__ volatile("mv a0, %0; slli x0,a0,0x11" ::"r"(c):"a0");
    48001232:	fec42783          	lw	a5,-20(s0)
    48001236:	853e                	mv	a0,a5
    48001238:	01151013          	sll	zero,a0,0x11
validation-software/freedom-metal/src/tty.c:48
    return -1;
    4800123c:	57fd                	li	a5,-1
validation-software/freedom-metal/src/tty.c:49
}
    4800123e:	853e                	mv	a0,a5
    48001240:	6462                	ld	s0,24(sp)
    48001242:	6105                	add	sp,sp,32
    48001244:	8082                	ret

0000000048001246 <metal_tty_init>:
metal_tty_init():
validation-software/freedom-metal/src/tty.c:54
int metal_tty_putc(int c) __attribute__((weak, alias("nop_putc")));
#pragma message(                                                               \
    "There is no default output device, metal_tty_putc() will throw away all input.")
// empty initialization function
void metal_tty_init() {}
    48001246:	1141                	add	sp,sp,-16
    48001248:	e422                	sd	s0,8(sp)
    4800124a:	0800                	add	s0,sp,16
    4800124c:	0001                	nop
    4800124e:	6422                	ld	s0,8(sp)
    48001250:	0141                	add	sp,sp,16
    48001252:	8082                	ret

0000000048001254 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:189
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
    48001254:	1101                	add	sp,sp,-32
    48001256:	ec22                	sd	s0,24(sp)
    48001258:	1000                	add	s0,sp,32
    4800125a:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:190
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    4800125e:	fe843703          	ld	a4,-24(s0)
    48001262:	37fff797          	auipc	a5,0x37fff
    48001266:	e9e78793          	add	a5,a5,-354 # 80000100 <__metal_dt_clint_2000000>
    4800126a:	00f71563          	bne	a4,a5,48001274 <__metal_driver_sifive_clint0_control_base+0x20>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:191
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
    4800126e:	020007b7          	lui	a5,0x2000
    48001272:	a011                	j	48001276 <__metal_driver_sifive_clint0_control_base+0x22>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:194
	}
	else {
		return 0;
    48001274:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:196
	}
}
    48001276:	853e                	mv	a0,a5
    48001278:	6462                	ld	s0,24(sp)
    4800127a:	6105                	add	sp,sp,32
    4800127c:	8082                	ret

000000004800127e <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:209
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
    4800127e:	1101                	add	sp,sp,-32
    48001280:	ec22                	sd	s0,24(sp)
    48001282:	1000                	add	s0,sp,32
    48001284:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:210
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
    48001288:	fe843703          	ld	a4,-24(s0)
    4800128c:	37fff797          	auipc	a5,0x37fff
    48001290:	e7478793          	add	a5,a5,-396 # 80000100 <__metal_dt_clint_2000000>
    48001294:	00f71463          	bne	a4,a5,4800129c <__metal_driver_sifive_clint0_num_interrupts+0x1e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:211
		return METAL_MAX_CLINT_INTERRUPTS;
    48001298:	4781                	li	a5,0
    4800129a:	a011                	j	4800129e <__metal_driver_sifive_clint0_num_interrupts+0x20>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:214
	}
	else {
		return 0;
    4800129c:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:216
	}
}
    4800129e:	853e                	mv	a0,a5
    480012a0:	6462                	ld	s0,24(sp)
    480012a2:	6105                	add	sp,sp,32
    480012a4:	8082                	ret

00000000480012a6 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:219

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
    480012a6:	1101                	add	sp,sp,-32
    480012a8:	ec22                	sd	s0,24(sp)
    480012aa:	1000                	add	s0,sp,32
    480012ac:	fea43423          	sd	a0,-24(s0)
    480012b0:	87ae                	mv	a5,a1
    480012b2:	fef42223          	sw	a5,-28(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:220
	if (idx == 0) {
    480012b6:	fe442783          	lw	a5,-28(s0)
    480012ba:	2781                	sext.w	a5,a5
    480012bc:	e791                	bnez	a5,480012c8 <__metal_driver_sifive_clint0_interrupt_parents+0x22>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:221
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    480012be:	37fff797          	auipc	a5,0x37fff
    480012c2:	e6278793          	add	a5,a5,-414 # 80000120 <__metal_dt_cpu_0_interrupt_controller>
    480012c6:	a831                	j	480012e2 <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:223
	}
	else if (idx == 1) {
    480012c8:	fe442783          	lw	a5,-28(s0)
    480012cc:	0007871b          	sext.w	a4,a5
    480012d0:	4785                	li	a5,1
    480012d2:	00f71763          	bne	a4,a5,480012e0 <__metal_driver_sifive_clint0_interrupt_parents+0x3a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:224
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
    480012d6:	37fff797          	auipc	a5,0x37fff
    480012da:	e4a78793          	add	a5,a5,-438 # 80000120 <__metal_dt_cpu_0_interrupt_controller>
    480012de:	a011                	j	480012e2 <__metal_driver_sifive_clint0_interrupt_parents+0x3c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:227
	}
	else {
		return NULL;
    480012e0:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:229
	}
}
    480012e2:	853e                	mv	a0,a5
    480012e4:	6462                	ld	s0,24(sp)
    480012e6:	6105                	add	sp,sp,32
    480012e8:	8082                	ret

00000000480012ea <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:232

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    480012ea:	1101                	add	sp,sp,-32
    480012ec:	ec22                	sd	s0,24(sp)
    480012ee:	1000                	add	s0,sp,32
    480012f0:	fea43423          	sd	a0,-24(s0)
    480012f4:	87ae                	mv	a5,a1
    480012f6:	fef42223          	sw	a5,-28(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:233
	if (idx == 0) {
    480012fa:	fe442783          	lw	a5,-28(s0)
    480012fe:	2781                	sext.w	a5,a5
    48001300:	e399                	bnez	a5,48001306 <__metal_driver_sifive_clint0_interrupt_lines+0x1c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:234
		return 3;
    48001302:	478d                	li	a5,3
    48001304:	a819                	j	4800131a <__metal_driver_sifive_clint0_interrupt_lines+0x30>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:236
	}
	else if (idx == 1) {
    48001306:	fe442783          	lw	a5,-28(s0)
    4800130a:	0007871b          	sext.w	a4,a5
    4800130e:	4785                	li	a5,1
    48001310:	00f71463          	bne	a4,a5,48001318 <__metal_driver_sifive_clint0_interrupt_lines+0x2e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:237
		return 7;
    48001314:	479d                	li	a5,7
    48001316:	a011                	j	4800131a <__metal_driver_sifive_clint0_interrupt_lines+0x30>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:240
	}
	else {
		return 0;
    48001318:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:242
	}
}
    4800131a:	853e                	mv	a0,a5
    4800131c:	6462                	ld	s0,24(sp)
    4800131e:	6105                	add	sp,sp,32
    48001320:	8082                	ret

0000000048001322 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/drivers/riscv_clint0.h>
#include <metal/io.h>
#include <metal/machine.h>

unsigned long long
__metal_clint0_mtime_get(struct __metal_driver_riscv_clint0 *clint) {
    48001322:	7179                	add	sp,sp,-48
    48001324:	f406                	sd	ra,40(sp)
    48001326:	f022                	sd	s0,32(sp)
    48001328:	1800                	add	s0,sp,48
    4800132a:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:17
    __metal_io_u32 lo, hi;
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
    4800132e:	fd843783          	ld	a5,-40(s0)
    48001332:	853e                	mv	a0,a5
    48001334:	f21ff0ef          	jal	48001254 <__metal_driver_sifive_clint0_control_base>
    48001338:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)

    /* Guard against rollover when reading */
    do {
        hi = __METAL_ACCESS_ONCE(
    4800133c:	fe843703          	ld	a4,-24(s0)
    48001340:	67b1                	lui	a5,0xc
    48001342:	17f1                	add	a5,a5,-4 # bffc <__heap_size+0xb7fc>
    48001344:	97ba                	add	a5,a5,a4
    48001346:	439c                	lw	a5,0(a5)
    48001348:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:23 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
        lo = __METAL_ACCESS_ONCE(
    4800134c:	fe843703          	ld	a4,-24(s0)
    48001350:	67b1                	lui	a5,0xc
    48001352:	17e1                	add	a5,a5,-8 # bff8 <__heap_size+0xb7f8>
    48001354:	97ba                	add	a5,a5,a4
    48001356:	439c                	lw	a5,0(a5)
    48001358:	fef42023          	sw	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:25 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
    4800135c:	fe843703          	ld	a4,-24(s0)
    48001360:	67b1                	lui	a5,0xc
    48001362:	17f1                	add	a5,a5,-4 # bffc <__heap_size+0xb7fc>
    48001364:	97ba                	add	a5,a5,a4
    48001366:	439c                	lw	a5,0(a5)
    48001368:	0007871b          	sext.w	a4,a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:27 (discriminator 1)
                                                    METAL_RISCV_CLINT0_MTIME +
                                                    4)) != hi);
    4800136c:	fe442783          	lw	a5,-28(s0)
    48001370:	2781                	sext.w	a5,a5
    48001372:	fce795e3          	bne	a5,a4,4800133c <__metal_clint0_mtime_get+0x1a>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:29

    return (((unsigned long long)hi) << 32) | lo;
    48001376:	fe446783          	lwu	a5,-28(s0)
    4800137a:	02079713          	sll	a4,a5,0x20
    4800137e:	fe046783          	lwu	a5,-32(s0)
    48001382:	8fd9                	or	a5,a5,a4
validation-software/freedom-metal/src/drivers/riscv_clint0.c:30
}
    48001384:	853e                	mv	a0,a5
    48001386:	70a2                	ld	ra,40(sp)
    48001388:	7402                	ld	s0,32(sp)
    4800138a:	6145                	add	sp,sp,48
    4800138c:	8082                	ret

000000004800138e <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:34

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time) {
    4800138e:	7139                	add	sp,sp,-64
    48001390:	fc06                	sd	ra,56(sp)
    48001392:	f822                	sd	s0,48(sp)
    48001394:	0080                	add	s0,sp,64
    48001396:	fca43c23          	sd	a0,-40(s0)
    4800139a:	87ae                	mv	a5,a1
    4800139c:	fcc43423          	sd	a2,-56(s0)
    480013a0:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:35
    struct __metal_driver_riscv_clint0 *clint =
    480013a4:	fd843783          	ld	a5,-40(s0)
    480013a8:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:38
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
    480013ac:	fe843783          	ld	a5,-24(s0)
    480013b0:	853e                	mv	a0,a5
    480013b2:	ea3ff0ef          	jal	48001254 <__metal_driver_sifive_clint0_control_base>
    480013b6:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:45
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    480013ba:	fd442783          	lw	a5,-44(s0)
    480013be:	0037979b          	sllw	a5,a5,0x3
    480013c2:	2781                	sext.w	a5,a5
    480013c4:	873e                	mv	a4,a5
    480013c6:	fe043783          	ld	a5,-32(s0)
    480013ca:	973e                	add	a4,a4,a5
    480013cc:	6791                	lui	a5,0x4
    480013ce:	0791                	add	a5,a5,4 # 4004 <__heap_size+0x3804>
    480013d0:	97ba                	add	a5,a5,a4
    480013d2:	873e                	mv	a4,a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:47
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = 0xFFFFFFFF;
    480013d4:	57fd                	li	a5,-1
    480013d6:	c31c                	sw	a5,0(a4)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    480013d8:	fd442783          	lw	a5,-44(s0)
    480013dc:	0037979b          	sllw	a5,a5,0x3
    480013e0:	2781                	sext.w	a5,a5
    480013e2:	873e                	mv	a4,a5
    480013e4:	fe043783          	ld	a5,-32(s0)
    480013e8:	973e                	add	a4,a4,a5
    480013ea:	6791                	lui	a5,0x4
    480013ec:	97ba                	add	a5,a5,a4
    480013ee:	873e                	mv	a4,a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:50
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
        (__metal_io_u32)time;
    480013f0:	fc843783          	ld	a5,-56(s0)
    480013f4:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:49
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
    480013f6:	c31c                	sw	a5,0(a4)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:53
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = (__metal_io_u32)(time >> 32);
    480013f8:	fc843783          	ld	a5,-56(s0)
    480013fc:	0207d693          	srl	a3,a5,0x20
validation-software/freedom-metal/src/drivers/riscv_clint0.c:51
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
    48001400:	fd442783          	lw	a5,-44(s0)
    48001404:	0037979b          	sllw	a5,a5,0x3
    48001408:	2781                	sext.w	a5,a5
    4800140a:	873e                	mv	a4,a5
    4800140c:	fe043783          	ld	a5,-32(s0)
    48001410:	973e                	add	a4,a4,a5
    48001412:	6791                	lui	a5,0x4
    48001414:	0791                	add	a5,a5,4 # 4004 <__heap_size+0x3804>
    48001416:	97ba                	add	a5,a5,a4
    48001418:	873e                	mv	a4,a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:53
                                           4)) = (__metal_io_u32)(time >> 32);
    4800141a:	0006879b          	sext.w	a5,a3
    4800141e:	c31c                	sw	a5,0(a4)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:54
    return 0;
    48001420:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/riscv_clint0.c:55
}
    48001422:	853e                	mv	a0,a5
    48001424:	70e2                	ld	ra,56(sp)
    48001426:	7442                	ld	s0,48(sp)
    48001428:	6121                	add	sp,sp,64
    4800142a:	8082                	ret

000000004800142c <_get_cpu_intc>:
_get_cpu_intc():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:57

static struct metal_interrupt *_get_cpu_intc() {
    4800142c:	1101                	add	sp,sp,-32
    4800142e:	ec06                	sd	ra,24(sp)
    48001430:	e822                	sd	s0,16(sp)
    48001432:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_clint0.c:58
    int hartid = 0;
    48001434:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:59
    __asm__ volatile("csrr %[hartid], mhartid"
    48001438:	f14027f3          	csrr	a5,mhartid
    4800143c:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:62
                     : [hartid] "=r"(hartid)::"memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
    48001440:	fec42783          	lw	a5,-20(s0)
    48001444:	853e                	mv	a0,a5
    48001446:	155040ef          	jal	48005d9a <metal_cpu_get>
    4800144a:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:64

    return metal_cpu_interrupt_controller(cpu);
    4800144e:	fe043503          	ld	a0,-32(s0)
    48001452:	01b040ef          	jal	48005c6c <metal_cpu_interrupt_controller>
    48001456:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/riscv_clint0.c:65
}
    48001458:	853e                	mv	a0,a5
    4800145a:	60e2                	ld	ra,24(sp)
    4800145c:	6442                	ld	s0,16(sp)
    4800145e:	6105                	add	sp,sp,32
    48001460:	8082                	ret

0000000048001462 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:67

void __metal_driver_riscv_clint0_init(struct metal_interrupt *controller) {
    48001462:	7139                	add	sp,sp,-64
    48001464:	fc06                	sd	ra,56(sp)
    48001466:	f822                	sd	s0,48(sp)
    48001468:	0080                	add	s0,sp,64
    4800146a:	fca43423          	sd	a0,-56(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:69
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
    4800146e:	fc843503          	ld	a0,-56(s0)
    48001472:	e0dff0ef          	jal	4800127e <__metal_driver_sifive_clint0_num_interrupts>
    48001476:	87aa                	mv	a5,a0
    48001478:	fef42423          	sw	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:70
    struct __metal_driver_riscv_clint0 *clint =
    4800147c:	fc843783          	ld	a5,-56(s0)
    48001480:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:73
        (struct __metal_driver_riscv_clint0 *)(controller);

    if (clint->init_done) {
    48001484:	fe043783          	ld	a5,-32(s0)
    48001488:	479c                	lw	a5,8(a5)
    4800148a:	e7bd                	bnez	a5,480014f8 <__metal_driver_riscv_clint0_init+0x96>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:76
        return;
    }
    clint->init_done = 1;
    4800148c:	fe043783          	ld	a5,-32(s0)
    48001490:	4705                	li	a4,1
    48001492:	c798                	sw	a4,8(a5)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:79

    /* Register CLINT software and timer interrupts with parent controller */
    for (int i = 0; i < num_interrupts; i++) {
    48001494:	fe042623          	sw	zero,-20(s0)
    48001498:	a0b1                	j	480014e4 <__metal_driver_riscv_clint0_init+0x82>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:81 (discriminator 3)
        struct metal_interrupt *intc =
            __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    4800149a:	fec42783          	lw	a5,-20(s0)
    4800149e:	85be                	mv	a1,a5
    480014a0:	fc843503          	ld	a0,-56(s0)
    480014a4:	e03ff0ef          	jal	480012a6 <__metal_driver_sifive_clint0_interrupt_parents>
    480014a8:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:83 (discriminator 3)
        int line =
            __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    480014ac:	fec42783          	lw	a5,-20(s0)
    480014b0:	85be                	mv	a1,a5
    480014b2:	fc843503          	ld	a0,-56(s0)
    480014b6:	e35ff0ef          	jal	480012ea <__metal_driver_sifive_clint0_interrupt_lines>
    480014ba:	87aa                	mv	a5,a0
    480014bc:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 3)
        intc->vtable->interrupt_register(intc, line, NULL, controller);
    480014c0:	fd843783          	ld	a5,-40(s0)
    480014c4:	639c                	ld	a5,0(a5)
    480014c6:	7f9c                	ld	a5,56(a5)
    480014c8:	fd442703          	lw	a4,-44(s0)
    480014cc:	fc843683          	ld	a3,-56(s0)
    480014d0:	4601                	li	a2,0
    480014d2:	85ba                	mv	a1,a4
    480014d4:	fd843503          	ld	a0,-40(s0)
    480014d8:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:79 (discriminator 3)
    for (int i = 0; i < num_interrupts; i++) {
    480014da:	fec42783          	lw	a5,-20(s0)
    480014de:	2785                	addw	a5,a5,1
    480014e0:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:79 (discriminator 1)
    480014e4:	fec42783          	lw	a5,-20(s0)
    480014e8:	873e                	mv	a4,a5
    480014ea:	fe842783          	lw	a5,-24(s0)
    480014ee:	2701                	sext.w	a4,a4
    480014f0:	2781                	sext.w	a5,a5
    480014f2:	faf744e3          	blt	a4,a5,4800149a <__metal_driver_riscv_clint0_init+0x38>
    480014f6:	a011                	j	480014fa <__metal_driver_riscv_clint0_init+0x98>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:74
        return;
    480014f8:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_clint0.c:86
    }
}
    480014fa:	70e2                	ld	ra,56(sp)
    480014fc:	7442                	ld	s0,48(sp)
    480014fe:	6121                	add	sp,sp,64
    48001500:	8082                	ret

0000000048001502 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:90

int __metal_driver_riscv_clint0_register(struct metal_interrupt *controller,
                                         int id, metal_interrupt_handler_t isr,
                                         void *priv) {
    48001502:	711d                	add	sp,sp,-96
    48001504:	ec86                	sd	ra,88(sp)
    48001506:	e8a2                	sd	s0,80(sp)
    48001508:	1080                	add	s0,sp,96
    4800150a:	faa43c23          	sd	a0,-72(s0)
    4800150e:	87ae                	mv	a5,a1
    48001510:	fac43423          	sd	a2,-88(s0)
    48001514:	fad43023          	sd	a3,-96(s0)
    48001518:	faf42a23          	sw	a5,-76(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:91
    int rc = -1;
    4800151c:	57fd                	li	a5,-1
    4800151e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:92
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
    48001522:	3f5010ef          	jal	48003116 <__metal_controller_interrupt_vector_mode>
    48001526:	87aa                	mv	a5,a0
    48001528:	fcf42c23          	sw	a5,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:93
    struct metal_interrupt *intc = NULL;
    4800152c:	fe043023          	sd	zero,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:94
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
    48001530:	efdff0ef          	jal	4800142c <_get_cpu_intc>
    48001534:	fca43823          	sd	a0,-48(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:96
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
    48001538:	fb843503          	ld	a0,-72(s0)
    4800153c:	d43ff0ef          	jal	4800127e <__metal_driver_sifive_clint0_num_interrupts>
    48001540:	87aa                	mv	a5,a0
    48001542:	fcf42623          	sw	a5,-52(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:98

    if ((mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE)) {
    48001546:	fd842783          	lw	a5,-40(s0)
    4800154a:	0007871b          	sext.w	a4,a5
    4800154e:	4785                	li	a5,1
    48001550:	00f70963          	beq	a4,a5,48001562 <__metal_driver_riscv_clint0_register+0x60>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:98 (discriminator 1)
    48001554:	fd842783          	lw	a5,-40(s0)
    48001558:	2781                	sext.w	a5,a5
    4800155a:	c781                	beqz	a5,48001562 <__metal_driver_riscv_clint0_register+0x60>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:99
        return rc;
    4800155c:	fec42783          	lw	a5,-20(s0)
    48001560:	a871                	j	480015fc <__metal_driver_riscv_clint0_register+0xfa>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:102
    }

    for (int i = 0; i < num_interrupts; i++) {
    48001562:	fc042e23          	sw	zero,-36(s0)
    48001566:	a891                	j	480015ba <__metal_driver_riscv_clint0_register+0xb8>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:103
        int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    48001568:	fdc42783          	lw	a5,-36(s0)
    4800156c:	85be                	mv	a1,a5
    4800156e:	fb843503          	ld	a0,-72(s0)
    48001572:	d79ff0ef          	jal	480012ea <__metal_driver_sifive_clint0_interrupt_lines>
    48001576:	87aa                	mv	a5,a0
    48001578:	fcf42423          	sw	a5,-56(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:104
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    4800157c:	fdc42783          	lw	a5,-36(s0)
    48001580:	85be                	mv	a1,a5
    48001582:	fb843503          	ld	a0,-72(s0)
    48001586:	d21ff0ef          	jal	480012a6 <__metal_driver_sifive_clint0_interrupt_parents>
    4800158a:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:105
        if (cpu_intc == intc && id == line) {
    4800158e:	fd043703          	ld	a4,-48(s0)
    48001592:	fe043783          	ld	a5,-32(s0)
    48001596:	00f71b63          	bne	a4,a5,480015ac <__metal_driver_riscv_clint0_register+0xaa>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:105 (discriminator 1)
    4800159a:	fb442783          	lw	a5,-76(s0)
    4800159e:	873e                	mv	a4,a5
    480015a0:	fc842783          	lw	a5,-56(s0)
    480015a4:	2701                	sext.w	a4,a4
    480015a6:	2781                	sext.w	a5,a5
    480015a8:	02f70363          	beq	a4,a5,480015ce <__metal_driver_riscv_clint0_register+0xcc>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:108 (discriminator 2)
            break;
        }
        intc = NULL;
    480015ac:	fe043023          	sd	zero,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:102 (discriminator 2)
    for (int i = 0; i < num_interrupts; i++) {
    480015b0:	fdc42783          	lw	a5,-36(s0)
    480015b4:	2785                	addw	a5,a5,1
    480015b6:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:102 (discriminator 1)
    480015ba:	fdc42783          	lw	a5,-36(s0)
    480015be:	873e                	mv	a4,a5
    480015c0:	fcc42783          	lw	a5,-52(s0)
    480015c4:	2701                	sext.w	a4,a4
    480015c6:	2781                	sext.w	a5,a5
    480015c8:	faf740e3          	blt	a4,a5,48001568 <__metal_driver_riscv_clint0_register+0x66>
    480015cc:	a011                	j	480015d0 <__metal_driver_riscv_clint0_register+0xce>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:106
            break;
    480015ce:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_clint0.c:112
    }

    /* Register its interrupts with parent controller */
    if (intc) {
    480015d0:	fe043783          	ld	a5,-32(s0)
    480015d4:	c395                	beqz	a5,480015f8 <__metal_driver_riscv_clint0_register+0xf6>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:113
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
    480015d6:	fe043783          	ld	a5,-32(s0)
    480015da:	639c                	ld	a5,0(a5)
    480015dc:	7f9c                	ld	a5,56(a5)
    480015de:	fb442703          	lw	a4,-76(s0)
    480015e2:	fa043683          	ld	a3,-96(s0)
    480015e6:	fa843603          	ld	a2,-88(s0)
    480015ea:	85ba                	mv	a1,a4
    480015ec:	fe043503          	ld	a0,-32(s0)
    480015f0:	9782                	jalr	a5
    480015f2:	87aa                	mv	a5,a0
    480015f4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:115
    }
    return rc;
    480015f8:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:116
}
    480015fc:	853e                	mv	a0,a5
    480015fe:	60e6                	ld	ra,88(sp)
    48001600:	6446                	ld	s0,80(sp)
    48001602:	6125                	add	sp,sp,96
    48001604:	8082                	ret

0000000048001606 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:120

int __metal_driver_riscv_clint0_vector_register(
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t isr, void *priv) {
    48001606:	7139                	add	sp,sp,-64
    48001608:	fc22                	sd	s0,56(sp)
    4800160a:	0080                	add	s0,sp,64
    4800160c:	fca43c23          	sd	a0,-40(s0)
    48001610:	87ae                	mv	a5,a1
    48001612:	fcc43423          	sd	a2,-56(s0)
    48001616:	fcd43023          	sd	a3,-64(s0)
    4800161a:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:122
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
    4800161e:	57fd                	li	a5,-1
    48001620:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:123
    return rc;
    48001624:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:124
}
    48001628:	853e                	mv	a0,a5
    4800162a:	7462                	ld	s0,56(sp)
    4800162c:	6121                	add	sp,sp,64
    4800162e:	8082                	ret

0000000048001630 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:127

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode(
    struct metal_interrupt *controller) {
    48001630:	1101                	add	sp,sp,-32
    48001632:	ec06                	sd	ra,24(sp)
    48001634:	e822                	sd	s0,16(sp)
    48001636:	1000                	add	s0,sp,32
    48001638:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:128
    return __metal_controller_interrupt_vector_mode();
    4800163c:	2db010ef          	jal	48003116 <__metal_controller_interrupt_vector_mode>
    48001640:	87aa                	mv	a5,a0
    48001642:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:129
}
    48001644:	853e                	mv	a0,a5
    48001646:	60e2                	ld	ra,24(sp)
    48001648:	6442                	ld	s0,16(sp)
    4800164a:	6105                	add	sp,sp,32
    4800164c:	8082                	ret

000000004800164e <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:132

int __metal_driver_riscv_clint0_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
    4800164e:	7179                	add	sp,sp,-48
    48001650:	f406                	sd	ra,40(sp)
    48001652:	f022                	sd	s0,32(sp)
    48001654:	1800                	add	s0,sp,48
    48001656:	fca43c23          	sd	a0,-40(s0)
    4800165a:	87ae                	mv	a5,a1
    4800165c:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:133
    int rc = -1;
    48001660:	57fd                	li	a5,-1
    48001662:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:134
    struct metal_interrupt *intc = _get_cpu_intc();
    48001666:	dc7ff0ef          	jal	4800142c <_get_cpu_intc>
    4800166a:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:136

    if (intc) {
    4800166e:	fe043783          	ld	a5,-32(s0)
    48001672:	c79d                	beqz	a5,480016a0 <__metal_driver_riscv_clint0_set_vector_mode+0x52>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:139
        /* Valid vector modes are VECTOR and DIRECT, anything else is invalid
         * (-1) */
        switch (mode) {
    48001674:	fd442783          	lw	a5,-44(s0)
    48001678:	0007871b          	sext.w	a4,a5
    4800167c:	4785                	li	a5,1
    4800167e:	02e7e063          	bltu	a5,a4,4800169e <__metal_driver_riscv_clint0_set_vector_mode+0x50>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:142
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
    48001682:	fe043783          	ld	a5,-32(s0)
    48001686:	639c                	ld	a5,0(a5)
    48001688:	679c                	ld	a5,8(a5)
    4800168a:	fd442703          	lw	a4,-44(s0)
    4800168e:	85ba                	mv	a1,a4
    48001690:	fe043503          	ld	a0,-32(s0)
    48001694:	9782                	jalr	a5
    48001696:	87aa                	mv	a5,a0
    48001698:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:143
            break;
    4800169c:	a011                	j	480016a0 <__metal_driver_riscv_clint0_set_vector_mode+0x52>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:145
        default:
            break;
    4800169e:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_clint0.c:148
        }
    }
    return rc;
    480016a0:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:149
}
    480016a4:	853e                	mv	a0,a5
    480016a6:	70a2                	ld	ra,40(sp)
    480016a8:	7402                	ld	s0,32(sp)
    480016aa:	6145                	add	sp,sp,48
    480016ac:	8082                	ret

00000000480016ae <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:152

int __metal_driver_riscv_clint0_enable(struct metal_interrupt *controller,
                                       int id) {
    480016ae:	715d                	add	sp,sp,-80
    480016b0:	e486                	sd	ra,72(sp)
    480016b2:	e0a2                	sd	s0,64(sp)
    480016b4:	0880                	add	s0,sp,80
    480016b6:	faa43c23          	sd	a0,-72(s0)
    480016ba:	87ae                	mv	a5,a1
    480016bc:	faf42a23          	sw	a5,-76(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:153
    int rc = -1;
    480016c0:	57fd                	li	a5,-1
    480016c2:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:155

    if (id) {
    480016c6:	fb442783          	lw	a5,-76(s0)
    480016ca:	2781                	sext.w	a5,a5
    480016cc:	c7cd                	beqz	a5,48001776 <__metal_driver_riscv_clint0_enable+0xc8>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:156
        struct metal_interrupt *intc = NULL;
    480016ce:	fe043023          	sd	zero,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:157
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    480016d2:	d5bff0ef          	jal	4800142c <_get_cpu_intc>
    480016d6:	fca43823          	sd	a0,-48(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:159
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
    480016da:	fb843503          	ld	a0,-72(s0)
    480016de:	ba1ff0ef          	jal	4800127e <__metal_driver_sifive_clint0_num_interrupts>
    480016e2:	87aa                	mv	a5,a0
    480016e4:	fcf42623          	sw	a5,-52(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:161

        for (int i = 0; i < num_interrupts; i++) {
    480016e8:	fc042e23          	sw	zero,-36(s0)
    480016ec:	a891                	j	48001740 <__metal_driver_riscv_clint0_enable+0x92>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:163
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    480016ee:	fdc42783          	lw	a5,-36(s0)
    480016f2:	85be                	mv	a1,a5
    480016f4:	fb843503          	ld	a0,-72(s0)
    480016f8:	bf3ff0ef          	jal	480012ea <__metal_driver_sifive_clint0_interrupt_lines>
    480016fc:	87aa                	mv	a5,a0
    480016fe:	fcf42423          	sw	a5,-56(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:165
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    48001702:	fdc42783          	lw	a5,-36(s0)
    48001706:	85be                	mv	a1,a5
    48001708:	fb843503          	ld	a0,-72(s0)
    4800170c:	b9bff0ef          	jal	480012a6 <__metal_driver_sifive_clint0_interrupt_parents>
    48001710:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:166
            if (cpu_intc == intc && id == line) {
    48001714:	fd043703          	ld	a4,-48(s0)
    48001718:	fe043783          	ld	a5,-32(s0)
    4800171c:	00f71b63          	bne	a4,a5,48001732 <__metal_driver_riscv_clint0_enable+0x84>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:166 (discriminator 1)
    48001720:	fb442783          	lw	a5,-76(s0)
    48001724:	873e                	mv	a4,a5
    48001726:	fc842783          	lw	a5,-56(s0)
    4800172a:	2701                	sext.w	a4,a4
    4800172c:	2781                	sext.w	a5,a5
    4800172e:	02f70363          	beq	a4,a5,48001754 <__metal_driver_riscv_clint0_enable+0xa6>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:169 (discriminator 2)
                break;
            }
            intc = NULL;
    48001732:	fe043023          	sd	zero,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:161 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
    48001736:	fdc42783          	lw	a5,-36(s0)
    4800173a:	2785                	addw	a5,a5,1
    4800173c:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:161 (discriminator 1)
    48001740:	fdc42783          	lw	a5,-36(s0)
    48001744:	873e                	mv	a4,a5
    48001746:	fcc42783          	lw	a5,-52(s0)
    4800174a:	2701                	sext.w	a4,a4
    4800174c:	2781                	sext.w	a5,a5
    4800174e:	faf740e3          	blt	a4,a5,480016ee <__metal_driver_riscv_clint0_enable+0x40>
    48001752:	a011                	j	48001756 <__metal_driver_riscv_clint0_enable+0xa8>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:167
                break;
    48001754:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_clint0.c:173
        }

        /* Enable its interrupts with parent controller */
        if (intc) {
    48001756:	fe043783          	ld	a5,-32(s0)
    4800175a:	cf91                	beqz	a5,48001776 <__metal_driver_riscv_clint0_enable+0xc8>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:174
            rc = intc->vtable->interrupt_enable(intc, id);
    4800175c:	fe043783          	ld	a5,-32(s0)
    48001760:	639c                	ld	a5,0(a5)
    48001762:	67bc                	ld	a5,72(a5)
    48001764:	fb442703          	lw	a4,-76(s0)
    48001768:	85ba                	mv	a1,a4
    4800176a:	fe043503          	ld	a0,-32(s0)
    4800176e:	9782                	jalr	a5
    48001770:	87aa                	mv	a5,a0
    48001772:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:178
        }
    }

    return rc;
    48001776:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:179
}
    4800177a:	853e                	mv	a0,a5
    4800177c:	60a6                	ld	ra,72(sp)
    4800177e:	6406                	ld	s0,64(sp)
    48001780:	6161                	add	sp,sp,80
    48001782:	8082                	ret

0000000048001784 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:182

int __metal_driver_riscv_clint0_disable(struct metal_interrupt *controller,
                                        int id) {
    48001784:	715d                	add	sp,sp,-80
    48001786:	e486                	sd	ra,72(sp)
    48001788:	e0a2                	sd	s0,64(sp)
    4800178a:	0880                	add	s0,sp,80
    4800178c:	faa43c23          	sd	a0,-72(s0)
    48001790:	87ae                	mv	a5,a1
    48001792:	faf42a23          	sw	a5,-76(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:183
    int rc = -1;
    48001796:	57fd                	li	a5,-1
    48001798:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:185

    if (id) {
    4800179c:	fb442783          	lw	a5,-76(s0)
    480017a0:	2781                	sext.w	a5,a5
    480017a2:	c7cd                	beqz	a5,4800184c <__metal_driver_riscv_clint0_disable+0xc8>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:186
        struct metal_interrupt *intc = NULL;
    480017a4:	fe043023          	sd	zero,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:187
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
    480017a8:	c85ff0ef          	jal	4800142c <_get_cpu_intc>
    480017ac:	fca43823          	sd	a0,-48(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:189
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
    480017b0:	fb843503          	ld	a0,-72(s0)
    480017b4:	acbff0ef          	jal	4800127e <__metal_driver_sifive_clint0_num_interrupts>
    480017b8:	87aa                	mv	a5,a0
    480017ba:	fcf42623          	sw	a5,-52(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:191

        for (int i = 0; i < num_interrupts; i++) {
    480017be:	fc042e23          	sw	zero,-36(s0)
    480017c2:	a891                	j	48001816 <__metal_driver_riscv_clint0_disable+0x92>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:193
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
    480017c4:	fdc42783          	lw	a5,-36(s0)
    480017c8:	85be                	mv	a1,a5
    480017ca:	fb843503          	ld	a0,-72(s0)
    480017ce:	b1dff0ef          	jal	480012ea <__metal_driver_sifive_clint0_interrupt_lines>
    480017d2:	87aa                	mv	a5,a0
    480017d4:	fcf42423          	sw	a5,-56(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:195
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
    480017d8:	fdc42783          	lw	a5,-36(s0)
    480017dc:	85be                	mv	a1,a5
    480017de:	fb843503          	ld	a0,-72(s0)
    480017e2:	ac5ff0ef          	jal	480012a6 <__metal_driver_sifive_clint0_interrupt_parents>
    480017e6:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:196
            if (cpu_intc == intc && id == line) {
    480017ea:	fd043703          	ld	a4,-48(s0)
    480017ee:	fe043783          	ld	a5,-32(s0)
    480017f2:	00f71b63          	bne	a4,a5,48001808 <__metal_driver_riscv_clint0_disable+0x84>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:196 (discriminator 1)
    480017f6:	fb442783          	lw	a5,-76(s0)
    480017fa:	873e                	mv	a4,a5
    480017fc:	fc842783          	lw	a5,-56(s0)
    48001800:	2701                	sext.w	a4,a4
    48001802:	2781                	sext.w	a5,a5
    48001804:	02f70363          	beq	a4,a5,4800182a <__metal_driver_riscv_clint0_disable+0xa6>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:199 (discriminator 2)
                break;
            }
            intc = NULL;
    48001808:	fe043023          	sd	zero,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:191 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
    4800180c:	fdc42783          	lw	a5,-36(s0)
    48001810:	2785                	addw	a5,a5,1
    48001812:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:191 (discriminator 1)
    48001816:	fdc42783          	lw	a5,-36(s0)
    4800181a:	873e                	mv	a4,a5
    4800181c:	fcc42783          	lw	a5,-52(s0)
    48001820:	2701                	sext.w	a4,a4
    48001822:	2781                	sext.w	a5,a5
    48001824:	faf740e3          	blt	a4,a5,480017c4 <__metal_driver_riscv_clint0_disable+0x40>
    48001828:	a011                	j	4800182c <__metal_driver_riscv_clint0_disable+0xa8>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:197
                break;
    4800182a:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_clint0.c:203
        }

        /* Disable its interrupts with parent controller */
        if (intc) {
    4800182c:	fe043783          	ld	a5,-32(s0)
    48001830:	cf91                	beqz	a5,4800184c <__metal_driver_riscv_clint0_disable+0xc8>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:204
            rc = intc->vtable->interrupt_disable(intc, id);
    48001832:	fe043783          	ld	a5,-32(s0)
    48001836:	639c                	ld	a5,0(a5)
    48001838:	6bbc                	ld	a5,80(a5)
    4800183a:	fb442703          	lw	a4,-76(s0)
    4800183e:	85ba                	mv	a1,a4
    48001840:	fe043503          	ld	a0,-32(s0)
    48001844:	9782                	jalr	a5
    48001846:	87aa                	mv	a5,a0
    48001848:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:208
        }
    }

    return rc;
    4800184c:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:209
}
    48001850:	853e                	mv	a0,a5
    48001852:	60a6                	ld	ra,72(sp)
    48001854:	6406                	ld	s0,64(sp)
    48001856:	6161                	add	sp,sp,80
    48001858:	8082                	ret

000000004800185a <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:212

int __metal_driver_riscv_clint0_command_request(
    struct metal_interrupt *controller, int command, void *data) {
    4800185a:	715d                	add	sp,sp,-80
    4800185c:	e486                	sd	ra,72(sp)
    4800185e:	e0a2                	sd	s0,64(sp)
    48001860:	0880                	add	s0,sp,80
    48001862:	fca43423          	sd	a0,-56(s0)
    48001866:	87ae                	mv	a5,a1
    48001868:	fac43c23          	sd	a2,-72(s0)
    4800186c:	fcf42223          	sw	a5,-60(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:214
    int hartid;
    int rc = -1;
    48001870:	57fd                	li	a5,-1
    48001872:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:215
    struct __metal_driver_riscv_clint0 *clint =
    48001876:	fc843783          	ld	a5,-56(s0)
    4800187a:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:218
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(controller);
    4800187e:	fc843503          	ld	a0,-56(s0)
    48001882:	9d3ff0ef          	jal	48001254 <__metal_driver_sifive_clint0_control_base>
    48001886:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:220

    switch (command) {
    4800188a:	fc442783          	lw	a5,-60(s0)
    4800188e:	0007871b          	sext.w	a4,a5
    48001892:	4791                	li	a5,4
    48001894:	0ef70063          	beq	a4,a5,48001974 <__metal_driver_riscv_clint0_command_request+0x11a>
    48001898:	fc442783          	lw	a5,-60(s0)
    4800189c:	0007871b          	sext.w	a4,a5
    480018a0:	4791                	li	a5,4
    480018a2:	10e7c163          	blt	a5,a4,480019a4 <__metal_driver_riscv_clint0_command_request+0x14a>
    480018a6:	fc442783          	lw	a5,-60(s0)
    480018aa:	0007871b          	sext.w	a4,a5
    480018ae:	478d                	li	a5,3
    480018b0:	06f70c63          	beq	a4,a5,48001928 <__metal_driver_riscv_clint0_command_request+0xce>
    480018b4:	fc442783          	lw	a5,-60(s0)
    480018b8:	0007871b          	sext.w	a4,a5
    480018bc:	478d                	li	a5,3
    480018be:	0ee7c363          	blt	a5,a4,480019a4 <__metal_driver_riscv_clint0_command_request+0x14a>
    480018c2:	fc442783          	lw	a5,-60(s0)
    480018c6:	0007871b          	sext.w	a4,a5
    480018ca:	4785                	li	a5,1
    480018cc:	00f70a63          	beq	a4,a5,480018e0 <__metal_driver_riscv_clint0_command_request+0x86>
    480018d0:	fc442783          	lw	a5,-60(s0)
    480018d4:	0007871b          	sext.w	a4,a5
    480018d8:	4789                	li	a5,2
    480018da:	02f70163          	beq	a4,a5,480018fc <__metal_driver_riscv_clint0_command_request+0xa2>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:264
            rc = __METAL_ACCESS_ONCE(
                (__metal_io_u32 *)(control_base + (hartid * 4)));
        }
        break;
    default:
        break;
    480018de:	a0d9                	j	480019a4 <__metal_driver_riscv_clint0_command_request+0x14a>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:222
        if (data) {
    480018e0:	fb843783          	ld	a5,-72(s0)
    480018e4:	c3f1                	beqz	a5,480019a8 <__metal_driver_riscv_clint0_command_request+0x14e>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:223
            *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
    480018e6:	fe043503          	ld	a0,-32(s0)
    480018ea:	a39ff0ef          	jal	48001322 <__metal_clint0_mtime_get>
    480018ee:	872a                	mv	a4,a0
    480018f0:	fb843783          	ld	a5,-72(s0)
    480018f4:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:224
            rc = 0;
    480018f6:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:226
        break;
    480018fa:	a07d                	j	480019a8 <__metal_driver_riscv_clint0_command_request+0x14e>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:228
        if (data) {
    480018fc:	fb843783          	ld	a5,-72(s0)
    48001900:	c7d5                	beqz	a5,480019ac <__metal_driver_riscv_clint0_command_request+0x152>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:229
            hartid = *(int *)data;
    48001902:	fb843783          	ld	a5,-72(s0)
    48001906:	439c                	lw	a5,0(a5)
    48001908:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:230
            __METAL_ACCESS_ONCE((
    4800190c:	fd442783          	lw	a5,-44(s0)
    48001910:	0027979b          	sllw	a5,a5,0x2
    48001914:	2781                	sext.w	a5,a5
    48001916:	873e                	mv	a4,a5
    48001918:	fd843783          	ld	a5,-40(s0)
    4800191c:	97ba                	add	a5,a5,a4
validation-software/freedom-metal/src/drivers/riscv_clint0.c:231
                __metal_io_u32 *)(control_base + (hartid * 4))) = METAL_DISABLE;
    4800191e:	0007a023          	sw	zero,0(a5)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:232
            rc = 0;
    48001922:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:234
        break;
    48001926:	a059                	j	480019ac <__metal_driver_riscv_clint0_command_request+0x152>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:236
        if (data) {
    48001928:	fb843783          	ld	a5,-72(s0)
    4800192c:	c3d1                	beqz	a5,480019b0 <__metal_driver_riscv_clint0_command_request+0x156>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:237
            hartid = *(int *)data;
    4800192e:	fb843783          	ld	a5,-72(s0)
    48001932:	439c                	lw	a5,0(a5)
    48001934:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:238
            __METAL_ACCESS_ONCE(
    48001938:	fd442783          	lw	a5,-44(s0)
    4800193c:	0027979b          	sllw	a5,a5,0x2
    48001940:	2781                	sext.w	a5,a5
    48001942:	873e                	mv	a4,a5
    48001944:	fd843783          	ld	a5,-40(s0)
    48001948:	97ba                	add	a5,a5,a4
    4800194a:	873e                	mv	a4,a5
validation-software/freedom-metal/src/drivers/riscv_clint0.c:239
                (__metal_io_u32 *)(control_base + (hartid * 4))) = METAL_ENABLE;
    4800194c:	4785                	li	a5,1
    4800194e:	c31c                	sw	a5,0(a4)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:249
            __METAL_IO_FENCE(o, i);
    48001950:	0480000f          	fence	o,i
validation-software/freedom-metal/src/drivers/riscv_clint0.c:250
            rc = __METAL_ACCESS_ONCE(
    48001954:	fd442783          	lw	a5,-44(s0)
    48001958:	0027979b          	sllw	a5,a5,0x2
    4800195c:	2781                	sext.w	a5,a5
    4800195e:	873e                	mv	a4,a5
    48001960:	fd843783          	ld	a5,-40(s0)
    48001964:	97ba                	add	a5,a5,a4
    48001966:	439c                	lw	a5,0(a5)
    48001968:	2781                	sext.w	a5,a5
    4800196a:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:252
            rc = 0;
    4800196e:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:254
        break;
    48001972:	a83d                	j	480019b0 <__metal_driver_riscv_clint0_command_request+0x156>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:256
        rc = 0;
    48001974:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:257
        if (data) {
    48001978:	fb843783          	ld	a5,-72(s0)
    4800197c:	cf85                	beqz	a5,480019b4 <__metal_driver_riscv_clint0_command_request+0x15a>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:258
            hartid = *(int *)data;
    4800197e:	fb843783          	ld	a5,-72(s0)
    48001982:	439c                	lw	a5,0(a5)
    48001984:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:259
            rc = __METAL_ACCESS_ONCE(
    48001988:	fd442783          	lw	a5,-44(s0)
    4800198c:	0027979b          	sllw	a5,a5,0x2
    48001990:	2781                	sext.w	a5,a5
    48001992:	873e                	mv	a4,a5
    48001994:	fd843783          	ld	a5,-40(s0)
    48001998:	97ba                	add	a5,a5,a4
    4800199a:	439c                	lw	a5,0(a5)
    4800199c:	2781                	sext.w	a5,a5
    4800199e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:262
        break;
    480019a2:	a809                	j	480019b4 <__metal_driver_riscv_clint0_command_request+0x15a>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:264
        break;
    480019a4:	0001                	nop
    480019a6:	a801                	j	480019b6 <__metal_driver_riscv_clint0_command_request+0x15c>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:226
        break;
    480019a8:	0001                	nop
    480019aa:	a031                	j	480019b6 <__metal_driver_riscv_clint0_command_request+0x15c>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:234
        break;
    480019ac:	0001                	nop
    480019ae:	a021                	j	480019b6 <__metal_driver_riscv_clint0_command_request+0x15c>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:254
        break;
    480019b0:	0001                	nop
    480019b2:	a011                	j	480019b6 <__metal_driver_riscv_clint0_command_request+0x15c>
validation-software/freedom-metal/src/drivers/riscv_clint0.c:262
        break;
    480019b4:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_clint0.c:267
    }

    return rc;
    480019b6:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:268
}
    480019ba:	853e                	mv	a0,a5
    480019bc:	60a6                	ld	ra,72(sp)
    480019be:	6406                	ld	s0,64(sp)
    480019c0:	6161                	add	sp,sp,80
    480019c2:	8082                	ret

00000000480019c4 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:271

int __metal_driver_riscv_clint0_clear_interrupt(
    struct metal_interrupt *controller, int id) {
    480019c4:	7179                	add	sp,sp,-48
    480019c6:	f406                	sd	ra,40(sp)
    480019c8:	f022                	sd	s0,32(sp)
    480019ca:	1800                	add	s0,sp,48
    480019cc:	fca43c23          	sd	a0,-40(s0)
    480019d0:	87ae                	mv	a5,a1
    480019d2:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:272
    int hartid = metal_cpu_get_current_hartid();
    480019d6:	412040ef          	jal	48005de8 <metal_cpu_get_current_hartid>
    480019da:	87aa                	mv	a5,a0
    480019dc:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:273
    return __metal_driver_riscv_clint0_command_request(
    480019e0:	fec40793          	add	a5,s0,-20
    480019e4:	863e                	mv	a2,a5
    480019e6:	4589                	li	a1,2
    480019e8:	fd843503          	ld	a0,-40(s0)
    480019ec:	e6fff0ef          	jal	4800185a <__metal_driver_riscv_clint0_command_request>
    480019f0:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/riscv_clint0.c:275
        controller, METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
    480019f2:	853e                	mv	a0,a5
    480019f4:	70a2                	ld	ra,40(sp)
    480019f6:	7402                	ld	s0,32(sp)
    480019f8:	6145                	add	sp,sp,48
    480019fa:	8082                	ret

00000000480019fc <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
validation-software/freedom-metal/src/drivers/riscv_clint0.c:278

int __metal_driver_riscv_clint0_set_interrupt(
    struct metal_interrupt *controller, int id) {
    480019fc:	7179                	add	sp,sp,-48
    480019fe:	f406                	sd	ra,40(sp)
    48001a00:	f022                	sd	s0,32(sp)
    48001a02:	1800                	add	s0,sp,48
    48001a04:	fca43c23          	sd	a0,-40(s0)
    48001a08:	87ae                	mv	a5,a1
    48001a0a:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:279
    int hartid = metal_cpu_get_current_hartid();
    48001a0e:	3da040ef          	jal	48005de8 <metal_cpu_get_current_hartid>
    48001a12:	87aa                	mv	a5,a0
    48001a14:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_clint0.c:280
    return __metal_driver_riscv_clint0_command_request(
    48001a18:	fec40793          	add	a5,s0,-20
    48001a1c:	863e                	mv	a2,a5
    48001a1e:	458d                	li	a1,3
    48001a20:	fd843503          	ld	a0,-40(s0)
    48001a24:	e37ff0ef          	jal	4800185a <__metal_driver_riscv_clint0_command_request>
    48001a28:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/riscv_clint0.c:282
        controller, METAL_SOFTWARE_IPI_SET, &hartid);
}
    48001a2a:	853e                	mv	a0,a5
    48001a2c:	70a2                	ld	ra,40(sp)
    48001a2e:	7402                	ld	s0,32(sp)
    48001a30:	6145                	add	sp,sp,48
    48001a32:	8082                	ret

0000000048001a34 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:248



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
    48001a34:	1101                	add	sp,sp,-32
    48001a36:	ec22                	sd	s0,24(sp)
    48001a38:	1000                	add	s0,sp,32
    48001a3a:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:249
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    48001a3e:	fe843703          	ld	a4,-24(s0)
    48001a42:	37ffe797          	auipc	a5,0x37ffe
    48001a46:	6ce78793          	add	a5,a5,1742 # 80000110 <__metal_dt_cpu_0>
    48001a4a:	00f71463          	bne	a4,a5,48001a52 <__metal_driver_cpu_hartid+0x1e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:250
		return 0;
    48001a4e:	4781                	li	a5,0
    48001a50:	a011                	j	48001a54 <__metal_driver_cpu_hartid+0x20>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:253
	}
	else {
		return -1;
    48001a52:	57fd                	li	a5,-1
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:255
	}
}
    48001a54:	853e                	mv	a0,a5
    48001a56:	6462                	ld	s0,24(sp)
    48001a58:	6105                	add	sp,sp,32
    48001a5a:	8082                	ret

0000000048001a5c <__metal_driver_cpu_mtime_frequency>:
__metal_driver_cpu_mtime_frequency():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:258

static __inline__ unsigned long long __metal_driver_cpu_mtime_frequency(struct metal_cpu *cpu)
{
    48001a5c:	1101                	add	sp,sp,-32
    48001a5e:	ec22                	sd	s0,24(sp)
    48001a60:	1000                	add	s0,sp,32
    48001a62:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:259
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    48001a66:	fe843703          	ld	a4,-24(s0)
    48001a6a:	37ffe797          	auipc	a5,0x37ffe
    48001a6e:	6a678793          	add	a5,a5,1702 # 80000110 <__metal_dt_cpu_0>
    48001a72:	00f71763          	bne	a4,a5,48001a80 <__metal_driver_cpu_mtime_frequency+0x24>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:261
#ifdef MTIME_RATE_HZ_DEF
		return MTIME_RATE_HZ_DEF;
    48001a76:	05f5e7b7          	lui	a5,0x5f5e
    48001a7a:	10078793          	add	a5,a5,256 # 5f5e100 <__heap_size+0x5f5d900>
    48001a7e:	a011                	j	48001a82 <__metal_driver_cpu_mtime_frequency+0x26>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:267
#else
		return 32768ULL;
#endif
	}
	else {
		return 0;
    48001a80:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:269
	}
}
    48001a82:	853e                	mv	a0,a5
    48001a84:	6462                	ld	s0,24(sp)
    48001a86:	6105                	add	sp,sp,32
    48001a88:	8082                	ret

0000000048001a8a <__metal_driver_cpu_clock_frequency>:
__metal_driver_cpu_clock_frequency():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:272

static __inline__ unsigned long long __metal_driver_cpu_clock_frequency(struct metal_cpu *cpu)
{
    48001a8a:	1101                	add	sp,sp,-32
    48001a8c:	ec22                	sd	s0,24(sp)
    48001a8e:	1000                	add	s0,sp,32
    48001a90:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:273
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    48001a94:	fe843703          	ld	a4,-24(s0)
    48001a98:	37ffe797          	auipc	a5,0x37ffe
    48001a9c:	67878793          	add	a5,a5,1656 # 80000110 <__metal_dt_cpu_0>
    48001aa0:	00f71763          	bne	a4,a5,48001aae <__metal_driver_cpu_clock_frequency+0x24>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:274
		return 100000000;
    48001aa4:	05f5e7b7          	lui	a5,0x5f5e
    48001aa8:	10078793          	add	a5,a5,256 # 5f5e100 <__heap_size+0x5f5d900>
    48001aac:	a011                	j	48001ab0 <__metal_driver_cpu_clock_frequency+0x26>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:277
	}
	else {
		return 0;
    48001aae:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:279
	}
}
    48001ab0:	853e                	mv	a0,a5
    48001ab2:	6462                	ld	s0,24(sp)
    48001ab4:	6105                	add	sp,sp,32
    48001ab6:	8082                	ret

0000000048001ab8 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:282

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
    48001ab8:	1101                	add	sp,sp,-32
    48001aba:	ec22                	sd	s0,24(sp)
    48001abc:	1000                	add	s0,sp,32
    48001abe:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:283
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    48001ac2:	fe843703          	ld	a4,-24(s0)
    48001ac6:	37ffe797          	auipc	a5,0x37ffe
    48001aca:	64a78793          	add	a5,a5,1610 # 80000110 <__metal_dt_cpu_0>
    48001ace:	00f71763          	bne	a4,a5,48001adc <__metal_driver_cpu_interrupt_controller+0x24>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:284
		return &__metal_dt_cpu_0_interrupt_controller.controller;
    48001ad2:	37ffe797          	auipc	a5,0x37ffe
    48001ad6:	64e78793          	add	a5,a5,1614 # 80000120 <__metal_dt_cpu_0_interrupt_controller>
    48001ada:	a011                	j	48001ade <__metal_driver_cpu_interrupt_controller+0x26>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:287
	}
	else {
		return NULL;
    48001adc:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:289
	}
}
    48001ade:	853e                	mv	a0,a5
    48001ae0:	6462                	ld	s0,24(sp)
    48001ae2:	6105                	add	sp,sp,32
    48001ae4:	8082                	ret

0000000048001ae6 <__metal_driver_cpu_buserror>:
__metal_driver_cpu_buserror():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:302
		return 0;
	}
}

static __inline__ struct metal_buserror * __metal_driver_cpu_buserror(struct metal_cpu *cpu)
{
    48001ae6:	1101                	add	sp,sp,-32
    48001ae8:	ec22                	sd	s0,24(sp)
    48001aea:	1000                	add	s0,sp,32
    48001aec:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:303
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    48001af0:	fe843703          	ld	a4,-24(s0)
    48001af4:	37ffe797          	auipc	a5,0x37ffe
    48001af8:	61c78793          	add	a5,a5,1564 # 80000110 <__metal_dt_cpu_0>
    48001afc:	00f71563          	bne	a4,a5,48001b06 <__metal_driver_cpu_buserror+0x20>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:304
		return &__metal_dt_bus_error_unit_1700000;
    48001b00:	fa818793          	add	a5,gp,-88 # 80001158 <__metal_dt_bus_error_unit_1700000>
    48001b04:	a011                	j	48001b08 <__metal_driver_cpu_buserror+0x22>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:307
	}
	else {
		return NULL;
    48001b06:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:309
	}
}
    48001b08:	853e                	mv	a0,a5
    48001b0a:	6462                	ld	s0,24(sp)
    48001b0c:	6105                	add	sp,sp,32
    48001b0e:	8082                	ret

0000000048001b10 <__metal_driver_cpu_is_worldguard_aware>:
__metal_driver_cpu_is_worldguard_aware():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:312

static __inline__ int __metal_driver_cpu_is_worldguard_aware(struct metal_cpu *cpu)
{
    48001b10:	1101                	add	sp,sp,-32
    48001b12:	ec22                	sd	s0,24(sp)
    48001b14:	1000                	add	s0,sp,32
    48001b16:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:313
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
    48001b1a:	fe843703          	ld	a4,-24(s0)
    48001b1e:	37ffe797          	auipc	a5,0x37ffe
    48001b22:	5f278793          	add	a5,a5,1522 # 80000110 <__metal_dt_cpu_0>
    48001b26:	00f71463          	bne	a4,a5,48001b2e <__metal_driver_cpu_is_worldguard_aware+0x1e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:314
		return 0;
    48001b2a:	4781                	li	a5,0
    48001b2c:	a011                	j	48001b30 <__metal_driver_cpu_is_worldguard_aware+0x20>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:317
	}
	else {
		return 0;
    48001b2e:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:319
	}
}
    48001b30:	853e                	mv	a0,a5
    48001b32:	6462                	ld	s0,24(sp)
    48001b34:	6105                	add	sp,sp,32
    48001b36:	8082                	ret

0000000048001b38 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:26
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid) {
    48001b38:	1101                	add	sp,sp,-32
    48001b3a:	ec22                	sd	s0,24(sp)
    48001b3c:	1000                	add	s0,sp,32
    48001b3e:	87aa                	mv	a5,a0
    48001b40:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:27
    if (hartid < __METAL_DT_MAX_HARTS) {
    48001b44:	fec42783          	lw	a5,-20(s0)
    48001b48:	2781                	sext.w	a5,a5
    48001b4a:	00f04a63          	bgtz	a5,48001b5e <__metal_driver_cpu_get+0x26>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:28
        return &(__metal_cpu_table[hartid]->cpu);
    48001b4e:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48001b52:	fec42783          	lw	a5,-20(s0)
    48001b56:	078e                	sll	a5,a5,0x3
    48001b58:	97ba                	add	a5,a5,a4
    48001b5a:	639c                	ld	a5,0(a5)
    48001b5c:	a011                	j	48001b60 <__metal_driver_cpu_get+0x28>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:30
    }
    return (struct metal_cpu *)NULL;
    48001b5e:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:31
}
    48001b60:	853e                	mv	a0,a5
    48001b62:	6462                	ld	s0,24(sp)
    48001b64:	6105                	add	sp,sp,32
    48001b66:	8082                	ret

0000000048001b68 <__metal_myhart_id>:
__metal_myhart_id():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:33

uintptr_t __metal_myhart_id(void) {
    48001b68:	1101                	add	sp,sp,-32
    48001b6a:	ec22                	sd	s0,24(sp)
    48001b6c:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:35
    uintptr_t myhart;
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
    48001b6e:	f14027f3          	csrr	a5,mhartid
    48001b72:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:36
    return myhart;
    48001b76:	fe843783          	ld	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:37
}
    48001b7a:	853e                	mv	a0,a5
    48001b7c:	6462                	ld	s0,24(sp)
    48001b7e:	6105                	add	sp,sp,32
    48001b80:	8082                	ret

0000000048001b82 <__metal_zero_memory>:
__metal_zero_memory():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:39

void __metal_zero_memory(unsigned char *base, unsigned int size) {
    48001b82:	7179                	add	sp,sp,-48
    48001b84:	f422                	sd	s0,40(sp)
    48001b86:	1800                	add	s0,sp,48
    48001b88:	fca43c23          	sd	a0,-40(s0)
    48001b8c:	87ae                	mv	a5,a1
    48001b8e:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:41
    volatile unsigned char *ptr;
    for (ptr = base; ptr < (base + size); ptr++) {
    48001b92:	fd843783          	ld	a5,-40(s0)
    48001b96:	fef43423          	sd	a5,-24(s0)
    48001b9a:	a811                	j	48001bae <__metal_zero_memory+0x2c>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:42 (discriminator 3)
        *ptr = 0;
    48001b9c:	fe843783          	ld	a5,-24(s0)
    48001ba0:	00078023          	sb	zero,0(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:41 (discriminator 3)
    for (ptr = base; ptr < (base + size); ptr++) {
    48001ba4:	fe843783          	ld	a5,-24(s0)
    48001ba8:	0785                	add	a5,a5,1
    48001baa:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:41 (discriminator 1)
    48001bae:	fd446783          	lwu	a5,-44(s0)
    48001bb2:	fd843703          	ld	a4,-40(s0)
    48001bb6:	97ba                	add	a5,a5,a4
    48001bb8:	fe843703          	ld	a4,-24(s0)
    48001bbc:	fef760e3          	bltu	a4,a5,48001b9c <__metal_zero_memory+0x1a>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:44
    }
}
    48001bc0:	0001                	nop
    48001bc2:	0001                	nop
    48001bc4:	7422                	ld	s0,40(sp)
    48001bc6:	6145                	add	sp,sp,48
    48001bc8:	8082                	ret

0000000048001bca <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_global_enable(void) {
    48001bca:	1101                	add	sp,sp,-32
    48001bcc:	ec22                	sd	s0,24(sp)
    48001bce:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile("csrrs %0, mstatus, %1"
    48001bd0:	47a1                	li	a5,8
    48001bd2:	3007a7f3          	csrrs	a5,mstatus,a5
    48001bd6:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:51
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
    48001bda:	0001                	nop
    48001bdc:	6462                	ld	s0,24(sp)
    48001bde:	6105                	add	sp,sp,32
    48001be0:	8082                	ret

0000000048001be2 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:53

void __metal_interrupt_global_disable(void) {
    48001be2:	1101                	add	sp,sp,-32
    48001be4:	ec22                	sd	s0,24(sp)
    48001be6:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:55
    uintptr_t m;
    __asm__ volatile("csrrc %0, mstatus, %1"
    48001be8:	47a1                	li	a5,8
    48001bea:	3007b7f3          	csrrc	a5,mstatus,a5
    48001bee:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:58
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
    48001bf2:	0001                	nop
    48001bf4:	6462                	ld	s0,24(sp)
    48001bf6:	6105                	add	sp,sp,32
    48001bf8:	8082                	ret

0000000048001bfa <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:60

void __metal_interrupt_software_enable(void) {
    48001bfa:	1101                	add	sp,sp,-32
    48001bfc:	ec22                	sd	s0,24(sp)
    48001bfe:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:62
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    48001c00:	47a1                	li	a5,8
    48001c02:	3047a7f3          	csrrs	a5,mie,a5
    48001c06:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:65
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
    48001c0a:	0001                	nop
    48001c0c:	6462                	ld	s0,24(sp)
    48001c0e:	6105                	add	sp,sp,32
    48001c10:	8082                	ret

0000000048001c12 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:67

void __metal_interrupt_software_disable(void) {
    48001c12:	1101                	add	sp,sp,-32
    48001c14:	ec22                	sd	s0,24(sp)
    48001c16:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:69
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
    48001c18:	47a1                	li	a5,8
    48001c1a:	3047b7f3          	csrrc	a5,mie,a5
    48001c1e:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:72
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
    48001c22:	0001                	nop
    48001c24:	6462                	ld	s0,24(sp)
    48001c26:	6105                	add	sp,sp,32
    48001c28:	8082                	ret

0000000048001c2a <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:74

void __metal_interrupt_timer_enable(void) {
    48001c2a:	1101                	add	sp,sp,-32
    48001c2c:	ec22                	sd	s0,24(sp)
    48001c2e:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:76
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    48001c30:	08000793          	li	a5,128
    48001c34:	3047a7f3          	csrrs	a5,mie,a5
    48001c38:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:79
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
    48001c3c:	0001                	nop
    48001c3e:	6462                	ld	s0,24(sp)
    48001c40:	6105                	add	sp,sp,32
    48001c42:	8082                	ret

0000000048001c44 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:81

void __metal_interrupt_timer_disable(void) {
    48001c44:	1101                	add	sp,sp,-32
    48001c46:	ec22                	sd	s0,24(sp)
    48001c48:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
    48001c4a:	08000793          	li	a5,128
    48001c4e:	3047b7f3          	csrrc	a5,mie,a5
    48001c52:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:86
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
    48001c56:	0001                	nop
    48001c58:	6462                	ld	s0,24(sp)
    48001c5a:	6105                	add	sp,sp,32
    48001c5c:	8082                	ret

0000000048001c5e <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_interrupt_external_enable(void) {
    48001c5e:	1101                	add	sp,sp,-32
    48001c60:	ec22                	sd	s0,24(sp)
    48001c62:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:90
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
    48001c64:	28b01793          	bset	a5,zero,0xb
    48001c68:	3047a7f3          	csrrs	a5,mie,a5
    48001c6c:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:93
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
    48001c70:	0001                	nop
    48001c72:	6462                	ld	s0,24(sp)
    48001c74:	6105                	add	sp,sp,32
    48001c76:	8082                	ret

0000000048001c78 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:95

void __metal_interrupt_external_disable(void) {
    48001c78:	1101                	add	sp,sp,-32
    48001c7a:	ec22                	sd	s0,24(sp)
    48001c7c:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:97
    unsigned long m;
    __asm__ volatile("csrrc %0, mie, %1"
    48001c7e:	28b01793          	bset	a5,zero,0xb
    48001c82:	3047b7f3          	csrrc	a5,mie,a5
    48001c86:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:100
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
    48001c8a:	0001                	nop
    48001c8c:	6462                	ld	s0,24(sp)
    48001c8e:	6105                	add	sp,sp,32
    48001c90:	8082                	ret

0000000048001c92 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:102

void __metal_interrupt_local_enable(int id) {
    48001c92:	7179                	add	sp,sp,-48
    48001c94:	f422                	sd	s0,40(sp)
    48001c96:	1800                	add	s0,sp,48
    48001c98:	87aa                	mv	a5,a0
    48001c9a:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:103
    uintptr_t b = 1 << id;
    48001c9e:	fdc42783          	lw	a5,-36(s0)
    48001ca2:	873e                	mv	a4,a5
    48001ca4:	4785                	li	a5,1
    48001ca6:	00e797bb          	sllw	a5,a5,a4
    48001caa:	2781                	sext.w	a5,a5
    48001cac:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:105
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
    48001cb0:	fe843783          	ld	a5,-24(s0)
    48001cb4:	3047a7f3          	csrrs	a5,mie,a5
    48001cb8:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:106
}
    48001cbc:	0001                	nop
    48001cbe:	7422                	ld	s0,40(sp)
    48001cc0:	6145                	add	sp,sp,48
    48001cc2:	8082                	ret

0000000048001cc4 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:108

void __metal_interrupt_local_disable(int id) {
    48001cc4:	7179                	add	sp,sp,-48
    48001cc6:	f422                	sd	s0,40(sp)
    48001cc8:	1800                	add	s0,sp,48
    48001cca:	87aa                	mv	a5,a0
    48001ccc:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:109
    uintptr_t b = 1 << id;
    48001cd0:	fdc42783          	lw	a5,-36(s0)
    48001cd4:	873e                	mv	a4,a5
    48001cd6:	4785                	li	a5,1
    48001cd8:	00e797bb          	sllw	a5,a5,a4
    48001cdc:	2781                	sext.w	a5,a5
    48001cde:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:111
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
    48001ce2:	fe843783          	ld	a5,-24(s0)
    48001ce6:	3047b7f3          	csrrc	a5,mie,a5
    48001cea:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:112
}
    48001cee:	0001                	nop
    48001cf0:	7422                	ld	s0,40(sp)
    48001cf2:	6145                	add	sp,sp,48
    48001cf4:	8082                	ret

0000000048001cf6 <__metal_default_exception_handler>:
__metal_default_exception_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:114

void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
    48001cf6:	1101                	add	sp,sp,-32
    48001cf8:	ec06                	sd	ra,24(sp)
    48001cfa:	e822                	sd	s0,16(sp)
    48001cfc:	1000                	add	s0,sp,32
    48001cfe:	fea43423          	sd	a0,-24(s0)
    48001d02:	87ae                	mv	a5,a1
    48001d04:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:115
    metal_shutdown(100);
    48001d08:	06400513          	li	a0,100
    48001d0c:	12c040ef          	jal	48005e38 <metal_shutdown>

0000000048001d10 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:118
}

void __metal_default_interrupt_handler(int id, void *priv) {
    48001d10:	1101                	add	sp,sp,-32
    48001d12:	ec06                	sd	ra,24(sp)
    48001d14:	e822                	sd	s0,16(sp)
    48001d16:	1000                	add	s0,sp,32
    48001d18:	87aa                	mv	a5,a0
    48001d1a:	feb43023          	sd	a1,-32(s0)
    48001d1e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:119
    metal_shutdown(200);
    48001d22:	0c800513          	li	a0,200
    48001d26:	112040ef          	jal	48005e38 <metal_shutdown>

0000000048001d2a <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:123
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
    48001d2a:	7169                	add	sp,sp,-304
    48001d2c:	f606                	sd	ra,296(sp)
    48001d2e:	f216                	sd	t0,288(sp)
    48001d30:	ee1a                	sd	t1,280(sp)
    48001d32:	ea1e                	sd	t2,272(sp)
    48001d34:	e622                	sd	s0,264(sp)
    48001d36:	e22a                	sd	a0,256(sp)
    48001d38:	fdae                	sd	a1,248(sp)
    48001d3a:	f9b2                	sd	a2,240(sp)
    48001d3c:	f5b6                	sd	a3,232(sp)
    48001d3e:	f1ba                	sd	a4,224(sp)
    48001d40:	edbe                	sd	a5,216(sp)
    48001d42:	e9c2                	sd	a6,208(sp)
    48001d44:	e5c6                	sd	a7,200(sp)
    48001d46:	e1f2                	sd	t3,192(sp)
    48001d48:	fd76                	sd	t4,184(sp)
    48001d4a:	f97a                	sd	t5,176(sp)
    48001d4c:	f57e                	sd	t6,168(sp)
    48001d4e:	ad02                	fsd	ft0,152(sp)
    48001d50:	a906                	fsd	ft1,144(sp)
    48001d52:	a50a                	fsd	ft2,136(sp)
    48001d54:	a10e                	fsd	ft3,128(sp)
    48001d56:	bc92                	fsd	ft4,120(sp)
    48001d58:	b896                	fsd	ft5,112(sp)
    48001d5a:	b49a                	fsd	ft6,104(sp)
    48001d5c:	b09e                	fsd	ft7,96(sp)
    48001d5e:	acaa                	fsd	fa0,88(sp)
    48001d60:	a8ae                	fsd	fa1,80(sp)
    48001d62:	a4b2                	fsd	fa2,72(sp)
    48001d64:	a0b6                	fsd	fa3,64(sp)
    48001d66:	bc3a                	fsd	fa4,56(sp)
    48001d68:	b83e                	fsd	fa5,48(sp)
    48001d6a:	b442                	fsd	fa6,40(sp)
    48001d6c:	b046                	fsd	fa7,32(sp)
    48001d6e:	ac72                	fsd	ft8,24(sp)
    48001d70:	a876                	fsd	ft9,16(sp)
    48001d72:	a47a                	fsd	ft10,8(sp)
    48001d74:	a07e                	fsd	ft11,0(sp)
    48001d76:	1a00                	add	s0,sp,304
validation-software/freedom-metal/src/drivers/riscv_cpu.c:124
    metal_shutdown(300);
    48001d78:	12c00513          	li	a0,300
    48001d7c:	0bc040ef          	jal	48005e38 <metal_shutdown>

0000000048001d80 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:129
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_software_interrupt_vector_handler(void) {
    48001d80:	714d                	add	sp,sp,-336
    48001d82:	e686                	sd	ra,328(sp)
    48001d84:	e296                	sd	t0,320(sp)
    48001d86:	fe1a                	sd	t1,312(sp)
    48001d88:	fa1e                	sd	t2,304(sp)
    48001d8a:	f622                	sd	s0,296(sp)
    48001d8c:	f22a                	sd	a0,288(sp)
    48001d8e:	ee2e                	sd	a1,280(sp)
    48001d90:	ea32                	sd	a2,272(sp)
    48001d92:	e636                	sd	a3,264(sp)
    48001d94:	e23a                	sd	a4,256(sp)
    48001d96:	fdbe                	sd	a5,248(sp)
    48001d98:	f9c2                	sd	a6,240(sp)
    48001d9a:	f5c6                	sd	a7,232(sp)
    48001d9c:	f1f2                	sd	t3,224(sp)
    48001d9e:	edf6                	sd	t4,216(sp)
    48001da0:	e9fa                	sd	t5,208(sp)
    48001da2:	e5fe                	sd	t6,200(sp)
    48001da4:	bd02                	fsd	ft0,184(sp)
    48001da6:	b906                	fsd	ft1,176(sp)
    48001da8:	b50a                	fsd	ft2,168(sp)
    48001daa:	b10e                	fsd	ft3,160(sp)
    48001dac:	ad12                	fsd	ft4,152(sp)
    48001dae:	a916                	fsd	ft5,144(sp)
    48001db0:	a51a                	fsd	ft6,136(sp)
    48001db2:	a11e                	fsd	ft7,128(sp)
    48001db4:	bcaa                	fsd	fa0,120(sp)
    48001db6:	b8ae                	fsd	fa1,112(sp)
    48001db8:	b4b2                	fsd	fa2,104(sp)
    48001dba:	b0b6                	fsd	fa3,96(sp)
    48001dbc:	acba                	fsd	fa4,88(sp)
    48001dbe:	a8be                	fsd	fa5,80(sp)
    48001dc0:	a4c2                	fsd	fa6,72(sp)
    48001dc2:	a0c6                	fsd	fa7,64(sp)
    48001dc4:	bc72                	fsd	ft8,56(sp)
    48001dc6:	b876                	fsd	ft9,48(sp)
    48001dc8:	b47a                	fsd	ft10,40(sp)
    48001dca:	b07e                	fsd	ft11,32(sp)
    48001dcc:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:130
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
    48001dce:	d9bff0ef          	jal	48001b68 <__metal_myhart_id>
    48001dd2:	87aa                	mv	a5,a0
    48001dd4:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48001dd8:	078e                	sll	a5,a5,0x3
    48001dda:	97ba                	add	a5,a5,a4
    48001ddc:	639c                	ld	a5,0(a5)
    48001dde:	ecf43423          	sd	a5,-312(s0)
    48001de2:	ec843783          	ld	a5,-312(s0)
    48001de6:	c78d                	beqz	a5,48001e10 <metal_software_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:130 (discriminator 1)
    48001de8:	ec843503          	ld	a0,-312(s0)
    48001dec:	ccdff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48001df0:	eca43023          	sd	a0,-320(s0)
    48001df4:	ec043783          	ld	a5,-320(s0)
    48001df8:	1887b783          	ld	a5,392(a5)
    48001dfc:	eaf43c23          	sd	a5,-328(s0)
    48001e00:	ec043783          	ld	a5,-320(s0)
    48001e04:	1787b783          	ld	a5,376(a5)
    48001e08:	eb843583          	ld	a1,-328(s0)
    48001e0c:	450d                	li	a0,3
    48001e0e:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:131
}
    48001e10:	0001                	nop
    48001e12:	60b6                	ld	ra,328(sp)
    48001e14:	6296                	ld	t0,320(sp)
    48001e16:	7372                	ld	t1,312(sp)
    48001e18:	73d2                	ld	t2,304(sp)
    48001e1a:	7432                	ld	s0,296(sp)
    48001e1c:	7512                	ld	a0,288(sp)
    48001e1e:	65f2                	ld	a1,280(sp)
    48001e20:	6652                	ld	a2,272(sp)
    48001e22:	66b2                	ld	a3,264(sp)
    48001e24:	6712                	ld	a4,256(sp)
    48001e26:	77ee                	ld	a5,248(sp)
    48001e28:	784e                	ld	a6,240(sp)
    48001e2a:	78ae                	ld	a7,232(sp)
    48001e2c:	7e0e                	ld	t3,224(sp)
    48001e2e:	6eee                	ld	t4,216(sp)
    48001e30:	6f4e                	ld	t5,208(sp)
    48001e32:	6fae                	ld	t6,200(sp)
    48001e34:	306a                	fld	ft0,184(sp)
    48001e36:	30ca                	fld	ft1,176(sp)
    48001e38:	312a                	fld	ft2,168(sp)
    48001e3a:	318a                	fld	ft3,160(sp)
    48001e3c:	226a                	fld	ft4,152(sp)
    48001e3e:	22ca                	fld	ft5,144(sp)
    48001e40:	232a                	fld	ft6,136(sp)
    48001e42:	238a                	fld	ft7,128(sp)
    48001e44:	3566                	fld	fa0,120(sp)
    48001e46:	35c6                	fld	fa1,112(sp)
    48001e48:	3626                	fld	fa2,104(sp)
    48001e4a:	3686                	fld	fa3,96(sp)
    48001e4c:	2766                	fld	fa4,88(sp)
    48001e4e:	27c6                	fld	fa5,80(sp)
    48001e50:	2826                	fld	fa6,72(sp)
    48001e52:	2886                	fld	fa7,64(sp)
    48001e54:	3e62                	fld	ft8,56(sp)
    48001e56:	3ec2                	fld	ft9,48(sp)
    48001e58:	3f22                	fld	ft10,40(sp)
    48001e5a:	3f82                	fld	ft11,32(sp)
    48001e5c:	6171                	add	sp,sp,336
    48001e5e:	30200073          	mret

0000000048001e62 <__metal_default_sw_handler>:
__metal_default_sw_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:133

void __metal_default_sw_handler(int id, void *priv) {
    48001e62:	7139                	add	sp,sp,-64
    48001e64:	fc06                	sd	ra,56(sp)
    48001e66:	f822                	sd	s0,48(sp)
    48001e68:	0080                	add	s0,sp,64
    48001e6a:	87aa                	mv	a5,a0
    48001e6c:	fcb43023          	sd	a1,-64(s0)
    48001e70:	fcf42623          	sw	a5,-52(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:136
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    48001e74:	cf5ff0ef          	jal	48001b68 <__metal_myhart_id>
    48001e78:	87aa                	mv	a5,a0
    48001e7a:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48001e7e:	078e                	sll	a5,a5,0x3
    48001e80:	97ba                	add	a5,a5,a4
    48001e82:	639c                	ld	a5,0(a5)
    48001e84:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:138

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
    48001e88:	342027f3          	csrr	a5,mcause
    48001e8c:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:139
    if (cpu) {
    48001e90:	fe843783          	ld	a5,-24(s0)
    48001e94:	cb85                	beqz	a5,48001ec4 <__metal_default_sw_handler+0x62>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:141
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    48001e96:	fe843503          	ld	a0,-24(s0)
    48001e9a:	c1fff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48001e9e:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:142
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE](
    48001ea2:	fe043783          	ld	a5,-32(s0)
    48001ea6:	3ff7f793          	and	a5,a5,1023
    48001eaa:	fd843703          	ld	a4,-40(s0)
    48001eae:	0a678793          	add	a5,a5,166
    48001eb2:	078e                	sll	a5,a5,0x3
    48001eb4:	97ba                	add	a5,a5,a4
    48001eb6:	639c                	ld	a5,0(a5)
    48001eb8:	fcc42703          	lw	a4,-52(s0)
    48001ebc:	85ba                	mv	a1,a4
    48001ebe:	fe843503          	ld	a0,-24(s0)
    48001ec2:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:145
            (struct metal_cpu *)cpu, id);
    }
}
    48001ec4:	0001                	nop
    48001ec6:	70e2                	ld	ra,56(sp)
    48001ec8:	7442                	ld	s0,48(sp)
    48001eca:	6121                	add	sp,sp,64
    48001ecc:	8082                	ret

0000000048001ece <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:149

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_timer_interrupt_vector_handler(void) {
    48001ece:	714d                	add	sp,sp,-336
    48001ed0:	e686                	sd	ra,328(sp)
    48001ed2:	e296                	sd	t0,320(sp)
    48001ed4:	fe1a                	sd	t1,312(sp)
    48001ed6:	fa1e                	sd	t2,304(sp)
    48001ed8:	f622                	sd	s0,296(sp)
    48001eda:	f22a                	sd	a0,288(sp)
    48001edc:	ee2e                	sd	a1,280(sp)
    48001ede:	ea32                	sd	a2,272(sp)
    48001ee0:	e636                	sd	a3,264(sp)
    48001ee2:	e23a                	sd	a4,256(sp)
    48001ee4:	fdbe                	sd	a5,248(sp)
    48001ee6:	f9c2                	sd	a6,240(sp)
    48001ee8:	f5c6                	sd	a7,232(sp)
    48001eea:	f1f2                	sd	t3,224(sp)
    48001eec:	edf6                	sd	t4,216(sp)
    48001eee:	e9fa                	sd	t5,208(sp)
    48001ef0:	e5fe                	sd	t6,200(sp)
    48001ef2:	bd02                	fsd	ft0,184(sp)
    48001ef4:	b906                	fsd	ft1,176(sp)
    48001ef6:	b50a                	fsd	ft2,168(sp)
    48001ef8:	b10e                	fsd	ft3,160(sp)
    48001efa:	ad12                	fsd	ft4,152(sp)
    48001efc:	a916                	fsd	ft5,144(sp)
    48001efe:	a51a                	fsd	ft6,136(sp)
    48001f00:	a11e                	fsd	ft7,128(sp)
    48001f02:	bcaa                	fsd	fa0,120(sp)
    48001f04:	b8ae                	fsd	fa1,112(sp)
    48001f06:	b4b2                	fsd	fa2,104(sp)
    48001f08:	b0b6                	fsd	fa3,96(sp)
    48001f0a:	acba                	fsd	fa4,88(sp)
    48001f0c:	a8be                	fsd	fa5,80(sp)
    48001f0e:	a4c2                	fsd	fa6,72(sp)
    48001f10:	a0c6                	fsd	fa7,64(sp)
    48001f12:	bc72                	fsd	ft8,56(sp)
    48001f14:	b876                	fsd	ft9,48(sp)
    48001f16:	b47a                	fsd	ft10,40(sp)
    48001f18:	b07e                	fsd	ft11,32(sp)
    48001f1a:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:150
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
    48001f1c:	c4dff0ef          	jal	48001b68 <__metal_myhart_id>
    48001f20:	87aa                	mv	a5,a0
    48001f22:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48001f26:	078e                	sll	a5,a5,0x3
    48001f28:	97ba                	add	a5,a5,a4
    48001f2a:	639c                	ld	a5,0(a5)
    48001f2c:	ecf43423          	sd	a5,-312(s0)
    48001f30:	ec843783          	ld	a5,-312(s0)
    48001f34:	c78d                	beqz	a5,48001f5e <metal_timer_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:150 (discriminator 1)
    48001f36:	ec843503          	ld	a0,-312(s0)
    48001f3a:	b7fff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48001f3e:	eca43023          	sd	a0,-320(s0)
    48001f42:	ec043783          	ld	a5,-320(s0)
    48001f46:	2087b783          	ld	a5,520(a5)
    48001f4a:	eaf43c23          	sd	a5,-328(s0)
    48001f4e:	ec043783          	ld	a5,-320(s0)
    48001f52:	1f87b783          	ld	a5,504(a5)
    48001f56:	eb843583          	ld	a1,-328(s0)
    48001f5a:	451d                	li	a0,7
    48001f5c:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:151
}
    48001f5e:	0001                	nop
    48001f60:	60b6                	ld	ra,328(sp)
    48001f62:	6296                	ld	t0,320(sp)
    48001f64:	7372                	ld	t1,312(sp)
    48001f66:	73d2                	ld	t2,304(sp)
    48001f68:	7432                	ld	s0,296(sp)
    48001f6a:	7512                	ld	a0,288(sp)
    48001f6c:	65f2                	ld	a1,280(sp)
    48001f6e:	6652                	ld	a2,272(sp)
    48001f70:	66b2                	ld	a3,264(sp)
    48001f72:	6712                	ld	a4,256(sp)
    48001f74:	77ee                	ld	a5,248(sp)
    48001f76:	784e                	ld	a6,240(sp)
    48001f78:	78ae                	ld	a7,232(sp)
    48001f7a:	7e0e                	ld	t3,224(sp)
    48001f7c:	6eee                	ld	t4,216(sp)
    48001f7e:	6f4e                	ld	t5,208(sp)
    48001f80:	6fae                	ld	t6,200(sp)
    48001f82:	306a                	fld	ft0,184(sp)
    48001f84:	30ca                	fld	ft1,176(sp)
    48001f86:	312a                	fld	ft2,168(sp)
    48001f88:	318a                	fld	ft3,160(sp)
    48001f8a:	226a                	fld	ft4,152(sp)
    48001f8c:	22ca                	fld	ft5,144(sp)
    48001f8e:	232a                	fld	ft6,136(sp)
    48001f90:	238a                	fld	ft7,128(sp)
    48001f92:	3566                	fld	fa0,120(sp)
    48001f94:	35c6                	fld	fa1,112(sp)
    48001f96:	3626                	fld	fa2,104(sp)
    48001f98:	3686                	fld	fa3,96(sp)
    48001f9a:	2766                	fld	fa4,88(sp)
    48001f9c:	27c6                	fld	fa5,80(sp)
    48001f9e:	2826                	fld	fa6,72(sp)
    48001fa0:	2886                	fld	fa7,64(sp)
    48001fa2:	3e62                	fld	ft8,56(sp)
    48001fa4:	3ec2                	fld	ft9,48(sp)
    48001fa6:	3f22                	fld	ft10,40(sp)
    48001fa8:	3f82                	fld	ft11,32(sp)
    48001faa:	6171                	add	sp,sp,336
    48001fac:	30200073          	mret

0000000048001fb0 <__metal_default_beu_handler>:
__metal_default_beu_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:153

void __metal_default_beu_handler(int id, void *priv) {}
    48001fb0:	1101                	add	sp,sp,-32
    48001fb2:	ec22                	sd	s0,24(sp)
    48001fb4:	1000                	add	s0,sp,32
    48001fb6:	87aa                	mv	a5,a0
    48001fb8:	feb43023          	sd	a1,-32(s0)
    48001fbc:	fef42623          	sw	a5,-20(s0)
    48001fc0:	0001                	nop
    48001fc2:	6462                	ld	s0,24(sp)
    48001fc4:	6105                	add	sp,sp,32
    48001fc6:	8082                	ret

0000000048001fc8 <__metal_default_timer_handler>:
__metal_default_timer_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:155

void __metal_default_timer_handler(int id, void *priv) {
    48001fc8:	7179                	add	sp,sp,-48
    48001fca:	f406                	sd	ra,40(sp)
    48001fcc:	f022                	sd	s0,32(sp)
    48001fce:	1800                	add	s0,sp,48
    48001fd0:	87aa                	mv	a5,a0
    48001fd2:	fcb43823          	sd	a1,-48(s0)
    48001fd6:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:156
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
    48001fda:	b8fff0ef          	jal	48001b68 <__metal_myhart_id>
    48001fde:	87aa                	mv	a5,a0
    48001fe0:	2781                	sext.w	a5,a5
    48001fe2:	853e                	mv	a0,a5
    48001fe4:	b55ff0ef          	jal	48001b38 <__metal_driver_cpu_get>
    48001fe8:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:157
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
    48001fec:	fe843503          	ld	a0,-24(s0)
    48001ff0:	09f010ef          	jal	4800388e <__metal_driver_cpu_mtime_get>
    48001ff4:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:160

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
    48001ff8:	fe043783          	ld	a5,-32(s0)
    48001ffc:	07a9                	add	a5,a5,10
    48001ffe:	85be                	mv	a1,a5
    48002000:	fe843503          	ld	a0,-24(s0)
    48002004:	113010ef          	jal	48003916 <__metal_driver_cpu_mtimecmp_set>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:161
}
    48002008:	0001                	nop
    4800200a:	70a2                	ld	ra,40(sp)
    4800200c:	7402                	ld	s0,32(sp)
    4800200e:	6145                	add	sp,sp,48
    48002010:	8082                	ret

0000000048002012 <metal_external_interrupt_vector_handler>:
metal_external_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:165

/* The metal_external_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_external_interrupt_vector_handler(void) {
    48002012:	714d                	add	sp,sp,-336
    48002014:	e686                	sd	ra,328(sp)
    48002016:	e296                	sd	t0,320(sp)
    48002018:	fe1a                	sd	t1,312(sp)
    4800201a:	fa1e                	sd	t2,304(sp)
    4800201c:	f622                	sd	s0,296(sp)
    4800201e:	f22a                	sd	a0,288(sp)
    48002020:	ee2e                	sd	a1,280(sp)
    48002022:	ea32                	sd	a2,272(sp)
    48002024:	e636                	sd	a3,264(sp)
    48002026:	e23a                	sd	a4,256(sp)
    48002028:	fdbe                	sd	a5,248(sp)
    4800202a:	f9c2                	sd	a6,240(sp)
    4800202c:	f5c6                	sd	a7,232(sp)
    4800202e:	f1f2                	sd	t3,224(sp)
    48002030:	edf6                	sd	t4,216(sp)
    48002032:	e9fa                	sd	t5,208(sp)
    48002034:	e5fe                	sd	t6,200(sp)
    48002036:	bd02                	fsd	ft0,184(sp)
    48002038:	b906                	fsd	ft1,176(sp)
    4800203a:	b50a                	fsd	ft2,168(sp)
    4800203c:	b10e                	fsd	ft3,160(sp)
    4800203e:	ad12                	fsd	ft4,152(sp)
    48002040:	a916                	fsd	ft5,144(sp)
    48002042:	a51a                	fsd	ft6,136(sp)
    48002044:	a11e                	fsd	ft7,128(sp)
    48002046:	bcaa                	fsd	fa0,120(sp)
    48002048:	b8ae                	fsd	fa1,112(sp)
    4800204a:	b4b2                	fsd	fa2,104(sp)
    4800204c:	b0b6                	fsd	fa3,96(sp)
    4800204e:	acba                	fsd	fa4,88(sp)
    48002050:	a8be                	fsd	fa5,80(sp)
    48002052:	a4c2                	fsd	fa6,72(sp)
    48002054:	a0c6                	fsd	fa7,64(sp)
    48002056:	bc72                	fsd	ft8,56(sp)
    48002058:	b876                	fsd	ft9,48(sp)
    4800205a:	b47a                	fsd	ft10,40(sp)
    4800205c:	b07e                	fsd	ft11,32(sp)
    4800205e:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:166
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_EXT);
    48002060:	b09ff0ef          	jal	48001b68 <__metal_myhart_id>
    48002064:	87aa                	mv	a5,a0
    48002066:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    4800206a:	078e                	sll	a5,a5,0x3
    4800206c:	97ba                	add	a5,a5,a4
    4800206e:	639c                	ld	a5,0(a5)
    48002070:	ecf43423          	sd	a5,-312(s0)
    48002074:	ec843783          	ld	a5,-312(s0)
    48002078:	c78d                	beqz	a5,480020a2 <metal_external_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:166 (discriminator 1)
    4800207a:	ec843503          	ld	a0,-312(s0)
    4800207e:	a3bff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002082:	eca43023          	sd	a0,-320(s0)
    48002086:	ec043783          	ld	a5,-320(s0)
    4800208a:	2887b783          	ld	a5,648(a5)
    4800208e:	eaf43c23          	sd	a5,-328(s0)
    48002092:	ec043783          	ld	a5,-320(s0)
    48002096:	2787b783          	ld	a5,632(a5)
    4800209a:	eb843583          	ld	a1,-328(s0)
    4800209e:	452d                	li	a0,11
    480020a0:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:167
}
    480020a2:	0001                	nop
    480020a4:	60b6                	ld	ra,328(sp)
    480020a6:	6296                	ld	t0,320(sp)
    480020a8:	7372                	ld	t1,312(sp)
    480020aa:	73d2                	ld	t2,304(sp)
    480020ac:	7432                	ld	s0,296(sp)
    480020ae:	7512                	ld	a0,288(sp)
    480020b0:	65f2                	ld	a1,280(sp)
    480020b2:	6652                	ld	a2,272(sp)
    480020b4:	66b2                	ld	a3,264(sp)
    480020b6:	6712                	ld	a4,256(sp)
    480020b8:	77ee                	ld	a5,248(sp)
    480020ba:	784e                	ld	a6,240(sp)
    480020bc:	78ae                	ld	a7,232(sp)
    480020be:	7e0e                	ld	t3,224(sp)
    480020c0:	6eee                	ld	t4,216(sp)
    480020c2:	6f4e                	ld	t5,208(sp)
    480020c4:	6fae                	ld	t6,200(sp)
    480020c6:	306a                	fld	ft0,184(sp)
    480020c8:	30ca                	fld	ft1,176(sp)
    480020ca:	312a                	fld	ft2,168(sp)
    480020cc:	318a                	fld	ft3,160(sp)
    480020ce:	226a                	fld	ft4,152(sp)
    480020d0:	22ca                	fld	ft5,144(sp)
    480020d2:	232a                	fld	ft6,136(sp)
    480020d4:	238a                	fld	ft7,128(sp)
    480020d6:	3566                	fld	fa0,120(sp)
    480020d8:	35c6                	fld	fa1,112(sp)
    480020da:	3626                	fld	fa2,104(sp)
    480020dc:	3686                	fld	fa3,96(sp)
    480020de:	2766                	fld	fa4,88(sp)
    480020e0:	27c6                	fld	fa5,80(sp)
    480020e2:	2826                	fld	fa6,72(sp)
    480020e4:	2886                	fld	fa7,64(sp)
    480020e6:	3e62                	fld	ft8,56(sp)
    480020e8:	3ec2                	fld	ft9,48(sp)
    480020ea:	3f22                	fld	ft10,40(sp)
    480020ec:	3f82                	fld	ft11,32(sp)
    480020ee:	6171                	add	sp,sp,336
    480020f0:	30200073          	mret
	...

0000000048002100 <__metal_exception_handler>:
__metal_exception_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:170

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler(void) {
    48002100:	7109                	add	sp,sp,-384
    48002102:	fe86                	sd	ra,376(sp)
    48002104:	fa96                	sd	t0,368(sp)
    48002106:	f69a                	sd	t1,360(sp)
    48002108:	f29e                	sd	t2,352(sp)
    4800210a:	eea2                	sd	s0,344(sp)
    4800210c:	eaaa                	sd	a0,336(sp)
    4800210e:	e6ae                	sd	a1,328(sp)
    48002110:	e2b2                	sd	a2,320(sp)
    48002112:	fe36                	sd	a3,312(sp)
    48002114:	fa3a                	sd	a4,304(sp)
    48002116:	f63e                	sd	a5,296(sp)
    48002118:	f242                	sd	a6,288(sp)
    4800211a:	ee46                	sd	a7,280(sp)
    4800211c:	ea72                	sd	t3,272(sp)
    4800211e:	e676                	sd	t4,264(sp)
    48002120:	e27a                	sd	t5,256(sp)
    48002122:	fdfe                	sd	t6,248(sp)
    48002124:	b582                	fsd	ft0,232(sp)
    48002126:	b186                	fsd	ft1,224(sp)
    48002128:	ad8a                	fsd	ft2,216(sp)
    4800212a:	a98e                	fsd	ft3,208(sp)
    4800212c:	a592                	fsd	ft4,200(sp)
    4800212e:	a196                	fsd	ft5,192(sp)
    48002130:	bd1a                	fsd	ft6,184(sp)
    48002132:	b91e                	fsd	ft7,176(sp)
    48002134:	b52a                	fsd	fa0,168(sp)
    48002136:	b12e                	fsd	fa1,160(sp)
    48002138:	ad32                	fsd	fa2,152(sp)
    4800213a:	a936                	fsd	fa3,144(sp)
    4800213c:	a53a                	fsd	fa4,136(sp)
    4800213e:	a13e                	fsd	fa5,128(sp)
    48002140:	bcc2                	fsd	fa6,120(sp)
    48002142:	b8c6                	fsd	fa7,112(sp)
    48002144:	b4f2                	fsd	ft8,104(sp)
    48002146:	b0f6                	fsd	ft9,96(sp)
    48002148:	acfa                	fsd	ft10,88(sp)
    4800214a:	a8fe                	fsd	ft11,80(sp)
    4800214c:	0300                	add	s0,sp,384
validation-software/freedom-metal/src/drivers/riscv_cpu.c:175
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
    4800214e:	a1bff0ef          	jal	48001b68 <__metal_myhart_id>
    48002152:	87aa                	mv	a5,a0
    48002154:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002158:	078e                	sll	a5,a5,0x3
    4800215a:	97ba                	add	a5,a5,a4
    4800215c:	639c                	ld	a5,0(a5)
    4800215e:	ecf43423          	sd	a5,-312(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:177

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
    48002162:	342027f3          	csrr	a5,mcause
    48002166:	ecf43023          	sd	a5,-320(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:178
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
    4800216a:	341027f3          	csrr	a5,mepc
    4800216e:	eaf43c23          	sd	a5,-328(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:179
    __asm__ volatile("csrr %0, mtval" : "=r"(mtval));
    48002172:	343027f3          	csrr	a5,mtval
    48002176:	eaf43823          	sd	a5,-336(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:180
    __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
    4800217a:	305027f3          	csrr	a5,mtvec
    4800217e:	eaf43423          	sd	a5,-344(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:182

    if (cpu) {
    48002182:	ec843783          	ld	a5,-312(s0)
    48002186:	0e078f63          	beqz	a5,48002284 <__metal_exception_handler+0x184>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:184
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
    4800218a:	ec843503          	ld	a0,-312(s0)
    4800218e:	92bff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002192:	eaa43023          	sd	a0,-352(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:185
        id = mcause & METAL_MCAUSE_CAUSE;
    48002196:	ec043783          	ld	a5,-320(s0)
    4800219a:	2781                	sext.w	a5,a5
    4800219c:	3ff7f793          	and	a5,a5,1023
    480021a0:	e8f42e23          	sw	a5,-356(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:186
        if (mcause & METAL_MCAUSE_INTR) {
    480021a4:	ec043783          	ld	a5,-320(s0)
    480021a8:	0a07df63          	bgez	a5,48002266 <__metal_exception_handler+0x166>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:187
            if (id == METAL_INTERRUPT_ID_BEU) {
    480021ac:	e9c42783          	lw	a5,-356(s0)
    480021b0:	0007871b          	sext.w	a4,a5
    480021b4:	08000793          	li	a5,128
    480021b8:	02f71363          	bne	a4,a5,480021de <__metal_exception_handler+0xde>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:188
                priv = intc->metal_int_beu.exint_data;
    480021bc:	ea043783          	ld	a5,-352(s0)
    480021c0:	5287b783          	ld	a5,1320(a5)
    480021c4:	e8f43423          	sd	a5,-376(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:189
                intc->metal_int_beu.handler(id, priv);
    480021c8:	ea043783          	ld	a5,-352(s0)
    480021cc:	5187b783          	ld	a5,1304(a5)
    480021d0:	e9c42703          	lw	a4,-356(s0)
    480021d4:	e8843583          	ld	a1,-376(s0)
    480021d8:	853a                	mv	a0,a4
    480021da:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:190
                return;
    480021dc:	a065                	j	48002284 <__metal_exception_handler+0x184>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:192
            }
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    480021de:	e9c42783          	lw	a5,-356(s0)
    480021e2:	0007871b          	sext.w	a4,a5
    480021e6:	47ad                	li	a5,11
    480021e8:	00e7d763          	bge	a5,a4,480021f6 <__metal_exception_handler+0xf6>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:193 (discriminator 1)
                ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
    480021ec:	ea843783          	ld	a5,-344(s0)
    480021f0:	03f7f793          	and	a5,a5,63
validation-software/freedom-metal/src/drivers/riscv_cpu.c:192 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
    480021f4:	eb95                	bnez	a5,48002228 <__metal_exception_handler+0x128>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:194
                priv = intc->metal_int_table[id].exint_data;
    480021f6:	ea043703          	ld	a4,-352(s0)
    480021fa:	e9c42783          	lw	a5,-356(s0)
    480021fe:	07a5                	add	a5,a5,9
    48002200:	0796                	sll	a5,a5,0x5
    48002202:	97ba                	add	a5,a5,a4
    48002204:	679c                	ld	a5,8(a5)
    48002206:	e8f43423          	sd	a5,-376(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:195
                intc->metal_int_table[id].handler(id, priv);
    4800220a:	ea043703          	ld	a4,-352(s0)
    4800220e:	e9c42783          	lw	a5,-356(s0)
    48002212:	0796                	sll	a5,a5,0x5
    48002214:	97ba                	add	a5,a5,a4
    48002216:	1187b783          	ld	a5,280(a5)
    4800221a:	e9c42703          	lw	a4,-356(s0)
    4800221e:	e8843583          	ld	a1,-376(s0)
    48002222:	853a                	mv	a0,a4
    48002224:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:196
                return;
    48002226:	a8b9                	j	48002284 <__metal_exception_handler+0x184>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:198
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
    48002228:	ea843783          	ld	a5,-344(s0)
    4800222c:	03f7f713          	and	a4,a5,63
    48002230:	4789                	li	a5,2
    48002232:	04f71963          	bne	a4,a5,48002284 <__metal_exception_handler+0x184>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:202
                uintptr_t mtvt;
                metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
    48002236:	307027f3          	csrr	a5,mtvt
    4800223a:	e8f43823          	sd	a5,-368(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:203
                priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    4800223e:	ea043783          	ld	a5,-352(s0)
    48002242:	1807b783          	ld	a5,384(a5)
    48002246:	e8f43423          	sd	a5,-376(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:204
                mtvt_handler = (metal_interrupt_handler_t) * (uintptr_t *)mtvt;
    4800224a:	e9043783          	ld	a5,-368(s0)
    4800224e:	639c                	ld	a5,0(a5)
    48002250:	e8f43023          	sd	a5,-384(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:205
                mtvt_handler(id, priv);
    48002254:	e9c42703          	lw	a4,-356(s0)
    48002258:	e8043783          	ld	a5,-384(s0)
    4800225c:	e8843583          	ld	a1,-376(s0)
    48002260:	853a                	mv	a0,a4
    48002262:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:206
                return;
    48002264:	a005                	j	48002284 <__metal_exception_handler+0x184>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:209
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
    48002266:	ea043703          	ld	a4,-352(s0)
    4800226a:	e9c42783          	lw	a5,-356(s0)
    4800226e:	0a678793          	add	a5,a5,166
    48002272:	078e                	sll	a5,a5,0x3
    48002274:	97ba                	add	a5,a5,a4
    48002276:	639c                	ld	a5,0(a5)
    48002278:	e9c42703          	lw	a4,-356(s0)
    4800227c:	85ba                	mv	a1,a4
    4800227e:	ec843503          	ld	a0,-312(s0)
    48002282:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:212
        }
    }
}
    48002284:	70f6                	ld	ra,376(sp)
    48002286:	72d6                	ld	t0,368(sp)
    48002288:	7336                	ld	t1,360(sp)
    4800228a:	7396                	ld	t2,352(sp)
    4800228c:	6476                	ld	s0,344(sp)
    4800228e:	6556                	ld	a0,336(sp)
    48002290:	65b6                	ld	a1,328(sp)
    48002292:	6616                	ld	a2,320(sp)
    48002294:	76f2                	ld	a3,312(sp)
    48002296:	7752                	ld	a4,304(sp)
    48002298:	77b2                	ld	a5,296(sp)
    4800229a:	7812                	ld	a6,288(sp)
    4800229c:	68f2                	ld	a7,280(sp)
    4800229e:	6e52                	ld	t3,272(sp)
    480022a0:	6eb2                	ld	t4,264(sp)
    480022a2:	6f12                	ld	t5,256(sp)
    480022a4:	7fee                	ld	t6,248(sp)
    480022a6:	302e                	fld	ft0,232(sp)
    480022a8:	308e                	fld	ft1,224(sp)
    480022aa:	216e                	fld	ft2,216(sp)
    480022ac:	21ce                	fld	ft3,208(sp)
    480022ae:	222e                	fld	ft4,200(sp)
    480022b0:	228e                	fld	ft5,192(sp)
    480022b2:	336a                	fld	ft6,184(sp)
    480022b4:	33ca                	fld	ft7,176(sp)
    480022b6:	352a                	fld	fa0,168(sp)
    480022b8:	358a                	fld	fa1,160(sp)
    480022ba:	266a                	fld	fa2,152(sp)
    480022bc:	26ca                	fld	fa3,144(sp)
    480022be:	272a                	fld	fa4,136(sp)
    480022c0:	278a                	fld	fa5,128(sp)
    480022c2:	3866                	fld	fa6,120(sp)
    480022c4:	38c6                	fld	fa7,112(sp)
    480022c6:	3e26                	fld	ft8,104(sp)
    480022c8:	3e86                	fld	ft9,96(sp)
    480022ca:	2f66                	fld	ft10,88(sp)
    480022cc:	2fc6                	fld	ft11,80(sp)
    480022ce:	6119                	add	sp,sp,384
    480022d0:	30200073          	mret
	...

00000000480022f6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:215

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler(void) {
    480022f6:	714d                	add	sp,sp,-336
    480022f8:	e686                	sd	ra,328(sp)
    480022fa:	e296                	sd	t0,320(sp)
    480022fc:	fe1a                	sd	t1,312(sp)
    480022fe:	fa1e                	sd	t2,304(sp)
    48002300:	f622                	sd	s0,296(sp)
    48002302:	f22a                	sd	a0,288(sp)
    48002304:	ee2e                	sd	a1,280(sp)
    48002306:	ea32                	sd	a2,272(sp)
    48002308:	e636                	sd	a3,264(sp)
    4800230a:	e23a                	sd	a4,256(sp)
    4800230c:	fdbe                	sd	a5,248(sp)
    4800230e:	f9c2                	sd	a6,240(sp)
    48002310:	f5c6                	sd	a7,232(sp)
    48002312:	f1f2                	sd	t3,224(sp)
    48002314:	edf6                	sd	t4,216(sp)
    48002316:	e9fa                	sd	t5,208(sp)
    48002318:	e5fe                	sd	t6,200(sp)
    4800231a:	bd02                	fsd	ft0,184(sp)
    4800231c:	b906                	fsd	ft1,176(sp)
    4800231e:	b50a                	fsd	ft2,168(sp)
    48002320:	b10e                	fsd	ft3,160(sp)
    48002322:	ad12                	fsd	ft4,152(sp)
    48002324:	a916                	fsd	ft5,144(sp)
    48002326:	a51a                	fsd	ft6,136(sp)
    48002328:	a11e                	fsd	ft7,128(sp)
    4800232a:	bcaa                	fsd	fa0,120(sp)
    4800232c:	b8ae                	fsd	fa1,112(sp)
    4800232e:	b4b2                	fsd	fa2,104(sp)
    48002330:	b0b6                	fsd	fa3,96(sp)
    48002332:	acba                	fsd	fa4,88(sp)
    48002334:	a8be                	fsd	fa5,80(sp)
    48002336:	a4c2                	fsd	fa6,72(sp)
    48002338:	a0c6                	fsd	fa7,64(sp)
    4800233a:	bc72                	fsd	ft8,56(sp)
    4800233c:	b876                	fsd	ft9,48(sp)
    4800233e:	b47a                	fsd	ft10,40(sp)
    48002340:	b07e                	fsd	ft11,32(sp)
    48002342:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:216
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
    48002344:	825ff0ef          	jal	48001b68 <__metal_myhart_id>
    48002348:	87aa                	mv	a5,a0
    4800234a:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    4800234e:	078e                	sll	a5,a5,0x3
    48002350:	97ba                	add	a5,a5,a4
    48002352:	639c                	ld	a5,0(a5)
    48002354:	ecf43423          	sd	a5,-312(s0)
    48002358:	ec843783          	ld	a5,-312(s0)
    4800235c:	c78d                	beqz	a5,48002386 <metal_lc0_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:216 (discriminator 1)
    4800235e:	ec843503          	ld	a0,-312(s0)
    48002362:	f56ff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002366:	eca43023          	sd	a0,-320(s0)
    4800236a:	ec043783          	ld	a5,-320(s0)
    4800236e:	3287b783          	ld	a5,808(a5)
    48002372:	eaf43c23          	sd	a5,-328(s0)
    48002376:	ec043783          	ld	a5,-320(s0)
    4800237a:	3187b783          	ld	a5,792(a5)
    4800237e:	eb843583          	ld	a1,-328(s0)
    48002382:	4541                	li	a0,16
    48002384:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:217
}
    48002386:	0001                	nop
    48002388:	60b6                	ld	ra,328(sp)
    4800238a:	6296                	ld	t0,320(sp)
    4800238c:	7372                	ld	t1,312(sp)
    4800238e:	73d2                	ld	t2,304(sp)
    48002390:	7432                	ld	s0,296(sp)
    48002392:	7512                	ld	a0,288(sp)
    48002394:	65f2                	ld	a1,280(sp)
    48002396:	6652                	ld	a2,272(sp)
    48002398:	66b2                	ld	a3,264(sp)
    4800239a:	6712                	ld	a4,256(sp)
    4800239c:	77ee                	ld	a5,248(sp)
    4800239e:	784e                	ld	a6,240(sp)
    480023a0:	78ae                	ld	a7,232(sp)
    480023a2:	7e0e                	ld	t3,224(sp)
    480023a4:	6eee                	ld	t4,216(sp)
    480023a6:	6f4e                	ld	t5,208(sp)
    480023a8:	6fae                	ld	t6,200(sp)
    480023aa:	306a                	fld	ft0,184(sp)
    480023ac:	30ca                	fld	ft1,176(sp)
    480023ae:	312a                	fld	ft2,168(sp)
    480023b0:	318a                	fld	ft3,160(sp)
    480023b2:	226a                	fld	ft4,152(sp)
    480023b4:	22ca                	fld	ft5,144(sp)
    480023b6:	232a                	fld	ft6,136(sp)
    480023b8:	238a                	fld	ft7,128(sp)
    480023ba:	3566                	fld	fa0,120(sp)
    480023bc:	35c6                	fld	fa1,112(sp)
    480023be:	3626                	fld	fa2,104(sp)
    480023c0:	3686                	fld	fa3,96(sp)
    480023c2:	2766                	fld	fa4,88(sp)
    480023c4:	27c6                	fld	fa5,80(sp)
    480023c6:	2826                	fld	fa6,72(sp)
    480023c8:	2886                	fld	fa7,64(sp)
    480023ca:	3e62                	fld	ft8,56(sp)
    480023cc:	3ec2                	fld	ft9,48(sp)
    480023ce:	3f22                	fld	ft10,40(sp)
    480023d0:	3f82                	fld	ft11,32(sp)
    480023d2:	6171                	add	sp,sp,336
    480023d4:	30200073          	mret

00000000480023d8 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:220

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler(void) {
    480023d8:	714d                	add	sp,sp,-336
    480023da:	e686                	sd	ra,328(sp)
    480023dc:	e296                	sd	t0,320(sp)
    480023de:	fe1a                	sd	t1,312(sp)
    480023e0:	fa1e                	sd	t2,304(sp)
    480023e2:	f622                	sd	s0,296(sp)
    480023e4:	f22a                	sd	a0,288(sp)
    480023e6:	ee2e                	sd	a1,280(sp)
    480023e8:	ea32                	sd	a2,272(sp)
    480023ea:	e636                	sd	a3,264(sp)
    480023ec:	e23a                	sd	a4,256(sp)
    480023ee:	fdbe                	sd	a5,248(sp)
    480023f0:	f9c2                	sd	a6,240(sp)
    480023f2:	f5c6                	sd	a7,232(sp)
    480023f4:	f1f2                	sd	t3,224(sp)
    480023f6:	edf6                	sd	t4,216(sp)
    480023f8:	e9fa                	sd	t5,208(sp)
    480023fa:	e5fe                	sd	t6,200(sp)
    480023fc:	bd02                	fsd	ft0,184(sp)
    480023fe:	b906                	fsd	ft1,176(sp)
    48002400:	b50a                	fsd	ft2,168(sp)
    48002402:	b10e                	fsd	ft3,160(sp)
    48002404:	ad12                	fsd	ft4,152(sp)
    48002406:	a916                	fsd	ft5,144(sp)
    48002408:	a51a                	fsd	ft6,136(sp)
    4800240a:	a11e                	fsd	ft7,128(sp)
    4800240c:	bcaa                	fsd	fa0,120(sp)
    4800240e:	b8ae                	fsd	fa1,112(sp)
    48002410:	b4b2                	fsd	fa2,104(sp)
    48002412:	b0b6                	fsd	fa3,96(sp)
    48002414:	acba                	fsd	fa4,88(sp)
    48002416:	a8be                	fsd	fa5,80(sp)
    48002418:	a4c2                	fsd	fa6,72(sp)
    4800241a:	a0c6                	fsd	fa7,64(sp)
    4800241c:	bc72                	fsd	ft8,56(sp)
    4800241e:	b876                	fsd	ft9,48(sp)
    48002420:	b47a                	fsd	ft10,40(sp)
    48002422:	b07e                	fsd	ft11,32(sp)
    48002424:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:221
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
    48002426:	f42ff0ef          	jal	48001b68 <__metal_myhart_id>
    4800242a:	87aa                	mv	a5,a0
    4800242c:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002430:	078e                	sll	a5,a5,0x3
    48002432:	97ba                	add	a5,a5,a4
    48002434:	639c                	ld	a5,0(a5)
    48002436:	ecf43423          	sd	a5,-312(s0)
    4800243a:	ec843783          	ld	a5,-312(s0)
    4800243e:	c78d                	beqz	a5,48002468 <metal_lc1_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:221 (discriminator 1)
    48002440:	ec843503          	ld	a0,-312(s0)
    48002444:	e74ff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002448:	eca43023          	sd	a0,-320(s0)
    4800244c:	ec043783          	ld	a5,-320(s0)
    48002450:	3487b783          	ld	a5,840(a5)
    48002454:	eaf43c23          	sd	a5,-328(s0)
    48002458:	ec043783          	ld	a5,-320(s0)
    4800245c:	3387b783          	ld	a5,824(a5)
    48002460:	eb843583          	ld	a1,-328(s0)
    48002464:	4545                	li	a0,17
    48002466:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:222
}
    48002468:	0001                	nop
    4800246a:	60b6                	ld	ra,328(sp)
    4800246c:	6296                	ld	t0,320(sp)
    4800246e:	7372                	ld	t1,312(sp)
    48002470:	73d2                	ld	t2,304(sp)
    48002472:	7432                	ld	s0,296(sp)
    48002474:	7512                	ld	a0,288(sp)
    48002476:	65f2                	ld	a1,280(sp)
    48002478:	6652                	ld	a2,272(sp)
    4800247a:	66b2                	ld	a3,264(sp)
    4800247c:	6712                	ld	a4,256(sp)
    4800247e:	77ee                	ld	a5,248(sp)
    48002480:	784e                	ld	a6,240(sp)
    48002482:	78ae                	ld	a7,232(sp)
    48002484:	7e0e                	ld	t3,224(sp)
    48002486:	6eee                	ld	t4,216(sp)
    48002488:	6f4e                	ld	t5,208(sp)
    4800248a:	6fae                	ld	t6,200(sp)
    4800248c:	306a                	fld	ft0,184(sp)
    4800248e:	30ca                	fld	ft1,176(sp)
    48002490:	312a                	fld	ft2,168(sp)
    48002492:	318a                	fld	ft3,160(sp)
    48002494:	226a                	fld	ft4,152(sp)
    48002496:	22ca                	fld	ft5,144(sp)
    48002498:	232a                	fld	ft6,136(sp)
    4800249a:	238a                	fld	ft7,128(sp)
    4800249c:	3566                	fld	fa0,120(sp)
    4800249e:	35c6                	fld	fa1,112(sp)
    480024a0:	3626                	fld	fa2,104(sp)
    480024a2:	3686                	fld	fa3,96(sp)
    480024a4:	2766                	fld	fa4,88(sp)
    480024a6:	27c6                	fld	fa5,80(sp)
    480024a8:	2826                	fld	fa6,72(sp)
    480024aa:	2886                	fld	fa7,64(sp)
    480024ac:	3e62                	fld	ft8,56(sp)
    480024ae:	3ec2                	fld	ft9,48(sp)
    480024b0:	3f22                	fld	ft10,40(sp)
    480024b2:	3f82                	fld	ft11,32(sp)
    480024b4:	6171                	add	sp,sp,336
    480024b6:	30200073          	mret

00000000480024ba <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:225

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler(void) {
    480024ba:	714d                	add	sp,sp,-336
    480024bc:	e686                	sd	ra,328(sp)
    480024be:	e296                	sd	t0,320(sp)
    480024c0:	fe1a                	sd	t1,312(sp)
    480024c2:	fa1e                	sd	t2,304(sp)
    480024c4:	f622                	sd	s0,296(sp)
    480024c6:	f22a                	sd	a0,288(sp)
    480024c8:	ee2e                	sd	a1,280(sp)
    480024ca:	ea32                	sd	a2,272(sp)
    480024cc:	e636                	sd	a3,264(sp)
    480024ce:	e23a                	sd	a4,256(sp)
    480024d0:	fdbe                	sd	a5,248(sp)
    480024d2:	f9c2                	sd	a6,240(sp)
    480024d4:	f5c6                	sd	a7,232(sp)
    480024d6:	f1f2                	sd	t3,224(sp)
    480024d8:	edf6                	sd	t4,216(sp)
    480024da:	e9fa                	sd	t5,208(sp)
    480024dc:	e5fe                	sd	t6,200(sp)
    480024de:	bd02                	fsd	ft0,184(sp)
    480024e0:	b906                	fsd	ft1,176(sp)
    480024e2:	b50a                	fsd	ft2,168(sp)
    480024e4:	b10e                	fsd	ft3,160(sp)
    480024e6:	ad12                	fsd	ft4,152(sp)
    480024e8:	a916                	fsd	ft5,144(sp)
    480024ea:	a51a                	fsd	ft6,136(sp)
    480024ec:	a11e                	fsd	ft7,128(sp)
    480024ee:	bcaa                	fsd	fa0,120(sp)
    480024f0:	b8ae                	fsd	fa1,112(sp)
    480024f2:	b4b2                	fsd	fa2,104(sp)
    480024f4:	b0b6                	fsd	fa3,96(sp)
    480024f6:	acba                	fsd	fa4,88(sp)
    480024f8:	a8be                	fsd	fa5,80(sp)
    480024fa:	a4c2                	fsd	fa6,72(sp)
    480024fc:	a0c6                	fsd	fa7,64(sp)
    480024fe:	bc72                	fsd	ft8,56(sp)
    48002500:	b876                	fsd	ft9,48(sp)
    48002502:	b47a                	fsd	ft10,40(sp)
    48002504:	b07e                	fsd	ft11,32(sp)
    48002506:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:226
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
    48002508:	e60ff0ef          	jal	48001b68 <__metal_myhart_id>
    4800250c:	87aa                	mv	a5,a0
    4800250e:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002512:	078e                	sll	a5,a5,0x3
    48002514:	97ba                	add	a5,a5,a4
    48002516:	639c                	ld	a5,0(a5)
    48002518:	ecf43423          	sd	a5,-312(s0)
    4800251c:	ec843783          	ld	a5,-312(s0)
    48002520:	c78d                	beqz	a5,4800254a <metal_lc2_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:226 (discriminator 1)
    48002522:	ec843503          	ld	a0,-312(s0)
    48002526:	d92ff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    4800252a:	eca43023          	sd	a0,-320(s0)
    4800252e:	ec043783          	ld	a5,-320(s0)
    48002532:	3687b783          	ld	a5,872(a5)
    48002536:	eaf43c23          	sd	a5,-328(s0)
    4800253a:	ec043783          	ld	a5,-320(s0)
    4800253e:	3587b783          	ld	a5,856(a5)
    48002542:	eb843583          	ld	a1,-328(s0)
    48002546:	4549                	li	a0,18
    48002548:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:227
}
    4800254a:	0001                	nop
    4800254c:	60b6                	ld	ra,328(sp)
    4800254e:	6296                	ld	t0,320(sp)
    48002550:	7372                	ld	t1,312(sp)
    48002552:	73d2                	ld	t2,304(sp)
    48002554:	7432                	ld	s0,296(sp)
    48002556:	7512                	ld	a0,288(sp)
    48002558:	65f2                	ld	a1,280(sp)
    4800255a:	6652                	ld	a2,272(sp)
    4800255c:	66b2                	ld	a3,264(sp)
    4800255e:	6712                	ld	a4,256(sp)
    48002560:	77ee                	ld	a5,248(sp)
    48002562:	784e                	ld	a6,240(sp)
    48002564:	78ae                	ld	a7,232(sp)
    48002566:	7e0e                	ld	t3,224(sp)
    48002568:	6eee                	ld	t4,216(sp)
    4800256a:	6f4e                	ld	t5,208(sp)
    4800256c:	6fae                	ld	t6,200(sp)
    4800256e:	306a                	fld	ft0,184(sp)
    48002570:	30ca                	fld	ft1,176(sp)
    48002572:	312a                	fld	ft2,168(sp)
    48002574:	318a                	fld	ft3,160(sp)
    48002576:	226a                	fld	ft4,152(sp)
    48002578:	22ca                	fld	ft5,144(sp)
    4800257a:	232a                	fld	ft6,136(sp)
    4800257c:	238a                	fld	ft7,128(sp)
    4800257e:	3566                	fld	fa0,120(sp)
    48002580:	35c6                	fld	fa1,112(sp)
    48002582:	3626                	fld	fa2,104(sp)
    48002584:	3686                	fld	fa3,96(sp)
    48002586:	2766                	fld	fa4,88(sp)
    48002588:	27c6                	fld	fa5,80(sp)
    4800258a:	2826                	fld	fa6,72(sp)
    4800258c:	2886                	fld	fa7,64(sp)
    4800258e:	3e62                	fld	ft8,56(sp)
    48002590:	3ec2                	fld	ft9,48(sp)
    48002592:	3f22                	fld	ft10,40(sp)
    48002594:	3f82                	fld	ft11,32(sp)
    48002596:	6171                	add	sp,sp,336
    48002598:	30200073          	mret

000000004800259c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:230

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler(void) {
    4800259c:	714d                	add	sp,sp,-336
    4800259e:	e686                	sd	ra,328(sp)
    480025a0:	e296                	sd	t0,320(sp)
    480025a2:	fe1a                	sd	t1,312(sp)
    480025a4:	fa1e                	sd	t2,304(sp)
    480025a6:	f622                	sd	s0,296(sp)
    480025a8:	f22a                	sd	a0,288(sp)
    480025aa:	ee2e                	sd	a1,280(sp)
    480025ac:	ea32                	sd	a2,272(sp)
    480025ae:	e636                	sd	a3,264(sp)
    480025b0:	e23a                	sd	a4,256(sp)
    480025b2:	fdbe                	sd	a5,248(sp)
    480025b4:	f9c2                	sd	a6,240(sp)
    480025b6:	f5c6                	sd	a7,232(sp)
    480025b8:	f1f2                	sd	t3,224(sp)
    480025ba:	edf6                	sd	t4,216(sp)
    480025bc:	e9fa                	sd	t5,208(sp)
    480025be:	e5fe                	sd	t6,200(sp)
    480025c0:	bd02                	fsd	ft0,184(sp)
    480025c2:	b906                	fsd	ft1,176(sp)
    480025c4:	b50a                	fsd	ft2,168(sp)
    480025c6:	b10e                	fsd	ft3,160(sp)
    480025c8:	ad12                	fsd	ft4,152(sp)
    480025ca:	a916                	fsd	ft5,144(sp)
    480025cc:	a51a                	fsd	ft6,136(sp)
    480025ce:	a11e                	fsd	ft7,128(sp)
    480025d0:	bcaa                	fsd	fa0,120(sp)
    480025d2:	b8ae                	fsd	fa1,112(sp)
    480025d4:	b4b2                	fsd	fa2,104(sp)
    480025d6:	b0b6                	fsd	fa3,96(sp)
    480025d8:	acba                	fsd	fa4,88(sp)
    480025da:	a8be                	fsd	fa5,80(sp)
    480025dc:	a4c2                	fsd	fa6,72(sp)
    480025de:	a0c6                	fsd	fa7,64(sp)
    480025e0:	bc72                	fsd	ft8,56(sp)
    480025e2:	b876                	fsd	ft9,48(sp)
    480025e4:	b47a                	fsd	ft10,40(sp)
    480025e6:	b07e                	fsd	ft11,32(sp)
    480025e8:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:231
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
    480025ea:	d7eff0ef          	jal	48001b68 <__metal_myhart_id>
    480025ee:	87aa                	mv	a5,a0
    480025f0:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    480025f4:	078e                	sll	a5,a5,0x3
    480025f6:	97ba                	add	a5,a5,a4
    480025f8:	639c                	ld	a5,0(a5)
    480025fa:	ecf43423          	sd	a5,-312(s0)
    480025fe:	ec843783          	ld	a5,-312(s0)
    48002602:	c78d                	beqz	a5,4800262c <metal_lc3_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:231 (discriminator 1)
    48002604:	ec843503          	ld	a0,-312(s0)
    48002608:	cb0ff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    4800260c:	eca43023          	sd	a0,-320(s0)
    48002610:	ec043783          	ld	a5,-320(s0)
    48002614:	3887b783          	ld	a5,904(a5)
    48002618:	eaf43c23          	sd	a5,-328(s0)
    4800261c:	ec043783          	ld	a5,-320(s0)
    48002620:	3787b783          	ld	a5,888(a5)
    48002624:	eb843583          	ld	a1,-328(s0)
    48002628:	454d                	li	a0,19
    4800262a:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:232
}
    4800262c:	0001                	nop
    4800262e:	60b6                	ld	ra,328(sp)
    48002630:	6296                	ld	t0,320(sp)
    48002632:	7372                	ld	t1,312(sp)
    48002634:	73d2                	ld	t2,304(sp)
    48002636:	7432                	ld	s0,296(sp)
    48002638:	7512                	ld	a0,288(sp)
    4800263a:	65f2                	ld	a1,280(sp)
    4800263c:	6652                	ld	a2,272(sp)
    4800263e:	66b2                	ld	a3,264(sp)
    48002640:	6712                	ld	a4,256(sp)
    48002642:	77ee                	ld	a5,248(sp)
    48002644:	784e                	ld	a6,240(sp)
    48002646:	78ae                	ld	a7,232(sp)
    48002648:	7e0e                	ld	t3,224(sp)
    4800264a:	6eee                	ld	t4,216(sp)
    4800264c:	6f4e                	ld	t5,208(sp)
    4800264e:	6fae                	ld	t6,200(sp)
    48002650:	306a                	fld	ft0,184(sp)
    48002652:	30ca                	fld	ft1,176(sp)
    48002654:	312a                	fld	ft2,168(sp)
    48002656:	318a                	fld	ft3,160(sp)
    48002658:	226a                	fld	ft4,152(sp)
    4800265a:	22ca                	fld	ft5,144(sp)
    4800265c:	232a                	fld	ft6,136(sp)
    4800265e:	238a                	fld	ft7,128(sp)
    48002660:	3566                	fld	fa0,120(sp)
    48002662:	35c6                	fld	fa1,112(sp)
    48002664:	3626                	fld	fa2,104(sp)
    48002666:	3686                	fld	fa3,96(sp)
    48002668:	2766                	fld	fa4,88(sp)
    4800266a:	27c6                	fld	fa5,80(sp)
    4800266c:	2826                	fld	fa6,72(sp)
    4800266e:	2886                	fld	fa7,64(sp)
    48002670:	3e62                	fld	ft8,56(sp)
    48002672:	3ec2                	fld	ft9,48(sp)
    48002674:	3f22                	fld	ft10,40(sp)
    48002676:	3f82                	fld	ft11,32(sp)
    48002678:	6171                	add	sp,sp,336
    4800267a:	30200073          	mret

000000004800267e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:235

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler(void) {
    4800267e:	714d                	add	sp,sp,-336
    48002680:	e686                	sd	ra,328(sp)
    48002682:	e296                	sd	t0,320(sp)
    48002684:	fe1a                	sd	t1,312(sp)
    48002686:	fa1e                	sd	t2,304(sp)
    48002688:	f622                	sd	s0,296(sp)
    4800268a:	f22a                	sd	a0,288(sp)
    4800268c:	ee2e                	sd	a1,280(sp)
    4800268e:	ea32                	sd	a2,272(sp)
    48002690:	e636                	sd	a3,264(sp)
    48002692:	e23a                	sd	a4,256(sp)
    48002694:	fdbe                	sd	a5,248(sp)
    48002696:	f9c2                	sd	a6,240(sp)
    48002698:	f5c6                	sd	a7,232(sp)
    4800269a:	f1f2                	sd	t3,224(sp)
    4800269c:	edf6                	sd	t4,216(sp)
    4800269e:	e9fa                	sd	t5,208(sp)
    480026a0:	e5fe                	sd	t6,200(sp)
    480026a2:	bd02                	fsd	ft0,184(sp)
    480026a4:	b906                	fsd	ft1,176(sp)
    480026a6:	b50a                	fsd	ft2,168(sp)
    480026a8:	b10e                	fsd	ft3,160(sp)
    480026aa:	ad12                	fsd	ft4,152(sp)
    480026ac:	a916                	fsd	ft5,144(sp)
    480026ae:	a51a                	fsd	ft6,136(sp)
    480026b0:	a11e                	fsd	ft7,128(sp)
    480026b2:	bcaa                	fsd	fa0,120(sp)
    480026b4:	b8ae                	fsd	fa1,112(sp)
    480026b6:	b4b2                	fsd	fa2,104(sp)
    480026b8:	b0b6                	fsd	fa3,96(sp)
    480026ba:	acba                	fsd	fa4,88(sp)
    480026bc:	a8be                	fsd	fa5,80(sp)
    480026be:	a4c2                	fsd	fa6,72(sp)
    480026c0:	a0c6                	fsd	fa7,64(sp)
    480026c2:	bc72                	fsd	ft8,56(sp)
    480026c4:	b876                	fsd	ft9,48(sp)
    480026c6:	b47a                	fsd	ft10,40(sp)
    480026c8:	b07e                	fsd	ft11,32(sp)
    480026ca:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:236
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
    480026cc:	c9cff0ef          	jal	48001b68 <__metal_myhart_id>
    480026d0:	87aa                	mv	a5,a0
    480026d2:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    480026d6:	078e                	sll	a5,a5,0x3
    480026d8:	97ba                	add	a5,a5,a4
    480026da:	639c                	ld	a5,0(a5)
    480026dc:	ecf43423          	sd	a5,-312(s0)
    480026e0:	ec843783          	ld	a5,-312(s0)
    480026e4:	c78d                	beqz	a5,4800270e <metal_lc4_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:236 (discriminator 1)
    480026e6:	ec843503          	ld	a0,-312(s0)
    480026ea:	bceff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    480026ee:	eca43023          	sd	a0,-320(s0)
    480026f2:	ec043783          	ld	a5,-320(s0)
    480026f6:	3a87b783          	ld	a5,936(a5)
    480026fa:	eaf43c23          	sd	a5,-328(s0)
    480026fe:	ec043783          	ld	a5,-320(s0)
    48002702:	3987b783          	ld	a5,920(a5)
    48002706:	eb843583          	ld	a1,-328(s0)
    4800270a:	4551                	li	a0,20
    4800270c:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:237
}
    4800270e:	0001                	nop
    48002710:	60b6                	ld	ra,328(sp)
    48002712:	6296                	ld	t0,320(sp)
    48002714:	7372                	ld	t1,312(sp)
    48002716:	73d2                	ld	t2,304(sp)
    48002718:	7432                	ld	s0,296(sp)
    4800271a:	7512                	ld	a0,288(sp)
    4800271c:	65f2                	ld	a1,280(sp)
    4800271e:	6652                	ld	a2,272(sp)
    48002720:	66b2                	ld	a3,264(sp)
    48002722:	6712                	ld	a4,256(sp)
    48002724:	77ee                	ld	a5,248(sp)
    48002726:	784e                	ld	a6,240(sp)
    48002728:	78ae                	ld	a7,232(sp)
    4800272a:	7e0e                	ld	t3,224(sp)
    4800272c:	6eee                	ld	t4,216(sp)
    4800272e:	6f4e                	ld	t5,208(sp)
    48002730:	6fae                	ld	t6,200(sp)
    48002732:	306a                	fld	ft0,184(sp)
    48002734:	30ca                	fld	ft1,176(sp)
    48002736:	312a                	fld	ft2,168(sp)
    48002738:	318a                	fld	ft3,160(sp)
    4800273a:	226a                	fld	ft4,152(sp)
    4800273c:	22ca                	fld	ft5,144(sp)
    4800273e:	232a                	fld	ft6,136(sp)
    48002740:	238a                	fld	ft7,128(sp)
    48002742:	3566                	fld	fa0,120(sp)
    48002744:	35c6                	fld	fa1,112(sp)
    48002746:	3626                	fld	fa2,104(sp)
    48002748:	3686                	fld	fa3,96(sp)
    4800274a:	2766                	fld	fa4,88(sp)
    4800274c:	27c6                	fld	fa5,80(sp)
    4800274e:	2826                	fld	fa6,72(sp)
    48002750:	2886                	fld	fa7,64(sp)
    48002752:	3e62                	fld	ft8,56(sp)
    48002754:	3ec2                	fld	ft9,48(sp)
    48002756:	3f22                	fld	ft10,40(sp)
    48002758:	3f82                	fld	ft11,32(sp)
    4800275a:	6171                	add	sp,sp,336
    4800275c:	30200073          	mret

0000000048002760 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:240

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler(void) {
    48002760:	714d                	add	sp,sp,-336
    48002762:	e686                	sd	ra,328(sp)
    48002764:	e296                	sd	t0,320(sp)
    48002766:	fe1a                	sd	t1,312(sp)
    48002768:	fa1e                	sd	t2,304(sp)
    4800276a:	f622                	sd	s0,296(sp)
    4800276c:	f22a                	sd	a0,288(sp)
    4800276e:	ee2e                	sd	a1,280(sp)
    48002770:	ea32                	sd	a2,272(sp)
    48002772:	e636                	sd	a3,264(sp)
    48002774:	e23a                	sd	a4,256(sp)
    48002776:	fdbe                	sd	a5,248(sp)
    48002778:	f9c2                	sd	a6,240(sp)
    4800277a:	f5c6                	sd	a7,232(sp)
    4800277c:	f1f2                	sd	t3,224(sp)
    4800277e:	edf6                	sd	t4,216(sp)
    48002780:	e9fa                	sd	t5,208(sp)
    48002782:	e5fe                	sd	t6,200(sp)
    48002784:	bd02                	fsd	ft0,184(sp)
    48002786:	b906                	fsd	ft1,176(sp)
    48002788:	b50a                	fsd	ft2,168(sp)
    4800278a:	b10e                	fsd	ft3,160(sp)
    4800278c:	ad12                	fsd	ft4,152(sp)
    4800278e:	a916                	fsd	ft5,144(sp)
    48002790:	a51a                	fsd	ft6,136(sp)
    48002792:	a11e                	fsd	ft7,128(sp)
    48002794:	bcaa                	fsd	fa0,120(sp)
    48002796:	b8ae                	fsd	fa1,112(sp)
    48002798:	b4b2                	fsd	fa2,104(sp)
    4800279a:	b0b6                	fsd	fa3,96(sp)
    4800279c:	acba                	fsd	fa4,88(sp)
    4800279e:	a8be                	fsd	fa5,80(sp)
    480027a0:	a4c2                	fsd	fa6,72(sp)
    480027a2:	a0c6                	fsd	fa7,64(sp)
    480027a4:	bc72                	fsd	ft8,56(sp)
    480027a6:	b876                	fsd	ft9,48(sp)
    480027a8:	b47a                	fsd	ft10,40(sp)
    480027aa:	b07e                	fsd	ft11,32(sp)
    480027ac:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:241
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
    480027ae:	bbaff0ef          	jal	48001b68 <__metal_myhart_id>
    480027b2:	87aa                	mv	a5,a0
    480027b4:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    480027b8:	078e                	sll	a5,a5,0x3
    480027ba:	97ba                	add	a5,a5,a4
    480027bc:	639c                	ld	a5,0(a5)
    480027be:	ecf43423          	sd	a5,-312(s0)
    480027c2:	ec843783          	ld	a5,-312(s0)
    480027c6:	c78d                	beqz	a5,480027f0 <metal_lc5_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:241 (discriminator 1)
    480027c8:	ec843503          	ld	a0,-312(s0)
    480027cc:	aecff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    480027d0:	eca43023          	sd	a0,-320(s0)
    480027d4:	ec043783          	ld	a5,-320(s0)
    480027d8:	3c87b783          	ld	a5,968(a5)
    480027dc:	eaf43c23          	sd	a5,-328(s0)
    480027e0:	ec043783          	ld	a5,-320(s0)
    480027e4:	3b87b783          	ld	a5,952(a5)
    480027e8:	eb843583          	ld	a1,-328(s0)
    480027ec:	4555                	li	a0,21
    480027ee:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:242
}
    480027f0:	0001                	nop
    480027f2:	60b6                	ld	ra,328(sp)
    480027f4:	6296                	ld	t0,320(sp)
    480027f6:	7372                	ld	t1,312(sp)
    480027f8:	73d2                	ld	t2,304(sp)
    480027fa:	7432                	ld	s0,296(sp)
    480027fc:	7512                	ld	a0,288(sp)
    480027fe:	65f2                	ld	a1,280(sp)
    48002800:	6652                	ld	a2,272(sp)
    48002802:	66b2                	ld	a3,264(sp)
    48002804:	6712                	ld	a4,256(sp)
    48002806:	77ee                	ld	a5,248(sp)
    48002808:	784e                	ld	a6,240(sp)
    4800280a:	78ae                	ld	a7,232(sp)
    4800280c:	7e0e                	ld	t3,224(sp)
    4800280e:	6eee                	ld	t4,216(sp)
    48002810:	6f4e                	ld	t5,208(sp)
    48002812:	6fae                	ld	t6,200(sp)
    48002814:	306a                	fld	ft0,184(sp)
    48002816:	30ca                	fld	ft1,176(sp)
    48002818:	312a                	fld	ft2,168(sp)
    4800281a:	318a                	fld	ft3,160(sp)
    4800281c:	226a                	fld	ft4,152(sp)
    4800281e:	22ca                	fld	ft5,144(sp)
    48002820:	232a                	fld	ft6,136(sp)
    48002822:	238a                	fld	ft7,128(sp)
    48002824:	3566                	fld	fa0,120(sp)
    48002826:	35c6                	fld	fa1,112(sp)
    48002828:	3626                	fld	fa2,104(sp)
    4800282a:	3686                	fld	fa3,96(sp)
    4800282c:	2766                	fld	fa4,88(sp)
    4800282e:	27c6                	fld	fa5,80(sp)
    48002830:	2826                	fld	fa6,72(sp)
    48002832:	2886                	fld	fa7,64(sp)
    48002834:	3e62                	fld	ft8,56(sp)
    48002836:	3ec2                	fld	ft9,48(sp)
    48002838:	3f22                	fld	ft10,40(sp)
    4800283a:	3f82                	fld	ft11,32(sp)
    4800283c:	6171                	add	sp,sp,336
    4800283e:	30200073          	mret

0000000048002842 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:245

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler(void) {
    48002842:	714d                	add	sp,sp,-336
    48002844:	e686                	sd	ra,328(sp)
    48002846:	e296                	sd	t0,320(sp)
    48002848:	fe1a                	sd	t1,312(sp)
    4800284a:	fa1e                	sd	t2,304(sp)
    4800284c:	f622                	sd	s0,296(sp)
    4800284e:	f22a                	sd	a0,288(sp)
    48002850:	ee2e                	sd	a1,280(sp)
    48002852:	ea32                	sd	a2,272(sp)
    48002854:	e636                	sd	a3,264(sp)
    48002856:	e23a                	sd	a4,256(sp)
    48002858:	fdbe                	sd	a5,248(sp)
    4800285a:	f9c2                	sd	a6,240(sp)
    4800285c:	f5c6                	sd	a7,232(sp)
    4800285e:	f1f2                	sd	t3,224(sp)
    48002860:	edf6                	sd	t4,216(sp)
    48002862:	e9fa                	sd	t5,208(sp)
    48002864:	e5fe                	sd	t6,200(sp)
    48002866:	bd02                	fsd	ft0,184(sp)
    48002868:	b906                	fsd	ft1,176(sp)
    4800286a:	b50a                	fsd	ft2,168(sp)
    4800286c:	b10e                	fsd	ft3,160(sp)
    4800286e:	ad12                	fsd	ft4,152(sp)
    48002870:	a916                	fsd	ft5,144(sp)
    48002872:	a51a                	fsd	ft6,136(sp)
    48002874:	a11e                	fsd	ft7,128(sp)
    48002876:	bcaa                	fsd	fa0,120(sp)
    48002878:	b8ae                	fsd	fa1,112(sp)
    4800287a:	b4b2                	fsd	fa2,104(sp)
    4800287c:	b0b6                	fsd	fa3,96(sp)
    4800287e:	acba                	fsd	fa4,88(sp)
    48002880:	a8be                	fsd	fa5,80(sp)
    48002882:	a4c2                	fsd	fa6,72(sp)
    48002884:	a0c6                	fsd	fa7,64(sp)
    48002886:	bc72                	fsd	ft8,56(sp)
    48002888:	b876                	fsd	ft9,48(sp)
    4800288a:	b47a                	fsd	ft10,40(sp)
    4800288c:	b07e                	fsd	ft11,32(sp)
    4800288e:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:246
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
    48002890:	ad8ff0ef          	jal	48001b68 <__metal_myhart_id>
    48002894:	87aa                	mv	a5,a0
    48002896:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    4800289a:	078e                	sll	a5,a5,0x3
    4800289c:	97ba                	add	a5,a5,a4
    4800289e:	639c                	ld	a5,0(a5)
    480028a0:	ecf43423          	sd	a5,-312(s0)
    480028a4:	ec843783          	ld	a5,-312(s0)
    480028a8:	c78d                	beqz	a5,480028d2 <metal_lc6_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:246 (discriminator 1)
    480028aa:	ec843503          	ld	a0,-312(s0)
    480028ae:	a0aff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    480028b2:	eca43023          	sd	a0,-320(s0)
    480028b6:	ec043783          	ld	a5,-320(s0)
    480028ba:	3e87b783          	ld	a5,1000(a5)
    480028be:	eaf43c23          	sd	a5,-328(s0)
    480028c2:	ec043783          	ld	a5,-320(s0)
    480028c6:	3d87b783          	ld	a5,984(a5)
    480028ca:	eb843583          	ld	a1,-328(s0)
    480028ce:	4559                	li	a0,22
    480028d0:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:247
}
    480028d2:	0001                	nop
    480028d4:	60b6                	ld	ra,328(sp)
    480028d6:	6296                	ld	t0,320(sp)
    480028d8:	7372                	ld	t1,312(sp)
    480028da:	73d2                	ld	t2,304(sp)
    480028dc:	7432                	ld	s0,296(sp)
    480028de:	7512                	ld	a0,288(sp)
    480028e0:	65f2                	ld	a1,280(sp)
    480028e2:	6652                	ld	a2,272(sp)
    480028e4:	66b2                	ld	a3,264(sp)
    480028e6:	6712                	ld	a4,256(sp)
    480028e8:	77ee                	ld	a5,248(sp)
    480028ea:	784e                	ld	a6,240(sp)
    480028ec:	78ae                	ld	a7,232(sp)
    480028ee:	7e0e                	ld	t3,224(sp)
    480028f0:	6eee                	ld	t4,216(sp)
    480028f2:	6f4e                	ld	t5,208(sp)
    480028f4:	6fae                	ld	t6,200(sp)
    480028f6:	306a                	fld	ft0,184(sp)
    480028f8:	30ca                	fld	ft1,176(sp)
    480028fa:	312a                	fld	ft2,168(sp)
    480028fc:	318a                	fld	ft3,160(sp)
    480028fe:	226a                	fld	ft4,152(sp)
    48002900:	22ca                	fld	ft5,144(sp)
    48002902:	232a                	fld	ft6,136(sp)
    48002904:	238a                	fld	ft7,128(sp)
    48002906:	3566                	fld	fa0,120(sp)
    48002908:	35c6                	fld	fa1,112(sp)
    4800290a:	3626                	fld	fa2,104(sp)
    4800290c:	3686                	fld	fa3,96(sp)
    4800290e:	2766                	fld	fa4,88(sp)
    48002910:	27c6                	fld	fa5,80(sp)
    48002912:	2826                	fld	fa6,72(sp)
    48002914:	2886                	fld	fa7,64(sp)
    48002916:	3e62                	fld	ft8,56(sp)
    48002918:	3ec2                	fld	ft9,48(sp)
    4800291a:	3f22                	fld	ft10,40(sp)
    4800291c:	3f82                	fld	ft11,32(sp)
    4800291e:	6171                	add	sp,sp,336
    48002920:	30200073          	mret

0000000048002924 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:250

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler(void) {
    48002924:	714d                	add	sp,sp,-336
    48002926:	e686                	sd	ra,328(sp)
    48002928:	e296                	sd	t0,320(sp)
    4800292a:	fe1a                	sd	t1,312(sp)
    4800292c:	fa1e                	sd	t2,304(sp)
    4800292e:	f622                	sd	s0,296(sp)
    48002930:	f22a                	sd	a0,288(sp)
    48002932:	ee2e                	sd	a1,280(sp)
    48002934:	ea32                	sd	a2,272(sp)
    48002936:	e636                	sd	a3,264(sp)
    48002938:	e23a                	sd	a4,256(sp)
    4800293a:	fdbe                	sd	a5,248(sp)
    4800293c:	f9c2                	sd	a6,240(sp)
    4800293e:	f5c6                	sd	a7,232(sp)
    48002940:	f1f2                	sd	t3,224(sp)
    48002942:	edf6                	sd	t4,216(sp)
    48002944:	e9fa                	sd	t5,208(sp)
    48002946:	e5fe                	sd	t6,200(sp)
    48002948:	bd02                	fsd	ft0,184(sp)
    4800294a:	b906                	fsd	ft1,176(sp)
    4800294c:	b50a                	fsd	ft2,168(sp)
    4800294e:	b10e                	fsd	ft3,160(sp)
    48002950:	ad12                	fsd	ft4,152(sp)
    48002952:	a916                	fsd	ft5,144(sp)
    48002954:	a51a                	fsd	ft6,136(sp)
    48002956:	a11e                	fsd	ft7,128(sp)
    48002958:	bcaa                	fsd	fa0,120(sp)
    4800295a:	b8ae                	fsd	fa1,112(sp)
    4800295c:	b4b2                	fsd	fa2,104(sp)
    4800295e:	b0b6                	fsd	fa3,96(sp)
    48002960:	acba                	fsd	fa4,88(sp)
    48002962:	a8be                	fsd	fa5,80(sp)
    48002964:	a4c2                	fsd	fa6,72(sp)
    48002966:	a0c6                	fsd	fa7,64(sp)
    48002968:	bc72                	fsd	ft8,56(sp)
    4800296a:	b876                	fsd	ft9,48(sp)
    4800296c:	b47a                	fsd	ft10,40(sp)
    4800296e:	b07e                	fsd	ft11,32(sp)
    48002970:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:251
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
    48002972:	9f6ff0ef          	jal	48001b68 <__metal_myhart_id>
    48002976:	87aa                	mv	a5,a0
    48002978:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    4800297c:	078e                	sll	a5,a5,0x3
    4800297e:	97ba                	add	a5,a5,a4
    48002980:	639c                	ld	a5,0(a5)
    48002982:	ecf43423          	sd	a5,-312(s0)
    48002986:	ec843783          	ld	a5,-312(s0)
    4800298a:	c78d                	beqz	a5,480029b4 <metal_lc7_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:251 (discriminator 1)
    4800298c:	ec843503          	ld	a0,-312(s0)
    48002990:	928ff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002994:	eca43023          	sd	a0,-320(s0)
    48002998:	ec043783          	ld	a5,-320(s0)
    4800299c:	4087b783          	ld	a5,1032(a5)
    480029a0:	eaf43c23          	sd	a5,-328(s0)
    480029a4:	ec043783          	ld	a5,-320(s0)
    480029a8:	3f87b783          	ld	a5,1016(a5)
    480029ac:	eb843583          	ld	a1,-328(s0)
    480029b0:	455d                	li	a0,23
    480029b2:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:252
}
    480029b4:	0001                	nop
    480029b6:	60b6                	ld	ra,328(sp)
    480029b8:	6296                	ld	t0,320(sp)
    480029ba:	7372                	ld	t1,312(sp)
    480029bc:	73d2                	ld	t2,304(sp)
    480029be:	7432                	ld	s0,296(sp)
    480029c0:	7512                	ld	a0,288(sp)
    480029c2:	65f2                	ld	a1,280(sp)
    480029c4:	6652                	ld	a2,272(sp)
    480029c6:	66b2                	ld	a3,264(sp)
    480029c8:	6712                	ld	a4,256(sp)
    480029ca:	77ee                	ld	a5,248(sp)
    480029cc:	784e                	ld	a6,240(sp)
    480029ce:	78ae                	ld	a7,232(sp)
    480029d0:	7e0e                	ld	t3,224(sp)
    480029d2:	6eee                	ld	t4,216(sp)
    480029d4:	6f4e                	ld	t5,208(sp)
    480029d6:	6fae                	ld	t6,200(sp)
    480029d8:	306a                	fld	ft0,184(sp)
    480029da:	30ca                	fld	ft1,176(sp)
    480029dc:	312a                	fld	ft2,168(sp)
    480029de:	318a                	fld	ft3,160(sp)
    480029e0:	226a                	fld	ft4,152(sp)
    480029e2:	22ca                	fld	ft5,144(sp)
    480029e4:	232a                	fld	ft6,136(sp)
    480029e6:	238a                	fld	ft7,128(sp)
    480029e8:	3566                	fld	fa0,120(sp)
    480029ea:	35c6                	fld	fa1,112(sp)
    480029ec:	3626                	fld	fa2,104(sp)
    480029ee:	3686                	fld	fa3,96(sp)
    480029f0:	2766                	fld	fa4,88(sp)
    480029f2:	27c6                	fld	fa5,80(sp)
    480029f4:	2826                	fld	fa6,72(sp)
    480029f6:	2886                	fld	fa7,64(sp)
    480029f8:	3e62                	fld	ft8,56(sp)
    480029fa:	3ec2                	fld	ft9,48(sp)
    480029fc:	3f22                	fld	ft10,40(sp)
    480029fe:	3f82                	fld	ft11,32(sp)
    48002a00:	6171                	add	sp,sp,336
    48002a02:	30200073          	mret

0000000048002a06 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:255

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler(void) {
    48002a06:	714d                	add	sp,sp,-336
    48002a08:	e686                	sd	ra,328(sp)
    48002a0a:	e296                	sd	t0,320(sp)
    48002a0c:	fe1a                	sd	t1,312(sp)
    48002a0e:	fa1e                	sd	t2,304(sp)
    48002a10:	f622                	sd	s0,296(sp)
    48002a12:	f22a                	sd	a0,288(sp)
    48002a14:	ee2e                	sd	a1,280(sp)
    48002a16:	ea32                	sd	a2,272(sp)
    48002a18:	e636                	sd	a3,264(sp)
    48002a1a:	e23a                	sd	a4,256(sp)
    48002a1c:	fdbe                	sd	a5,248(sp)
    48002a1e:	f9c2                	sd	a6,240(sp)
    48002a20:	f5c6                	sd	a7,232(sp)
    48002a22:	f1f2                	sd	t3,224(sp)
    48002a24:	edf6                	sd	t4,216(sp)
    48002a26:	e9fa                	sd	t5,208(sp)
    48002a28:	e5fe                	sd	t6,200(sp)
    48002a2a:	bd02                	fsd	ft0,184(sp)
    48002a2c:	b906                	fsd	ft1,176(sp)
    48002a2e:	b50a                	fsd	ft2,168(sp)
    48002a30:	b10e                	fsd	ft3,160(sp)
    48002a32:	ad12                	fsd	ft4,152(sp)
    48002a34:	a916                	fsd	ft5,144(sp)
    48002a36:	a51a                	fsd	ft6,136(sp)
    48002a38:	a11e                	fsd	ft7,128(sp)
    48002a3a:	bcaa                	fsd	fa0,120(sp)
    48002a3c:	b8ae                	fsd	fa1,112(sp)
    48002a3e:	b4b2                	fsd	fa2,104(sp)
    48002a40:	b0b6                	fsd	fa3,96(sp)
    48002a42:	acba                	fsd	fa4,88(sp)
    48002a44:	a8be                	fsd	fa5,80(sp)
    48002a46:	a4c2                	fsd	fa6,72(sp)
    48002a48:	a0c6                	fsd	fa7,64(sp)
    48002a4a:	bc72                	fsd	ft8,56(sp)
    48002a4c:	b876                	fsd	ft9,48(sp)
    48002a4e:	b47a                	fsd	ft10,40(sp)
    48002a50:	b07e                	fsd	ft11,32(sp)
    48002a52:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:256
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
    48002a54:	914ff0ef          	jal	48001b68 <__metal_myhart_id>
    48002a58:	87aa                	mv	a5,a0
    48002a5a:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002a5e:	078e                	sll	a5,a5,0x3
    48002a60:	97ba                	add	a5,a5,a4
    48002a62:	639c                	ld	a5,0(a5)
    48002a64:	ecf43423          	sd	a5,-312(s0)
    48002a68:	ec843783          	ld	a5,-312(s0)
    48002a6c:	c78d                	beqz	a5,48002a96 <metal_lc8_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:256 (discriminator 1)
    48002a6e:	ec843503          	ld	a0,-312(s0)
    48002a72:	846ff0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002a76:	eca43023          	sd	a0,-320(s0)
    48002a7a:	ec043783          	ld	a5,-320(s0)
    48002a7e:	4287b783          	ld	a5,1064(a5)
    48002a82:	eaf43c23          	sd	a5,-328(s0)
    48002a86:	ec043783          	ld	a5,-320(s0)
    48002a8a:	4187b783          	ld	a5,1048(a5)
    48002a8e:	eb843583          	ld	a1,-328(s0)
    48002a92:	4561                	li	a0,24
    48002a94:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:257
}
    48002a96:	0001                	nop
    48002a98:	60b6                	ld	ra,328(sp)
    48002a9a:	6296                	ld	t0,320(sp)
    48002a9c:	7372                	ld	t1,312(sp)
    48002a9e:	73d2                	ld	t2,304(sp)
    48002aa0:	7432                	ld	s0,296(sp)
    48002aa2:	7512                	ld	a0,288(sp)
    48002aa4:	65f2                	ld	a1,280(sp)
    48002aa6:	6652                	ld	a2,272(sp)
    48002aa8:	66b2                	ld	a3,264(sp)
    48002aaa:	6712                	ld	a4,256(sp)
    48002aac:	77ee                	ld	a5,248(sp)
    48002aae:	784e                	ld	a6,240(sp)
    48002ab0:	78ae                	ld	a7,232(sp)
    48002ab2:	7e0e                	ld	t3,224(sp)
    48002ab4:	6eee                	ld	t4,216(sp)
    48002ab6:	6f4e                	ld	t5,208(sp)
    48002ab8:	6fae                	ld	t6,200(sp)
    48002aba:	306a                	fld	ft0,184(sp)
    48002abc:	30ca                	fld	ft1,176(sp)
    48002abe:	312a                	fld	ft2,168(sp)
    48002ac0:	318a                	fld	ft3,160(sp)
    48002ac2:	226a                	fld	ft4,152(sp)
    48002ac4:	22ca                	fld	ft5,144(sp)
    48002ac6:	232a                	fld	ft6,136(sp)
    48002ac8:	238a                	fld	ft7,128(sp)
    48002aca:	3566                	fld	fa0,120(sp)
    48002acc:	35c6                	fld	fa1,112(sp)
    48002ace:	3626                	fld	fa2,104(sp)
    48002ad0:	3686                	fld	fa3,96(sp)
    48002ad2:	2766                	fld	fa4,88(sp)
    48002ad4:	27c6                	fld	fa5,80(sp)
    48002ad6:	2826                	fld	fa6,72(sp)
    48002ad8:	2886                	fld	fa7,64(sp)
    48002ada:	3e62                	fld	ft8,56(sp)
    48002adc:	3ec2                	fld	ft9,48(sp)
    48002ade:	3f22                	fld	ft10,40(sp)
    48002ae0:	3f82                	fld	ft11,32(sp)
    48002ae2:	6171                	add	sp,sp,336
    48002ae4:	30200073          	mret

0000000048002ae8 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:260

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler(void) {
    48002ae8:	714d                	add	sp,sp,-336
    48002aea:	e686                	sd	ra,328(sp)
    48002aec:	e296                	sd	t0,320(sp)
    48002aee:	fe1a                	sd	t1,312(sp)
    48002af0:	fa1e                	sd	t2,304(sp)
    48002af2:	f622                	sd	s0,296(sp)
    48002af4:	f22a                	sd	a0,288(sp)
    48002af6:	ee2e                	sd	a1,280(sp)
    48002af8:	ea32                	sd	a2,272(sp)
    48002afa:	e636                	sd	a3,264(sp)
    48002afc:	e23a                	sd	a4,256(sp)
    48002afe:	fdbe                	sd	a5,248(sp)
    48002b00:	f9c2                	sd	a6,240(sp)
    48002b02:	f5c6                	sd	a7,232(sp)
    48002b04:	f1f2                	sd	t3,224(sp)
    48002b06:	edf6                	sd	t4,216(sp)
    48002b08:	e9fa                	sd	t5,208(sp)
    48002b0a:	e5fe                	sd	t6,200(sp)
    48002b0c:	bd02                	fsd	ft0,184(sp)
    48002b0e:	b906                	fsd	ft1,176(sp)
    48002b10:	b50a                	fsd	ft2,168(sp)
    48002b12:	b10e                	fsd	ft3,160(sp)
    48002b14:	ad12                	fsd	ft4,152(sp)
    48002b16:	a916                	fsd	ft5,144(sp)
    48002b18:	a51a                	fsd	ft6,136(sp)
    48002b1a:	a11e                	fsd	ft7,128(sp)
    48002b1c:	bcaa                	fsd	fa0,120(sp)
    48002b1e:	b8ae                	fsd	fa1,112(sp)
    48002b20:	b4b2                	fsd	fa2,104(sp)
    48002b22:	b0b6                	fsd	fa3,96(sp)
    48002b24:	acba                	fsd	fa4,88(sp)
    48002b26:	a8be                	fsd	fa5,80(sp)
    48002b28:	a4c2                	fsd	fa6,72(sp)
    48002b2a:	a0c6                	fsd	fa7,64(sp)
    48002b2c:	bc72                	fsd	ft8,56(sp)
    48002b2e:	b876                	fsd	ft9,48(sp)
    48002b30:	b47a                	fsd	ft10,40(sp)
    48002b32:	b07e                	fsd	ft11,32(sp)
    48002b34:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:261
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
    48002b36:	832ff0ef          	jal	48001b68 <__metal_myhart_id>
    48002b3a:	87aa                	mv	a5,a0
    48002b3c:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002b40:	078e                	sll	a5,a5,0x3
    48002b42:	97ba                	add	a5,a5,a4
    48002b44:	639c                	ld	a5,0(a5)
    48002b46:	ecf43423          	sd	a5,-312(s0)
    48002b4a:	ec843783          	ld	a5,-312(s0)
    48002b4e:	c78d                	beqz	a5,48002b78 <metal_lc9_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:261 (discriminator 1)
    48002b50:	ec843503          	ld	a0,-312(s0)
    48002b54:	f65fe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002b58:	eca43023          	sd	a0,-320(s0)
    48002b5c:	ec043783          	ld	a5,-320(s0)
    48002b60:	4487b783          	ld	a5,1096(a5)
    48002b64:	eaf43c23          	sd	a5,-328(s0)
    48002b68:	ec043783          	ld	a5,-320(s0)
    48002b6c:	4387b783          	ld	a5,1080(a5)
    48002b70:	eb843583          	ld	a1,-328(s0)
    48002b74:	4565                	li	a0,25
    48002b76:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:262
}
    48002b78:	0001                	nop
    48002b7a:	60b6                	ld	ra,328(sp)
    48002b7c:	6296                	ld	t0,320(sp)
    48002b7e:	7372                	ld	t1,312(sp)
    48002b80:	73d2                	ld	t2,304(sp)
    48002b82:	7432                	ld	s0,296(sp)
    48002b84:	7512                	ld	a0,288(sp)
    48002b86:	65f2                	ld	a1,280(sp)
    48002b88:	6652                	ld	a2,272(sp)
    48002b8a:	66b2                	ld	a3,264(sp)
    48002b8c:	6712                	ld	a4,256(sp)
    48002b8e:	77ee                	ld	a5,248(sp)
    48002b90:	784e                	ld	a6,240(sp)
    48002b92:	78ae                	ld	a7,232(sp)
    48002b94:	7e0e                	ld	t3,224(sp)
    48002b96:	6eee                	ld	t4,216(sp)
    48002b98:	6f4e                	ld	t5,208(sp)
    48002b9a:	6fae                	ld	t6,200(sp)
    48002b9c:	306a                	fld	ft0,184(sp)
    48002b9e:	30ca                	fld	ft1,176(sp)
    48002ba0:	312a                	fld	ft2,168(sp)
    48002ba2:	318a                	fld	ft3,160(sp)
    48002ba4:	226a                	fld	ft4,152(sp)
    48002ba6:	22ca                	fld	ft5,144(sp)
    48002ba8:	232a                	fld	ft6,136(sp)
    48002baa:	238a                	fld	ft7,128(sp)
    48002bac:	3566                	fld	fa0,120(sp)
    48002bae:	35c6                	fld	fa1,112(sp)
    48002bb0:	3626                	fld	fa2,104(sp)
    48002bb2:	3686                	fld	fa3,96(sp)
    48002bb4:	2766                	fld	fa4,88(sp)
    48002bb6:	27c6                	fld	fa5,80(sp)
    48002bb8:	2826                	fld	fa6,72(sp)
    48002bba:	2886                	fld	fa7,64(sp)
    48002bbc:	3e62                	fld	ft8,56(sp)
    48002bbe:	3ec2                	fld	ft9,48(sp)
    48002bc0:	3f22                	fld	ft10,40(sp)
    48002bc2:	3f82                	fld	ft11,32(sp)
    48002bc4:	6171                	add	sp,sp,336
    48002bc6:	30200073          	mret

0000000048002bca <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:266

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc10_interrupt_vector_handler(void) {
    48002bca:	714d                	add	sp,sp,-336
    48002bcc:	e686                	sd	ra,328(sp)
    48002bce:	e296                	sd	t0,320(sp)
    48002bd0:	fe1a                	sd	t1,312(sp)
    48002bd2:	fa1e                	sd	t2,304(sp)
    48002bd4:	f622                	sd	s0,296(sp)
    48002bd6:	f22a                	sd	a0,288(sp)
    48002bd8:	ee2e                	sd	a1,280(sp)
    48002bda:	ea32                	sd	a2,272(sp)
    48002bdc:	e636                	sd	a3,264(sp)
    48002bde:	e23a                	sd	a4,256(sp)
    48002be0:	fdbe                	sd	a5,248(sp)
    48002be2:	f9c2                	sd	a6,240(sp)
    48002be4:	f5c6                	sd	a7,232(sp)
    48002be6:	f1f2                	sd	t3,224(sp)
    48002be8:	edf6                	sd	t4,216(sp)
    48002bea:	e9fa                	sd	t5,208(sp)
    48002bec:	e5fe                	sd	t6,200(sp)
    48002bee:	bd02                	fsd	ft0,184(sp)
    48002bf0:	b906                	fsd	ft1,176(sp)
    48002bf2:	b50a                	fsd	ft2,168(sp)
    48002bf4:	b10e                	fsd	ft3,160(sp)
    48002bf6:	ad12                	fsd	ft4,152(sp)
    48002bf8:	a916                	fsd	ft5,144(sp)
    48002bfa:	a51a                	fsd	ft6,136(sp)
    48002bfc:	a11e                	fsd	ft7,128(sp)
    48002bfe:	bcaa                	fsd	fa0,120(sp)
    48002c00:	b8ae                	fsd	fa1,112(sp)
    48002c02:	b4b2                	fsd	fa2,104(sp)
    48002c04:	b0b6                	fsd	fa3,96(sp)
    48002c06:	acba                	fsd	fa4,88(sp)
    48002c08:	a8be                	fsd	fa5,80(sp)
    48002c0a:	a4c2                	fsd	fa6,72(sp)
    48002c0c:	a0c6                	fsd	fa7,64(sp)
    48002c0e:	bc72                	fsd	ft8,56(sp)
    48002c10:	b876                	fsd	ft9,48(sp)
    48002c12:	b47a                	fsd	ft10,40(sp)
    48002c14:	b07e                	fsd	ft11,32(sp)
    48002c16:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:267
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
    48002c18:	f51fe0ef          	jal	48001b68 <__metal_myhart_id>
    48002c1c:	87aa                	mv	a5,a0
    48002c1e:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002c22:	078e                	sll	a5,a5,0x3
    48002c24:	97ba                	add	a5,a5,a4
    48002c26:	639c                	ld	a5,0(a5)
    48002c28:	ecf43423          	sd	a5,-312(s0)
    48002c2c:	ec843783          	ld	a5,-312(s0)
    48002c30:	c78d                	beqz	a5,48002c5a <metal_lc10_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:267 (discriminator 1)
    48002c32:	ec843503          	ld	a0,-312(s0)
    48002c36:	e83fe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002c3a:	eca43023          	sd	a0,-320(s0)
    48002c3e:	ec043783          	ld	a5,-320(s0)
    48002c42:	4687b783          	ld	a5,1128(a5)
    48002c46:	eaf43c23          	sd	a5,-328(s0)
    48002c4a:	ec043783          	ld	a5,-320(s0)
    48002c4e:	4587b783          	ld	a5,1112(a5)
    48002c52:	eb843583          	ld	a1,-328(s0)
    48002c56:	4569                	li	a0,26
    48002c58:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:268
}
    48002c5a:	0001                	nop
    48002c5c:	60b6                	ld	ra,328(sp)
    48002c5e:	6296                	ld	t0,320(sp)
    48002c60:	7372                	ld	t1,312(sp)
    48002c62:	73d2                	ld	t2,304(sp)
    48002c64:	7432                	ld	s0,296(sp)
    48002c66:	7512                	ld	a0,288(sp)
    48002c68:	65f2                	ld	a1,280(sp)
    48002c6a:	6652                	ld	a2,272(sp)
    48002c6c:	66b2                	ld	a3,264(sp)
    48002c6e:	6712                	ld	a4,256(sp)
    48002c70:	77ee                	ld	a5,248(sp)
    48002c72:	784e                	ld	a6,240(sp)
    48002c74:	78ae                	ld	a7,232(sp)
    48002c76:	7e0e                	ld	t3,224(sp)
    48002c78:	6eee                	ld	t4,216(sp)
    48002c7a:	6f4e                	ld	t5,208(sp)
    48002c7c:	6fae                	ld	t6,200(sp)
    48002c7e:	306a                	fld	ft0,184(sp)
    48002c80:	30ca                	fld	ft1,176(sp)
    48002c82:	312a                	fld	ft2,168(sp)
    48002c84:	318a                	fld	ft3,160(sp)
    48002c86:	226a                	fld	ft4,152(sp)
    48002c88:	22ca                	fld	ft5,144(sp)
    48002c8a:	232a                	fld	ft6,136(sp)
    48002c8c:	238a                	fld	ft7,128(sp)
    48002c8e:	3566                	fld	fa0,120(sp)
    48002c90:	35c6                	fld	fa1,112(sp)
    48002c92:	3626                	fld	fa2,104(sp)
    48002c94:	3686                	fld	fa3,96(sp)
    48002c96:	2766                	fld	fa4,88(sp)
    48002c98:	27c6                	fld	fa5,80(sp)
    48002c9a:	2826                	fld	fa6,72(sp)
    48002c9c:	2886                	fld	fa7,64(sp)
    48002c9e:	3e62                	fld	ft8,56(sp)
    48002ca0:	3ec2                	fld	ft9,48(sp)
    48002ca2:	3f22                	fld	ft10,40(sp)
    48002ca4:	3f82                	fld	ft11,32(sp)
    48002ca6:	6171                	add	sp,sp,336
    48002ca8:	30200073          	mret

0000000048002cac <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:272

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc11_interrupt_vector_handler(void) {
    48002cac:	714d                	add	sp,sp,-336
    48002cae:	e686                	sd	ra,328(sp)
    48002cb0:	e296                	sd	t0,320(sp)
    48002cb2:	fe1a                	sd	t1,312(sp)
    48002cb4:	fa1e                	sd	t2,304(sp)
    48002cb6:	f622                	sd	s0,296(sp)
    48002cb8:	f22a                	sd	a0,288(sp)
    48002cba:	ee2e                	sd	a1,280(sp)
    48002cbc:	ea32                	sd	a2,272(sp)
    48002cbe:	e636                	sd	a3,264(sp)
    48002cc0:	e23a                	sd	a4,256(sp)
    48002cc2:	fdbe                	sd	a5,248(sp)
    48002cc4:	f9c2                	sd	a6,240(sp)
    48002cc6:	f5c6                	sd	a7,232(sp)
    48002cc8:	f1f2                	sd	t3,224(sp)
    48002cca:	edf6                	sd	t4,216(sp)
    48002ccc:	e9fa                	sd	t5,208(sp)
    48002cce:	e5fe                	sd	t6,200(sp)
    48002cd0:	bd02                	fsd	ft0,184(sp)
    48002cd2:	b906                	fsd	ft1,176(sp)
    48002cd4:	b50a                	fsd	ft2,168(sp)
    48002cd6:	b10e                	fsd	ft3,160(sp)
    48002cd8:	ad12                	fsd	ft4,152(sp)
    48002cda:	a916                	fsd	ft5,144(sp)
    48002cdc:	a51a                	fsd	ft6,136(sp)
    48002cde:	a11e                	fsd	ft7,128(sp)
    48002ce0:	bcaa                	fsd	fa0,120(sp)
    48002ce2:	b8ae                	fsd	fa1,112(sp)
    48002ce4:	b4b2                	fsd	fa2,104(sp)
    48002ce6:	b0b6                	fsd	fa3,96(sp)
    48002ce8:	acba                	fsd	fa4,88(sp)
    48002cea:	a8be                	fsd	fa5,80(sp)
    48002cec:	a4c2                	fsd	fa6,72(sp)
    48002cee:	a0c6                	fsd	fa7,64(sp)
    48002cf0:	bc72                	fsd	ft8,56(sp)
    48002cf2:	b876                	fsd	ft9,48(sp)
    48002cf4:	b47a                	fsd	ft10,40(sp)
    48002cf6:	b07e                	fsd	ft11,32(sp)
    48002cf8:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:273
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
    48002cfa:	e6ffe0ef          	jal	48001b68 <__metal_myhart_id>
    48002cfe:	87aa                	mv	a5,a0
    48002d00:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002d04:	078e                	sll	a5,a5,0x3
    48002d06:	97ba                	add	a5,a5,a4
    48002d08:	639c                	ld	a5,0(a5)
    48002d0a:	ecf43423          	sd	a5,-312(s0)
    48002d0e:	ec843783          	ld	a5,-312(s0)
    48002d12:	c78d                	beqz	a5,48002d3c <metal_lc11_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:273 (discriminator 1)
    48002d14:	ec843503          	ld	a0,-312(s0)
    48002d18:	da1fe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002d1c:	eca43023          	sd	a0,-320(s0)
    48002d20:	ec043783          	ld	a5,-320(s0)
    48002d24:	4887b783          	ld	a5,1160(a5)
    48002d28:	eaf43c23          	sd	a5,-328(s0)
    48002d2c:	ec043783          	ld	a5,-320(s0)
    48002d30:	4787b783          	ld	a5,1144(a5)
    48002d34:	eb843583          	ld	a1,-328(s0)
    48002d38:	456d                	li	a0,27
    48002d3a:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:274
}
    48002d3c:	0001                	nop
    48002d3e:	60b6                	ld	ra,328(sp)
    48002d40:	6296                	ld	t0,320(sp)
    48002d42:	7372                	ld	t1,312(sp)
    48002d44:	73d2                	ld	t2,304(sp)
    48002d46:	7432                	ld	s0,296(sp)
    48002d48:	7512                	ld	a0,288(sp)
    48002d4a:	65f2                	ld	a1,280(sp)
    48002d4c:	6652                	ld	a2,272(sp)
    48002d4e:	66b2                	ld	a3,264(sp)
    48002d50:	6712                	ld	a4,256(sp)
    48002d52:	77ee                	ld	a5,248(sp)
    48002d54:	784e                	ld	a6,240(sp)
    48002d56:	78ae                	ld	a7,232(sp)
    48002d58:	7e0e                	ld	t3,224(sp)
    48002d5a:	6eee                	ld	t4,216(sp)
    48002d5c:	6f4e                	ld	t5,208(sp)
    48002d5e:	6fae                	ld	t6,200(sp)
    48002d60:	306a                	fld	ft0,184(sp)
    48002d62:	30ca                	fld	ft1,176(sp)
    48002d64:	312a                	fld	ft2,168(sp)
    48002d66:	318a                	fld	ft3,160(sp)
    48002d68:	226a                	fld	ft4,152(sp)
    48002d6a:	22ca                	fld	ft5,144(sp)
    48002d6c:	232a                	fld	ft6,136(sp)
    48002d6e:	238a                	fld	ft7,128(sp)
    48002d70:	3566                	fld	fa0,120(sp)
    48002d72:	35c6                	fld	fa1,112(sp)
    48002d74:	3626                	fld	fa2,104(sp)
    48002d76:	3686                	fld	fa3,96(sp)
    48002d78:	2766                	fld	fa4,88(sp)
    48002d7a:	27c6                	fld	fa5,80(sp)
    48002d7c:	2826                	fld	fa6,72(sp)
    48002d7e:	2886                	fld	fa7,64(sp)
    48002d80:	3e62                	fld	ft8,56(sp)
    48002d82:	3ec2                	fld	ft9,48(sp)
    48002d84:	3f22                	fld	ft10,40(sp)
    48002d86:	3f82                	fld	ft11,32(sp)
    48002d88:	6171                	add	sp,sp,336
    48002d8a:	30200073          	mret

0000000048002d8e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:278

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc12_interrupt_vector_handler(void) {
    48002d8e:	714d                	add	sp,sp,-336
    48002d90:	e686                	sd	ra,328(sp)
    48002d92:	e296                	sd	t0,320(sp)
    48002d94:	fe1a                	sd	t1,312(sp)
    48002d96:	fa1e                	sd	t2,304(sp)
    48002d98:	f622                	sd	s0,296(sp)
    48002d9a:	f22a                	sd	a0,288(sp)
    48002d9c:	ee2e                	sd	a1,280(sp)
    48002d9e:	ea32                	sd	a2,272(sp)
    48002da0:	e636                	sd	a3,264(sp)
    48002da2:	e23a                	sd	a4,256(sp)
    48002da4:	fdbe                	sd	a5,248(sp)
    48002da6:	f9c2                	sd	a6,240(sp)
    48002da8:	f5c6                	sd	a7,232(sp)
    48002daa:	f1f2                	sd	t3,224(sp)
    48002dac:	edf6                	sd	t4,216(sp)
    48002dae:	e9fa                	sd	t5,208(sp)
    48002db0:	e5fe                	sd	t6,200(sp)
    48002db2:	bd02                	fsd	ft0,184(sp)
    48002db4:	b906                	fsd	ft1,176(sp)
    48002db6:	b50a                	fsd	ft2,168(sp)
    48002db8:	b10e                	fsd	ft3,160(sp)
    48002dba:	ad12                	fsd	ft4,152(sp)
    48002dbc:	a916                	fsd	ft5,144(sp)
    48002dbe:	a51a                	fsd	ft6,136(sp)
    48002dc0:	a11e                	fsd	ft7,128(sp)
    48002dc2:	bcaa                	fsd	fa0,120(sp)
    48002dc4:	b8ae                	fsd	fa1,112(sp)
    48002dc6:	b4b2                	fsd	fa2,104(sp)
    48002dc8:	b0b6                	fsd	fa3,96(sp)
    48002dca:	acba                	fsd	fa4,88(sp)
    48002dcc:	a8be                	fsd	fa5,80(sp)
    48002dce:	a4c2                	fsd	fa6,72(sp)
    48002dd0:	a0c6                	fsd	fa7,64(sp)
    48002dd2:	bc72                	fsd	ft8,56(sp)
    48002dd4:	b876                	fsd	ft9,48(sp)
    48002dd6:	b47a                	fsd	ft10,40(sp)
    48002dd8:	b07e                	fsd	ft11,32(sp)
    48002dda:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:279
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
    48002ddc:	d8dfe0ef          	jal	48001b68 <__metal_myhart_id>
    48002de0:	87aa                	mv	a5,a0
    48002de2:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002de6:	078e                	sll	a5,a5,0x3
    48002de8:	97ba                	add	a5,a5,a4
    48002dea:	639c                	ld	a5,0(a5)
    48002dec:	ecf43423          	sd	a5,-312(s0)
    48002df0:	ec843783          	ld	a5,-312(s0)
    48002df4:	c78d                	beqz	a5,48002e1e <metal_lc12_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:279 (discriminator 1)
    48002df6:	ec843503          	ld	a0,-312(s0)
    48002dfa:	cbffe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002dfe:	eca43023          	sd	a0,-320(s0)
    48002e02:	ec043783          	ld	a5,-320(s0)
    48002e06:	4a87b783          	ld	a5,1192(a5)
    48002e0a:	eaf43c23          	sd	a5,-328(s0)
    48002e0e:	ec043783          	ld	a5,-320(s0)
    48002e12:	4987b783          	ld	a5,1176(a5)
    48002e16:	eb843583          	ld	a1,-328(s0)
    48002e1a:	4571                	li	a0,28
    48002e1c:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:280
}
    48002e1e:	0001                	nop
    48002e20:	60b6                	ld	ra,328(sp)
    48002e22:	6296                	ld	t0,320(sp)
    48002e24:	7372                	ld	t1,312(sp)
    48002e26:	73d2                	ld	t2,304(sp)
    48002e28:	7432                	ld	s0,296(sp)
    48002e2a:	7512                	ld	a0,288(sp)
    48002e2c:	65f2                	ld	a1,280(sp)
    48002e2e:	6652                	ld	a2,272(sp)
    48002e30:	66b2                	ld	a3,264(sp)
    48002e32:	6712                	ld	a4,256(sp)
    48002e34:	77ee                	ld	a5,248(sp)
    48002e36:	784e                	ld	a6,240(sp)
    48002e38:	78ae                	ld	a7,232(sp)
    48002e3a:	7e0e                	ld	t3,224(sp)
    48002e3c:	6eee                	ld	t4,216(sp)
    48002e3e:	6f4e                	ld	t5,208(sp)
    48002e40:	6fae                	ld	t6,200(sp)
    48002e42:	306a                	fld	ft0,184(sp)
    48002e44:	30ca                	fld	ft1,176(sp)
    48002e46:	312a                	fld	ft2,168(sp)
    48002e48:	318a                	fld	ft3,160(sp)
    48002e4a:	226a                	fld	ft4,152(sp)
    48002e4c:	22ca                	fld	ft5,144(sp)
    48002e4e:	232a                	fld	ft6,136(sp)
    48002e50:	238a                	fld	ft7,128(sp)
    48002e52:	3566                	fld	fa0,120(sp)
    48002e54:	35c6                	fld	fa1,112(sp)
    48002e56:	3626                	fld	fa2,104(sp)
    48002e58:	3686                	fld	fa3,96(sp)
    48002e5a:	2766                	fld	fa4,88(sp)
    48002e5c:	27c6                	fld	fa5,80(sp)
    48002e5e:	2826                	fld	fa6,72(sp)
    48002e60:	2886                	fld	fa7,64(sp)
    48002e62:	3e62                	fld	ft8,56(sp)
    48002e64:	3ec2                	fld	ft9,48(sp)
    48002e66:	3f22                	fld	ft10,40(sp)
    48002e68:	3f82                	fld	ft11,32(sp)
    48002e6a:	6171                	add	sp,sp,336
    48002e6c:	30200073          	mret

0000000048002e70 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:284

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc13_interrupt_vector_handler(void) {
    48002e70:	714d                	add	sp,sp,-336
    48002e72:	e686                	sd	ra,328(sp)
    48002e74:	e296                	sd	t0,320(sp)
    48002e76:	fe1a                	sd	t1,312(sp)
    48002e78:	fa1e                	sd	t2,304(sp)
    48002e7a:	f622                	sd	s0,296(sp)
    48002e7c:	f22a                	sd	a0,288(sp)
    48002e7e:	ee2e                	sd	a1,280(sp)
    48002e80:	ea32                	sd	a2,272(sp)
    48002e82:	e636                	sd	a3,264(sp)
    48002e84:	e23a                	sd	a4,256(sp)
    48002e86:	fdbe                	sd	a5,248(sp)
    48002e88:	f9c2                	sd	a6,240(sp)
    48002e8a:	f5c6                	sd	a7,232(sp)
    48002e8c:	f1f2                	sd	t3,224(sp)
    48002e8e:	edf6                	sd	t4,216(sp)
    48002e90:	e9fa                	sd	t5,208(sp)
    48002e92:	e5fe                	sd	t6,200(sp)
    48002e94:	bd02                	fsd	ft0,184(sp)
    48002e96:	b906                	fsd	ft1,176(sp)
    48002e98:	b50a                	fsd	ft2,168(sp)
    48002e9a:	b10e                	fsd	ft3,160(sp)
    48002e9c:	ad12                	fsd	ft4,152(sp)
    48002e9e:	a916                	fsd	ft5,144(sp)
    48002ea0:	a51a                	fsd	ft6,136(sp)
    48002ea2:	a11e                	fsd	ft7,128(sp)
    48002ea4:	bcaa                	fsd	fa0,120(sp)
    48002ea6:	b8ae                	fsd	fa1,112(sp)
    48002ea8:	b4b2                	fsd	fa2,104(sp)
    48002eaa:	b0b6                	fsd	fa3,96(sp)
    48002eac:	acba                	fsd	fa4,88(sp)
    48002eae:	a8be                	fsd	fa5,80(sp)
    48002eb0:	a4c2                	fsd	fa6,72(sp)
    48002eb2:	a0c6                	fsd	fa7,64(sp)
    48002eb4:	bc72                	fsd	ft8,56(sp)
    48002eb6:	b876                	fsd	ft9,48(sp)
    48002eb8:	b47a                	fsd	ft10,40(sp)
    48002eba:	b07e                	fsd	ft11,32(sp)
    48002ebc:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:285
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
    48002ebe:	cabfe0ef          	jal	48001b68 <__metal_myhart_id>
    48002ec2:	87aa                	mv	a5,a0
    48002ec4:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002ec8:	078e                	sll	a5,a5,0x3
    48002eca:	97ba                	add	a5,a5,a4
    48002ecc:	639c                	ld	a5,0(a5)
    48002ece:	ecf43423          	sd	a5,-312(s0)
    48002ed2:	ec843783          	ld	a5,-312(s0)
    48002ed6:	c78d                	beqz	a5,48002f00 <metal_lc13_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:285 (discriminator 1)
    48002ed8:	ec843503          	ld	a0,-312(s0)
    48002edc:	bddfe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002ee0:	eca43023          	sd	a0,-320(s0)
    48002ee4:	ec043783          	ld	a5,-320(s0)
    48002ee8:	4c87b783          	ld	a5,1224(a5)
    48002eec:	eaf43c23          	sd	a5,-328(s0)
    48002ef0:	ec043783          	ld	a5,-320(s0)
    48002ef4:	4b87b783          	ld	a5,1208(a5)
    48002ef8:	eb843583          	ld	a1,-328(s0)
    48002efc:	4575                	li	a0,29
    48002efe:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:286
}
    48002f00:	0001                	nop
    48002f02:	60b6                	ld	ra,328(sp)
    48002f04:	6296                	ld	t0,320(sp)
    48002f06:	7372                	ld	t1,312(sp)
    48002f08:	73d2                	ld	t2,304(sp)
    48002f0a:	7432                	ld	s0,296(sp)
    48002f0c:	7512                	ld	a0,288(sp)
    48002f0e:	65f2                	ld	a1,280(sp)
    48002f10:	6652                	ld	a2,272(sp)
    48002f12:	66b2                	ld	a3,264(sp)
    48002f14:	6712                	ld	a4,256(sp)
    48002f16:	77ee                	ld	a5,248(sp)
    48002f18:	784e                	ld	a6,240(sp)
    48002f1a:	78ae                	ld	a7,232(sp)
    48002f1c:	7e0e                	ld	t3,224(sp)
    48002f1e:	6eee                	ld	t4,216(sp)
    48002f20:	6f4e                	ld	t5,208(sp)
    48002f22:	6fae                	ld	t6,200(sp)
    48002f24:	306a                	fld	ft0,184(sp)
    48002f26:	30ca                	fld	ft1,176(sp)
    48002f28:	312a                	fld	ft2,168(sp)
    48002f2a:	318a                	fld	ft3,160(sp)
    48002f2c:	226a                	fld	ft4,152(sp)
    48002f2e:	22ca                	fld	ft5,144(sp)
    48002f30:	232a                	fld	ft6,136(sp)
    48002f32:	238a                	fld	ft7,128(sp)
    48002f34:	3566                	fld	fa0,120(sp)
    48002f36:	35c6                	fld	fa1,112(sp)
    48002f38:	3626                	fld	fa2,104(sp)
    48002f3a:	3686                	fld	fa3,96(sp)
    48002f3c:	2766                	fld	fa4,88(sp)
    48002f3e:	27c6                	fld	fa5,80(sp)
    48002f40:	2826                	fld	fa6,72(sp)
    48002f42:	2886                	fld	fa7,64(sp)
    48002f44:	3e62                	fld	ft8,56(sp)
    48002f46:	3ec2                	fld	ft9,48(sp)
    48002f48:	3f22                	fld	ft10,40(sp)
    48002f4a:	3f82                	fld	ft11,32(sp)
    48002f4c:	6171                	add	sp,sp,336
    48002f4e:	30200073          	mret

0000000048002f52 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:290

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc14_interrupt_vector_handler(void) {
    48002f52:	714d                	add	sp,sp,-336
    48002f54:	e686                	sd	ra,328(sp)
    48002f56:	e296                	sd	t0,320(sp)
    48002f58:	fe1a                	sd	t1,312(sp)
    48002f5a:	fa1e                	sd	t2,304(sp)
    48002f5c:	f622                	sd	s0,296(sp)
    48002f5e:	f22a                	sd	a0,288(sp)
    48002f60:	ee2e                	sd	a1,280(sp)
    48002f62:	ea32                	sd	a2,272(sp)
    48002f64:	e636                	sd	a3,264(sp)
    48002f66:	e23a                	sd	a4,256(sp)
    48002f68:	fdbe                	sd	a5,248(sp)
    48002f6a:	f9c2                	sd	a6,240(sp)
    48002f6c:	f5c6                	sd	a7,232(sp)
    48002f6e:	f1f2                	sd	t3,224(sp)
    48002f70:	edf6                	sd	t4,216(sp)
    48002f72:	e9fa                	sd	t5,208(sp)
    48002f74:	e5fe                	sd	t6,200(sp)
    48002f76:	bd02                	fsd	ft0,184(sp)
    48002f78:	b906                	fsd	ft1,176(sp)
    48002f7a:	b50a                	fsd	ft2,168(sp)
    48002f7c:	b10e                	fsd	ft3,160(sp)
    48002f7e:	ad12                	fsd	ft4,152(sp)
    48002f80:	a916                	fsd	ft5,144(sp)
    48002f82:	a51a                	fsd	ft6,136(sp)
    48002f84:	a11e                	fsd	ft7,128(sp)
    48002f86:	bcaa                	fsd	fa0,120(sp)
    48002f88:	b8ae                	fsd	fa1,112(sp)
    48002f8a:	b4b2                	fsd	fa2,104(sp)
    48002f8c:	b0b6                	fsd	fa3,96(sp)
    48002f8e:	acba                	fsd	fa4,88(sp)
    48002f90:	a8be                	fsd	fa5,80(sp)
    48002f92:	a4c2                	fsd	fa6,72(sp)
    48002f94:	a0c6                	fsd	fa7,64(sp)
    48002f96:	bc72                	fsd	ft8,56(sp)
    48002f98:	b876                	fsd	ft9,48(sp)
    48002f9a:	b47a                	fsd	ft10,40(sp)
    48002f9c:	b07e                	fsd	ft11,32(sp)
    48002f9e:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:291
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
    48002fa0:	bc9fe0ef          	jal	48001b68 <__metal_myhart_id>
    48002fa4:	87aa                	mv	a5,a0
    48002fa6:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48002faa:	078e                	sll	a5,a5,0x3
    48002fac:	97ba                	add	a5,a5,a4
    48002fae:	639c                	ld	a5,0(a5)
    48002fb0:	ecf43423          	sd	a5,-312(s0)
    48002fb4:	ec843783          	ld	a5,-312(s0)
    48002fb8:	c78d                	beqz	a5,48002fe2 <metal_lc14_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:291 (discriminator 1)
    48002fba:	ec843503          	ld	a0,-312(s0)
    48002fbe:	afbfe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48002fc2:	eca43023          	sd	a0,-320(s0)
    48002fc6:	ec043783          	ld	a5,-320(s0)
    48002fca:	4e87b783          	ld	a5,1256(a5)
    48002fce:	eaf43c23          	sd	a5,-328(s0)
    48002fd2:	ec043783          	ld	a5,-320(s0)
    48002fd6:	4d87b783          	ld	a5,1240(a5)
    48002fda:	eb843583          	ld	a1,-328(s0)
    48002fde:	4579                	li	a0,30
    48002fe0:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:292
}
    48002fe2:	0001                	nop
    48002fe4:	60b6                	ld	ra,328(sp)
    48002fe6:	6296                	ld	t0,320(sp)
    48002fe8:	7372                	ld	t1,312(sp)
    48002fea:	73d2                	ld	t2,304(sp)
    48002fec:	7432                	ld	s0,296(sp)
    48002fee:	7512                	ld	a0,288(sp)
    48002ff0:	65f2                	ld	a1,280(sp)
    48002ff2:	6652                	ld	a2,272(sp)
    48002ff4:	66b2                	ld	a3,264(sp)
    48002ff6:	6712                	ld	a4,256(sp)
    48002ff8:	77ee                	ld	a5,248(sp)
    48002ffa:	784e                	ld	a6,240(sp)
    48002ffc:	78ae                	ld	a7,232(sp)
    48002ffe:	7e0e                	ld	t3,224(sp)
    48003000:	6eee                	ld	t4,216(sp)
    48003002:	6f4e                	ld	t5,208(sp)
    48003004:	6fae                	ld	t6,200(sp)
    48003006:	306a                	fld	ft0,184(sp)
    48003008:	30ca                	fld	ft1,176(sp)
    4800300a:	312a                	fld	ft2,168(sp)
    4800300c:	318a                	fld	ft3,160(sp)
    4800300e:	226a                	fld	ft4,152(sp)
    48003010:	22ca                	fld	ft5,144(sp)
    48003012:	232a                	fld	ft6,136(sp)
    48003014:	238a                	fld	ft7,128(sp)
    48003016:	3566                	fld	fa0,120(sp)
    48003018:	35c6                	fld	fa1,112(sp)
    4800301a:	3626                	fld	fa2,104(sp)
    4800301c:	3686                	fld	fa3,96(sp)
    4800301e:	2766                	fld	fa4,88(sp)
    48003020:	27c6                	fld	fa5,80(sp)
    48003022:	2826                	fld	fa6,72(sp)
    48003024:	2886                	fld	fa7,64(sp)
    48003026:	3e62                	fld	ft8,56(sp)
    48003028:	3ec2                	fld	ft9,48(sp)
    4800302a:	3f22                	fld	ft10,40(sp)
    4800302c:	3f82                	fld	ft11,32(sp)
    4800302e:	6171                	add	sp,sp,336
    48003030:	30200073          	mret

0000000048003034 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:296

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc15_interrupt_vector_handler(void) {
    48003034:	714d                	add	sp,sp,-336
    48003036:	e686                	sd	ra,328(sp)
    48003038:	e296                	sd	t0,320(sp)
    4800303a:	fe1a                	sd	t1,312(sp)
    4800303c:	fa1e                	sd	t2,304(sp)
    4800303e:	f622                	sd	s0,296(sp)
    48003040:	f22a                	sd	a0,288(sp)
    48003042:	ee2e                	sd	a1,280(sp)
    48003044:	ea32                	sd	a2,272(sp)
    48003046:	e636                	sd	a3,264(sp)
    48003048:	e23a                	sd	a4,256(sp)
    4800304a:	fdbe                	sd	a5,248(sp)
    4800304c:	f9c2                	sd	a6,240(sp)
    4800304e:	f5c6                	sd	a7,232(sp)
    48003050:	f1f2                	sd	t3,224(sp)
    48003052:	edf6                	sd	t4,216(sp)
    48003054:	e9fa                	sd	t5,208(sp)
    48003056:	e5fe                	sd	t6,200(sp)
    48003058:	bd02                	fsd	ft0,184(sp)
    4800305a:	b906                	fsd	ft1,176(sp)
    4800305c:	b50a                	fsd	ft2,168(sp)
    4800305e:	b10e                	fsd	ft3,160(sp)
    48003060:	ad12                	fsd	ft4,152(sp)
    48003062:	a916                	fsd	ft5,144(sp)
    48003064:	a51a                	fsd	ft6,136(sp)
    48003066:	a11e                	fsd	ft7,128(sp)
    48003068:	bcaa                	fsd	fa0,120(sp)
    4800306a:	b8ae                	fsd	fa1,112(sp)
    4800306c:	b4b2                	fsd	fa2,104(sp)
    4800306e:	b0b6                	fsd	fa3,96(sp)
    48003070:	acba                	fsd	fa4,88(sp)
    48003072:	a8be                	fsd	fa5,80(sp)
    48003074:	a4c2                	fsd	fa6,72(sp)
    48003076:	a0c6                	fsd	fa7,64(sp)
    48003078:	bc72                	fsd	ft8,56(sp)
    4800307a:	b876                	fsd	ft9,48(sp)
    4800307c:	b47a                	fsd	ft10,40(sp)
    4800307e:	b07e                	fsd	ft11,32(sp)
    48003080:	0a80                	add	s0,sp,336
validation-software/freedom-metal/src/drivers/riscv_cpu.c:297
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
    48003082:	ae7fe0ef          	jal	48001b68 <__metal_myhart_id>
    48003086:	87aa                	mv	a5,a0
    48003088:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    4800308c:	078e                	sll	a5,a5,0x3
    4800308e:	97ba                	add	a5,a5,a4
    48003090:	639c                	ld	a5,0(a5)
    48003092:	ecf43423          	sd	a5,-312(s0)
    48003096:	ec843783          	ld	a5,-312(s0)
    4800309a:	c78d                	beqz	a5,480030c4 <metal_lc15_interrupt_vector_handler+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:297 (discriminator 1)
    4800309c:	ec843503          	ld	a0,-312(s0)
    480030a0:	a19fe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    480030a4:	eca43023          	sd	a0,-320(s0)
    480030a8:	ec043783          	ld	a5,-320(s0)
    480030ac:	5087b783          	ld	a5,1288(a5)
    480030b0:	eaf43c23          	sd	a5,-328(s0)
    480030b4:	ec043783          	ld	a5,-320(s0)
    480030b8:	4f87b783          	ld	a5,1272(a5)
    480030bc:	eb843583          	ld	a1,-328(s0)
    480030c0:	457d                	li	a0,31
    480030c2:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:298
}
    480030c4:	0001                	nop
    480030c6:	60b6                	ld	ra,328(sp)
    480030c8:	6296                	ld	t0,320(sp)
    480030ca:	7372                	ld	t1,312(sp)
    480030cc:	73d2                	ld	t2,304(sp)
    480030ce:	7432                	ld	s0,296(sp)
    480030d0:	7512                	ld	a0,288(sp)
    480030d2:	65f2                	ld	a1,280(sp)
    480030d4:	6652                	ld	a2,272(sp)
    480030d6:	66b2                	ld	a3,264(sp)
    480030d8:	6712                	ld	a4,256(sp)
    480030da:	77ee                	ld	a5,248(sp)
    480030dc:	784e                	ld	a6,240(sp)
    480030de:	78ae                	ld	a7,232(sp)
    480030e0:	7e0e                	ld	t3,224(sp)
    480030e2:	6eee                	ld	t4,216(sp)
    480030e4:	6f4e                	ld	t5,208(sp)
    480030e6:	6fae                	ld	t6,200(sp)
    480030e8:	306a                	fld	ft0,184(sp)
    480030ea:	30ca                	fld	ft1,176(sp)
    480030ec:	312a                	fld	ft2,168(sp)
    480030ee:	318a                	fld	ft3,160(sp)
    480030f0:	226a                	fld	ft4,152(sp)
    480030f2:	22ca                	fld	ft5,144(sp)
    480030f4:	232a                	fld	ft6,136(sp)
    480030f6:	238a                	fld	ft7,128(sp)
    480030f8:	3566                	fld	fa0,120(sp)
    480030fa:	35c6                	fld	fa1,112(sp)
    480030fc:	3626                	fld	fa2,104(sp)
    480030fe:	3686                	fld	fa3,96(sp)
    48003100:	2766                	fld	fa4,88(sp)
    48003102:	27c6                	fld	fa5,80(sp)
    48003104:	2826                	fld	fa6,72(sp)
    48003106:	2886                	fld	fa7,64(sp)
    48003108:	3e62                	fld	ft8,56(sp)
    4800310a:	3ec2                	fld	ft9,48(sp)
    4800310c:	3f22                	fld	ft10,40(sp)
    4800310e:	3f82                	fld	ft11,32(sp)
    48003110:	6171                	add	sp,sp,336
    48003112:	30200073          	mret

0000000048003116 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:300

metal_vector_mode __metal_controller_interrupt_vector_mode(void) {
    48003116:	1101                	add	sp,sp,-32
    48003118:	ec22                	sd	s0,24(sp)
    4800311a:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/riscv_cpu.c:303
    uintptr_t val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
    4800311c:	305027f3          	csrr	a5,mtvec
    48003120:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:304
    val &= METAL_MTVEC_MASK;
    48003124:	fe843783          	ld	a5,-24(s0)
    48003128:	03f7f793          	and	a5,a5,63
    4800312c:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:306

    switch (val) {
    48003130:	fe843703          	ld	a4,-24(s0)
    48003134:	478d                	li	a5,3
    48003136:	02f70363          	beq	a4,a5,4800315c <__metal_controller_interrupt_vector_mode+0x46>
    4800313a:	fe843703          	ld	a4,-24(s0)
    4800313e:	478d                	li	a5,3
    48003140:	02e7e263          	bltu	a5,a4,48003164 <__metal_controller_interrupt_vector_mode+0x4e>
    48003144:	fe843703          	ld	a4,-24(s0)
    48003148:	4785                	li	a5,1
    4800314a:	00f70b63          	beq	a4,a5,48003160 <__metal_controller_interrupt_vector_mode+0x4a>
    4800314e:	fe843703          	ld	a4,-24(s0)
    48003152:	4789                	li	a5,2
    48003154:	00f71863          	bne	a4,a5,48003164 <__metal_controller_interrupt_vector_mode+0x4e>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:308
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
    48003158:	478d                	li	a5,3
    4800315a:	a031                	j	48003166 <__metal_controller_interrupt_vector_mode+0x50>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:310
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
    4800315c:	4791                	li	a5,4
    4800315e:	a021                	j	48003166 <__metal_controller_interrupt_vector_mode+0x50>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:312
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
    48003160:	4785                	li	a5,1
    48003162:	a011                	j	48003166 <__metal_controller_interrupt_vector_mode+0x50>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:314
    }
    return METAL_DIRECT_MODE;
    48003164:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:315
}
    48003166:	853e                	mv	a0,a5
    48003168:	6462                	ld	s0,24(sp)
    4800316a:	6105                	add	sp,sp,32
    4800316c:	8082                	ret

000000004800316e <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:318

void __metal_controller_interrupt_vector(metal_vector_mode mode,
                                         void *vec_table) {
    4800316e:	7179                	add	sp,sp,-48
    48003170:	f422                	sd	s0,40(sp)
    48003172:	1800                	add	s0,sp,48
    48003174:	87aa                	mv	a5,a0
    48003176:	fcb43823          	sd	a1,-48(s0)
    4800317a:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:321
    uintptr_t trap_entry, val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
    4800317e:	305027f3          	csrr	a5,mtvec
    48003182:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:322
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
    48003186:	fe843783          	ld	a5,-24(s0)
    4800318a:	fc07f793          	and	a5,a5,-64
    4800318e:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:323
    trap_entry = (uintptr_t)vec_table;
    48003192:	fd043783          	ld	a5,-48(s0)
    48003196:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:325

    switch (mode) {
    4800319a:	fdc42783          	lw	a5,-36(s0)
    4800319e:	0007871b          	sext.w	a4,a5
    480031a2:	4791                	li	a5,4
    480031a4:	04f70e63          	beq	a4,a5,48003200 <__metal_controller_interrupt_vector+0x92>
    480031a8:	fdc42783          	lw	a5,-36(s0)
    480031ac:	0007871b          	sext.w	a4,a5
    480031b0:	4791                	li	a5,4
    480031b2:	06e7ef63          	bltu	a5,a4,48003230 <__metal_controller_interrupt_vector+0xc2>
    480031b6:	fdc42783          	lw	a5,-36(s0)
    480031ba:	0007871b          	sext.w	a4,a5
    480031be:	478d                	li	a5,3
    480031c0:	06e7e863          	bltu	a5,a4,48003230 <__metal_controller_interrupt_vector+0xc2>
    480031c4:	fdc42783          	lw	a5,-36(s0)
    480031c8:	0007871b          	sext.w	a4,a5
    480031cc:	4789                	li	a5,2
    480031ce:	00f77e63          	bgeu	a4,a5,480031ea <__metal_controller_interrupt_vector+0x7c>
    480031d2:	fdc42783          	lw	a5,-36(s0)
    480031d6:	2781                	sext.w	a5,a5
    480031d8:	c7b1                	beqz	a5,48003224 <__metal_controller_interrupt_vector+0xb6>
    480031da:	fdc42783          	lw	a5,-36(s0)
    480031de:	0007871b          	sext.w	a4,a5
    480031e2:	4785                	li	a5,1
    480031e4:	02f70963          	beq	a4,a5,48003216 <__metal_controller_interrupt_vector+0xa8>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:345
    case METAL_DIRECT_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
        break;
    }
}
    480031e8:	a0a1                	j	48003230 <__metal_controller_interrupt_vector+0xc2>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:328
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
    480031ea:	fe043783          	ld	a5,-32(s0)
    480031ee:	30779073          	csrw	mtvt,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:329
        __asm__ volatile("csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC));
    480031f2:	fe843783          	ld	a5,-24(s0)
    480031f6:	0027e793          	or	a5,a5,2
    480031fa:	30579073          	csrw	mtvec,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:330
        break;
    480031fe:	a80d                	j	48003230 <__metal_controller_interrupt_vector+0xc2>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:332
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
    48003200:	fe043783          	ld	a5,-32(s0)
    48003204:	30779073          	csrw	mtvt,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:334
            "csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC_VECTORED));
    48003208:	fe843783          	ld	a5,-24(s0)
    4800320c:	0037e793          	or	a5,a5,3
validation-software/freedom-metal/src/drivers/riscv_cpu.c:333
        __asm__ volatile(
    48003210:	30579073          	csrw	mtvec,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:335
        break;
    48003214:	a831                	j	48003230 <__metal_controller_interrupt_vector+0xc2>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:338
            "csrw mtvec, %0" ::"r"(trap_entry | METAL_MTVEC_VECTORED));
    48003216:	fe043783          	ld	a5,-32(s0)
    4800321a:	0017e793          	or	a5,a5,1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:337
        __asm__ volatile(
    4800321e:	30579073          	csrw	mtvec,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:339
        break;
    48003222:	a039                	j	48003230 <__metal_controller_interrupt_vector+0xc2>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:342
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
    48003224:	fe043783          	ld	a5,-32(s0)
    48003228:	9bf1                	and	a5,a5,-4
validation-software/freedom-metal/src/drivers/riscv_cpu.c:341
        __asm__ volatile(
    4800322a:	30579073          	csrw	mtvec,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:343
        break;
    4800322e:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_cpu.c:345
}
    48003230:	0001                	nop
    48003232:	7422                	ld	s0,40(sp)
    48003234:	6145                	add	sp,sp,48
    48003236:	8082                	ret

0000000048003238 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:347

int __metal_valid_interrupt_id(int id) {
    48003238:	1101                	add	sp,sp,-32
    4800323a:	ec22                	sd	s0,24(sp)
    4800323c:	1000                	add	s0,sp,32
    4800323e:	87aa                	mv	a5,a0
    48003240:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:348
    switch (id) {
    48003244:	fec42783          	lw	a5,-20(s0)
    48003248:	0007871b          	sext.w	a4,a5
    4800324c:	47fd                	li	a5,31
    4800324e:	02e7c963          	blt	a5,a4,48003280 <__metal_valid_interrupt_id+0x48>
    48003252:	fec42783          	lw	a5,-20(s0)
    48003256:	0007871b          	sext.w	a4,a5
    4800325a:	478d                	li	a5,3
    4800325c:	02f74c63          	blt	a4,a5,48003294 <__metal_valid_interrupt_id+0x5c>
    48003260:	fec42783          	lw	a5,-20(s0)
    48003264:	873e                	mv	a4,a5
    48003266:	1fffe7b7          	lui	a5,0x1fffe
    4800326a:	11178793          	add	a5,a5,273 # 1fffe111 <__heap_size+0x1fffd911>
    4800326e:	078e                	sll	a5,a5,0x3
    48003270:	00e7d7b3          	srl	a5,a5,a4
    48003274:	8b85                	and	a5,a5,1
    48003276:	00f037b3          	snez	a5,a5
    4800327a:	9fe1                	zext.b	a5,a5
    4800327c:	eb91                	bnez	a5,48003290 <__metal_valid_interrupt_id+0x58>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:371
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
    case METAL_INTERRUPT_ID_BEU:
        return 1;
    default:
        break;
    4800327e:	a819                	j	48003294 <__metal_valid_interrupt_id+0x5c>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:348
    switch (id) {
    48003280:	fec42783          	lw	a5,-20(s0)
    48003284:	0007871b          	sext.w	a4,a5
    48003288:	08000793          	li	a5,128
    4800328c:	00f71463          	bne	a4,a5,48003294 <__metal_valid_interrupt_id+0x5c>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:369
        return 1;
    48003290:	4785                	li	a5,1
    48003292:	a019                	j	48003298 <__metal_valid_interrupt_id+0x60>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:371
        break;
    48003294:	0001                	nop
validation-software/freedom-metal/src/drivers/riscv_cpu.c:374
    }

    return 0;
    48003296:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:375
}
    48003298:	853e                	mv	a0,a5
    4800329a:	6462                	ld	s0,24(sp)
    4800329c:	6105                	add	sp,sp,32
    4800329e:	8082                	ret

00000000480032a0 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:378

int __metal_local_interrupt_enable(struct metal_interrupt *controller,
                                   metal_interrupt_id_e id, int enable) {
    480032a0:	7179                	add	sp,sp,-48
    480032a2:	f406                	sd	ra,40(sp)
    480032a4:	f022                	sd	s0,32(sp)
    480032a6:	1800                	add	s0,sp,48
    480032a8:	fca43c23          	sd	a0,-40(s0)
    480032ac:	87ae                	mv	a5,a1
    480032ae:	8732                	mv	a4,a2
    480032b0:	fcf42a23          	sw	a5,-44(s0)
    480032b4:	87ba                	mv	a5,a4
    480032b6:	fcf42823          	sw	a5,-48(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:379
    int rc = 0;
    480032ba:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:381

    if (!controller) {
    480032be:	fd843783          	ld	a5,-40(s0)
    480032c2:	e399                	bnez	a5,480032c8 <__metal_local_interrupt_enable+0x28>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:382
        return -1;
    480032c4:	57fd                	li	a5,-1
    480032c6:	a07d                	j	48003374 <__metal_local_interrupt_enable+0xd4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:385
    }

    switch (id) {
    480032c8:	fd442783          	lw	a5,-44(s0)
    480032cc:	0007871b          	sext.w	a4,a5
    480032d0:	47fd                	li	a5,31
    480032d2:	08e7ec63          	bltu	a5,a4,4800336a <__metal_local_interrupt_enable+0xca>
    480032d6:	fd446783          	lwu	a5,-44(s0)
    480032da:	00279713          	sll	a4,a5,0x2
    480032de:	ffffd797          	auipc	a5,0xffffd
    480032e2:	30a78793          	add	a5,a5,778 # 480005e8 <__metal_driver_vtable_riscv_clint0+0xe0>
    480032e6:	97ba                	add	a5,a5,a4
    480032e8:	439c                	lw	a5,0(a5)
    480032ea:	0007871b          	sext.w	a4,a5
    480032ee:	ffffd797          	auipc	a5,0xffffd
    480032f2:	2fa78793          	add	a5,a5,762 # 480005e8 <__metal_driver_vtable_riscv_clint0+0xe0>
    480032f6:	97ba                	add	a5,a5,a4
    480032f8:	8782                	jr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:387
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
    480032fa:	fd042783          	lw	a5,-48(s0)
    480032fe:	2781                	sext.w	a5,a5
    48003300:	c781                	beqz	a5,48003308 <__metal_local_interrupt_enable+0x68>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:388
            __metal_interrupt_global_enable();
    48003302:	8c9fe0ef          	jal	48001bca <__metal_interrupt_global_enable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:392
        } else {
            __metal_interrupt_global_disable();
        }
        break;
    48003306:	a0ad                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:390
            __metal_interrupt_global_disable();
    48003308:	8dbfe0ef          	jal	48001be2 <__metal_interrupt_global_disable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:392
        break;
    4800330c:	a095                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:394
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
    4800330e:	fd042783          	lw	a5,-48(s0)
    48003312:	2781                	sext.w	a5,a5
    48003314:	c781                	beqz	a5,4800331c <__metal_local_interrupt_enable+0x7c>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:395
            __metal_interrupt_software_enable();
    48003316:	8e5fe0ef          	jal	48001bfa <__metal_interrupt_software_enable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:399
        } else {
            __metal_interrupt_software_disable();
        }
        break;
    4800331a:	a899                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:397
            __metal_interrupt_software_disable();
    4800331c:	8f7fe0ef          	jal	48001c12 <__metal_interrupt_software_disable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:399
        break;
    48003320:	a881                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:401
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
    48003322:	fd042783          	lw	a5,-48(s0)
    48003326:	2781                	sext.w	a5,a5
    48003328:	c781                	beqz	a5,48003330 <__metal_local_interrupt_enable+0x90>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:402
            __metal_interrupt_timer_enable();
    4800332a:	901fe0ef          	jal	48001c2a <__metal_interrupt_timer_enable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:406
        } else {
            __metal_interrupt_timer_disable();
        }
        break;
    4800332e:	a089                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:404
            __metal_interrupt_timer_disable();
    48003330:	915fe0ef          	jal	48001c44 <__metal_interrupt_timer_disable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:406
        break;
    48003334:	a835                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:408
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
    48003336:	fd042783          	lw	a5,-48(s0)
    4800333a:	2781                	sext.w	a5,a5
    4800333c:	c781                	beqz	a5,48003344 <__metal_local_interrupt_enable+0xa4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:409
            __metal_interrupt_external_enable();
    4800333e:	921fe0ef          	jal	48001c5e <__metal_interrupt_external_enable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:413
        } else {
            __metal_interrupt_external_disable();
        }
        break;
    48003342:	a03d                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:411
            __metal_interrupt_external_disable();
    48003344:	935fe0ef          	jal	48001c78 <__metal_interrupt_external_disable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:413
        break;
    48003348:	a025                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:430
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
    4800334a:	fd042783          	lw	a5,-48(s0)
    4800334e:	2781                	sext.w	a5,a5
    48003350:	c799                	beqz	a5,4800335e <__metal_local_interrupt_enable+0xbe>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:431
            __metal_interrupt_local_enable(id);
    48003352:	fd442783          	lw	a5,-44(s0)
    48003356:	853e                	mv	a0,a5
    48003358:	93bfe0ef          	jal	48001c92 <__metal_interrupt_local_enable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:435
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
    4800335c:	a811                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:433
            __metal_interrupt_local_disable(id);
    4800335e:	fd442783          	lw	a5,-44(s0)
    48003362:	853e                	mv	a0,a5
    48003364:	961fe0ef          	jal	48001cc4 <__metal_interrupt_local_disable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:435
        break;
    48003368:	a021                	j	48003370 <__metal_local_interrupt_enable+0xd0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:437
    default:
        rc = -1;
    4800336a:	57fd                	li	a5,-1
    4800336c:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:439
    }
    return rc;
    48003370:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:440
}
    48003374:	853e                	mv	a0,a5
    48003376:	70a2                	ld	ra,40(sp)
    48003378:	7402                	ld	s0,32(sp)
    4800337a:	6145                	add	sp,sp,48
    4800337c:	8082                	ret

000000004800337e <__metal_exception_register>:
__metal_exception_register():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:443

int __metal_exception_register(struct metal_interrupt *controller, int ecode,
                               metal_exception_handler_t isr) {
    4800337e:	7139                	add	sp,sp,-64
    48003380:	fc22                	sd	s0,56(sp)
    48003382:	0080                	add	s0,sp,64
    48003384:	fca43c23          	sd	a0,-40(s0)
    48003388:	87ae                	mv	a5,a1
    4800338a:	fcc43423          	sd	a2,-56(s0)
    4800338e:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:444
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    48003392:	fd843783          	ld	a5,-40(s0)
    48003396:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:446

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
    4800339a:	fd442783          	lw	a5,-44(s0)
    4800339e:	0007871b          	sext.w	a4,a5
    480033a2:	47bd                	li	a5,15
    480033a4:	02e7c263          	blt	a5,a4,480033c8 <__metal_exception_register+0x4a>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:446 (discriminator 1)
    480033a8:	fc843783          	ld	a5,-56(s0)
    480033ac:	cf91                	beqz	a5,480033c8 <__metal_exception_register+0x4a>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:447
        intc->metal_exception_table[ecode] = isr;
    480033ae:	fe843703          	ld	a4,-24(s0)
    480033b2:	fd442783          	lw	a5,-44(s0)
    480033b6:	0a678793          	add	a5,a5,166
    480033ba:	078e                	sll	a5,a5,0x3
    480033bc:	97ba                	add	a5,a5,a4
    480033be:	fc843703          	ld	a4,-56(s0)
    480033c2:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:448
        return 0;
    480033c4:	4781                	li	a5,0
    480033c6:	a011                	j	480033ca <__metal_exception_register+0x4c>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:450
    }
    return -1;
    480033c8:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:451
}
    480033ca:	853e                	mv	a0,a5
    480033cc:	7462                	ld	s0,56(sp)
    480033ce:	6121                	add	sp,sp,64
    480033d0:	8082                	ret

00000000480033d2 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:455

extern void early_trap_vector(void);
void __metal_driver_riscv_cpu_controller_interrupt_init(
    struct metal_interrupt *controller) {
    480033d2:	7139                	add	sp,sp,-64
    480033d4:	fc06                	sd	ra,56(sp)
    480033d6:	f822                	sd	s0,48(sp)
    480033d8:	0080                	add	s0,sp,64
    480033da:	fca43423          	sd	a0,-56(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:456
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    480033de:	fc843783          	ld	a5,-56(s0)
    480033e2:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:458

    if (!intc->init_done) {
    480033e6:	fe043783          	ld	a5,-32(s0)
    480033ea:	479c                	lw	a5,8(a5)
    480033ec:	efcd                	bnez	a5,480034a6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xd4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:460
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
    480033ee:	fe042623          	sw	zero,-20(s0)
    480033f2:	a081                	j	48003432 <__metal_driver_riscv_cpu_controller_interrupt_init+0x60>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:461 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
    480033f4:	fe043703          	ld	a4,-32(s0)
    480033f8:	fec42783          	lw	a5,-20(s0)
    480033fc:	0796                	sll	a5,a5,0x5
    480033fe:	97ba                	add	a5,a5,a4
    48003400:	1007bc23          	sd	zero,280(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:462 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
    48003404:	fe043703          	ld	a4,-32(s0)
    48003408:	fec42783          	lw	a5,-20(s0)
    4800340c:	07a5                	add	a5,a5,9
    4800340e:	0796                	sll	a5,a5,0x5
    48003410:	97ba                	add	a5,a5,a4
    48003412:	0007b023          	sd	zero,0(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:463 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
    48003416:	fe043703          	ld	a4,-32(s0)
    4800341a:	fec42783          	lw	a5,-20(s0)
    4800341e:	07a5                	add	a5,a5,9
    48003420:	0796                	sll	a5,a5,0x5
    48003422:	97ba                	add	a5,a5,a4
    48003424:	0007b423          	sd	zero,8(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:460 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
    48003428:	fec42783          	lw	a5,-20(s0)
    4800342c:	2785                	addw	a5,a5,1
    4800342e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:460 (discriminator 1)
    48003432:	fec42783          	lw	a5,-20(s0)
    48003436:	0007871b          	sext.w	a4,a5
    4800343a:	47fd                	li	a5,31
    4800343c:	fae7dce3          	bge	a5,a4,480033f4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:466
        }

        for (int i = 0; i < METAL_MAX_EXCEPTION_CODE; i++) {
    48003440:	fe042423          	sw	zero,-24(s0)
    48003444:	a01d                	j	4800346a <__metal_driver_riscv_cpu_controller_interrupt_init+0x98>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:467 (discriminator 3)
            intc->metal_exception_table[i] = __metal_default_exception_handler;
    48003446:	fe043703          	ld	a4,-32(s0)
    4800344a:	fe842783          	lw	a5,-24(s0)
    4800344e:	0a678793          	add	a5,a5,166
    48003452:	078e                	sll	a5,a5,0x3
    48003454:	97ba                	add	a5,a5,a4
    48003456:	fffff717          	auipc	a4,0xfffff
    4800345a:	8a070713          	add	a4,a4,-1888 # 48001cf6 <__metal_default_exception_handler>
    4800345e:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:466 (discriminator 3)
        for (int i = 0; i < METAL_MAX_EXCEPTION_CODE; i++) {
    48003460:	fe842783          	lw	a5,-24(s0)
    48003464:	2785                	addw	a5,a5,1
    48003466:	fef42423          	sw	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:466 (discriminator 1)
    4800346a:	fe842783          	lw	a5,-24(s0)
    4800346e:	0007871b          	sext.w	a4,a5
    48003472:	47bd                	li	a5,15
    48003474:	fce7d9e3          	bge	a5,a4,48003446 <__metal_driver_riscv_cpu_controller_interrupt_init+0x74>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:476
         * Set the real trap handler if the value of mtvec is equal to
         * early_trap_vector. If mtvec is not equal to early_trap_vector,
         * that means user has own trap handler, then we don't overwrite it.
         */
        uintptr_t mtvec;
        __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
    48003478:	305027f3          	csrr	a5,mtvec
    4800347c:	fcf43c23          	sd	a5,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:477
        if (mtvec == (uintptr_t)&early_trap_vector) {
    48003480:	ffffd797          	auipc	a5,0xffffd
    48003484:	06078793          	add	a5,a5,96 # 480004e0 <early_trap_vector>
    48003488:	fd843703          	ld	a4,-40(s0)
    4800348c:	00f71963          	bne	a4,a5,4800349e <__metal_driver_riscv_cpu_controller_interrupt_init+0xcc>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:478
            __metal_controller_interrupt_vector(
    48003490:	fffff597          	auipc	a1,0xfffff
    48003494:	c7058593          	add	a1,a1,-912 # 48002100 <__metal_exception_handler>
    48003498:	4501                	li	a0,0
    4800349a:	cd5ff0ef          	jal	4800316e <__metal_controller_interrupt_vector>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:482
                METAL_DIRECT_MODE,
                (void *)(uintptr_t)&__metal_exception_handler);
        }
        intc->init_done = 1;
    4800349e:	fe043783          	ld	a5,-32(s0)
    480034a2:	4705                	li	a4,1
    480034a4:	c798                	sw	a4,8(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:484
    }
}
    480034a6:	0001                	nop
    480034a8:	70e2                	ld	ra,56(sp)
    480034aa:	7442                	ld	s0,48(sp)
    480034ac:	6121                	add	sp,sp,64
    480034ae:	8082                	ret

00000000480034b0 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:488

int __metal_driver_riscv_cpu_controller_interrupt_register(
    struct metal_interrupt *controller, int id, metal_interrupt_handler_t isr,
    void *priv) {
    480034b0:	7139                	add	sp,sp,-64
    480034b2:	fc06                	sd	ra,56(sp)
    480034b4:	f822                	sd	s0,48(sp)
    480034b6:	0080                	add	s0,sp,64
    480034b8:	fca43c23          	sd	a0,-40(s0)
    480034bc:	87ae                	mv	a5,a1
    480034be:	fcc43423          	sd	a2,-56(s0)
    480034c2:	fcd43023          	sd	a3,-64(s0)
    480034c6:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:489
    int rc = 0;
    480034ca:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:490
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    480034ce:	fd843783          	ld	a5,-40(s0)
    480034d2:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:492

    if (!__metal_valid_interrupt_id(id)) {
    480034d6:	fd442783          	lw	a5,-44(s0)
    480034da:	853e                	mv	a0,a5
    480034dc:	d5dff0ef          	jal	48003238 <__metal_valid_interrupt_id>
    480034e0:	87aa                	mv	a5,a0
    480034e2:	e399                	bnez	a5,480034e8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x38>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:493
        return -11;
    480034e4:	57d5                	li	a5,-11
    480034e6:	a24d                	j	48003688 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d8>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:495
    }
    if ((id == METAL_INTERRUPT_ID_BEU) &&
    480034e8:	fd442783          	lw	a5,-44(s0)
    480034ec:	0007871b          	sext.w	a4,a5
    480034f0:	08000793          	li	a5,128
    480034f4:	00f71963          	bne	a4,a5,48003506 <__metal_driver_riscv_cpu_controller_interrupt_register+0x56>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:496 (discriminator 1)
        (__metal_controller_interrupt_vector_mode() != METAL_DIRECT_MODE)) {
    480034f8:	c1fff0ef          	jal	48003116 <__metal_controller_interrupt_vector_mode>
    480034fc:	87aa                	mv	a5,a0
    480034fe:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:495 (discriminator 1)
    if ((id == METAL_INTERRUPT_ID_BEU) &&
    48003500:	c399                	beqz	a5,48003506 <__metal_driver_riscv_cpu_controller_interrupt_register+0x56>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:499
        /* Only allow registration of the bus error unit interrupt if
         * interrupt vectoring if off */
        return -13;
    48003502:	57cd                	li	a5,-13
    48003504:	a251                	j	48003688 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d8>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:502
    }

    if (isr) {
    48003506:	fc843783          	ld	a5,-56(s0)
    4800350a:	cbb9                	beqz	a5,48003560 <__metal_driver_riscv_cpu_controller_interrupt_register+0xb0>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:503
        if (id == METAL_INTERRUPT_ID_BEU) {
    4800350c:	fd442783          	lw	a5,-44(s0)
    48003510:	0007871b          	sext.w	a4,a5
    48003514:	08000793          	li	a5,128
    48003518:	00f71f63          	bne	a4,a5,48003536 <__metal_driver_riscv_cpu_controller_interrupt_register+0x86>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:504
            intc->metal_int_beu.handler = isr;
    4800351c:	fe043783          	ld	a5,-32(s0)
    48003520:	fc843703          	ld	a4,-56(s0)
    48003524:	50e7bc23          	sd	a4,1304(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:505
            intc->metal_int_beu.exint_data = priv;
    48003528:	fe043783          	ld	a5,-32(s0)
    4800352c:	fc043703          	ld	a4,-64(s0)
    48003530:	52e7b423          	sd	a4,1320(a5)
    48003534:	aa81                	j	48003684 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:507
        } else {
            intc->metal_int_table[id].handler = isr;
    48003536:	fe043703          	ld	a4,-32(s0)
    4800353a:	fd442783          	lw	a5,-44(s0)
    4800353e:	0796                	sll	a5,a5,0x5
    48003540:	97ba                	add	a5,a5,a4
    48003542:	fc843703          	ld	a4,-56(s0)
    48003546:	10e7bc23          	sd	a4,280(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:508
            intc->metal_int_table[id].exint_data = priv;
    4800354a:	fe043703          	ld	a4,-32(s0)
    4800354e:	fd442783          	lw	a5,-44(s0)
    48003552:	07a5                	add	a5,a5,9
    48003554:	0796                	sll	a5,a5,0x5
    48003556:	97ba                	add	a5,a5,a4
    48003558:	fc043703          	ld	a4,-64(s0)
    4800355c:	e798                	sd	a4,8(a5)
    4800355e:	a21d                	j	48003684 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:511
        }
    } else {
        switch (id) {
    48003560:	fd442783          	lw	a5,-44(s0)
    48003564:	0007871b          	sext.w	a4,a5
    48003568:	08000793          	li	a5,128
    4800356c:	0cf70363          	beq	a4,a5,48003632 <__metal_driver_riscv_cpu_controller_interrupt_register+0x182>
    48003570:	fd442783          	lw	a5,-44(s0)
    48003574:	0007871b          	sext.w	a4,a5
    48003578:	08000793          	li	a5,128
    4800357c:	10e7c163          	blt	a5,a4,4800367e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ce>
    48003580:	fd442783          	lw	a5,-44(s0)
    48003584:	0007871b          	sext.w	a4,a5
    48003588:	47fd                	li	a5,31
    4800358a:	0ee7ca63          	blt	a5,a4,4800367e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ce>
    4800358e:	fd442783          	lw	a5,-44(s0)
    48003592:	0007871b          	sext.w	a4,a5
    48003596:	47c1                	li	a5,16
    48003598:	0af75c63          	bge	a4,a5,48003650 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1a0>
    4800359c:	fd442783          	lw	a5,-44(s0)
    480035a0:	0007871b          	sext.w	a4,a5
    480035a4:	47ad                	li	a5,11
    480035a6:	0af70563          	beq	a4,a5,48003650 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1a0>
    480035aa:	fd442783          	lw	a5,-44(s0)
    480035ae:	0007871b          	sext.w	a4,a5
    480035b2:	47ad                	li	a5,11
    480035b4:	0ce7c563          	blt	a5,a4,4800367e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ce>
    480035b8:	fd442783          	lw	a5,-44(s0)
    480035bc:	0007871b          	sext.w	a4,a5
    480035c0:	478d                	li	a5,3
    480035c2:	00f70a63          	beq	a4,a5,480035d6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x126>
    480035c6:	fd442783          	lw	a5,-44(s0)
    480035ca:	0007871b          	sext.w	a4,a5
    480035ce:	479d                	li	a5,7
    480035d0:	02f70a63          	beq	a4,a5,48003604 <__metal_driver_riscv_cpu_controller_interrupt_register+0x154>
    480035d4:	a06d                	j	4800367e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1ce>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:513
        case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
    480035d6:	fe043703          	ld	a4,-32(s0)
    480035da:	fd442783          	lw	a5,-44(s0)
    480035de:	0796                	sll	a5,a5,0x5
    480035e0:	97ba                	add	a5,a5,a4
    480035e2:	fffff717          	auipc	a4,0xfffff
    480035e6:	88070713          	add	a4,a4,-1920 # 48001e62 <__metal_default_sw_handler>
    480035ea:	10e7bc23          	sd	a4,280(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:514
            intc->metal_int_table[id].sub_int = priv;
    480035ee:	fe043703          	ld	a4,-32(s0)
    480035f2:	fd442783          	lw	a5,-44(s0)
    480035f6:	07a5                	add	a5,a5,9
    480035f8:	0796                	sll	a5,a5,0x5
    480035fa:	97ba                	add	a5,a5,a4
    480035fc:	fc043703          	ld	a4,-64(s0)
    48003600:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:515
            break;
    48003602:	a049                	j	48003684 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:517
        case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
    48003604:	fe043703          	ld	a4,-32(s0)
    48003608:	fd442783          	lw	a5,-44(s0)
    4800360c:	0796                	sll	a5,a5,0x5
    4800360e:	97ba                	add	a5,a5,a4
    48003610:	fffff717          	auipc	a4,0xfffff
    48003614:	9b870713          	add	a4,a4,-1608 # 48001fc8 <__metal_default_timer_handler>
    48003618:	10e7bc23          	sd	a4,280(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:518
            intc->metal_int_table[id].sub_int = priv;
    4800361c:	fe043703          	ld	a4,-32(s0)
    48003620:	fd442783          	lw	a5,-44(s0)
    48003624:	07a5                	add	a5,a5,9
    48003626:	0796                	sll	a5,a5,0x5
    48003628:	97ba                	add	a5,a5,a4
    4800362a:	fc043703          	ld	a4,-64(s0)
    4800362e:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:519
            break;
    48003630:	a891                	j	48003684 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:521
        case METAL_INTERRUPT_ID_BEU:
            intc->metal_int_beu.handler = __metal_default_beu_handler;
    48003632:	fe043783          	ld	a5,-32(s0)
    48003636:	fffff717          	auipc	a4,0xfffff
    4800363a:	97a70713          	add	a4,a4,-1670 # 48001fb0 <__metal_default_beu_handler>
    4800363e:	50e7bc23          	sd	a4,1304(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:522
            intc->metal_int_beu.exint_data = priv;
    48003642:	fe043783          	ld	a5,-32(s0)
    48003646:	fc043703          	ld	a4,-64(s0)
    4800364a:	52e7b423          	sd	a4,1320(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:523
            break;
    4800364e:	a81d                	j	48003684 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:541
        case METAL_INTERRUPT_ID_LC11:
        case METAL_INTERRUPT_ID_LC12:
        case METAL_INTERRUPT_ID_LC13:
        case METAL_INTERRUPT_ID_LC14:
        case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler =
    48003650:	fe043703          	ld	a4,-32(s0)
    48003654:	fd442783          	lw	a5,-44(s0)
    48003658:	0796                	sll	a5,a5,0x5
    4800365a:	97ba                	add	a5,a5,a4
    4800365c:	ffffe717          	auipc	a4,0xffffe
    48003660:	6b470713          	add	a4,a4,1716 # 48001d10 <__metal_default_interrupt_handler>
    48003664:	10e7bc23          	sd	a4,280(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:543
                __metal_default_interrupt_handler;
            intc->metal_int_table[id].sub_int = priv;
    48003668:	fe043703          	ld	a4,-32(s0)
    4800366c:	fd442783          	lw	a5,-44(s0)
    48003670:	07a5                	add	a5,a5,9
    48003672:	0796                	sll	a5,a5,0x5
    48003674:	97ba                	add	a5,a5,a4
    48003676:	fc043703          	ld	a4,-64(s0)
    4800367a:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:544
            break;
    4800367c:	a021                	j	48003684 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d4>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:546
        default:
            rc = -12;
    4800367e:	57d1                	li	a5,-12
    48003680:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:549
        }
    }
    return rc;
    48003684:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:550
}
    48003688:	853e                	mv	a0,a5
    4800368a:	70e2                	ld	ra,56(sp)
    4800368c:	7442                	ld	s0,48(sp)
    4800368e:	6121                	add	sp,sp,64
    48003690:	8082                	ret

0000000048003692 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:553

int __metal_driver_riscv_cpu_controller_interrupt_enable(
    struct metal_interrupt *controller, int id) {
    48003692:	1101                	add	sp,sp,-32
    48003694:	ec06                	sd	ra,24(sp)
    48003696:	e822                	sd	s0,16(sp)
    48003698:	1000                	add	s0,sp,32
    4800369a:	fea43423          	sd	a0,-24(s0)
    4800369e:	87ae                	mv	a5,a1
    480036a0:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:554
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
    480036a4:	fe442783          	lw	a5,-28(s0)
    480036a8:	4605                	li	a2,1
    480036aa:	85be                	mv	a1,a5
    480036ac:	fe843503          	ld	a0,-24(s0)
    480036b0:	bf1ff0ef          	jal	480032a0 <__metal_local_interrupt_enable>
    480036b4:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:555
}
    480036b6:	853e                	mv	a0,a5
    480036b8:	60e2                	ld	ra,24(sp)
    480036ba:	6442                	ld	s0,16(sp)
    480036bc:	6105                	add	sp,sp,32
    480036be:	8082                	ret

00000000480036c0 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:558

int __metal_driver_riscv_cpu_controller_interrupt_disable(
    struct metal_interrupt *controller, int id) {
    480036c0:	1101                	add	sp,sp,-32
    480036c2:	ec06                	sd	ra,24(sp)
    480036c4:	e822                	sd	s0,16(sp)
    480036c6:	1000                	add	s0,sp,32
    480036c8:	fea43423          	sd	a0,-24(s0)
    480036cc:	87ae                	mv	a5,a1
    480036ce:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:559
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
    480036d2:	fe442783          	lw	a5,-28(s0)
    480036d6:	4601                	li	a2,0
    480036d8:	85be                	mv	a1,a5
    480036da:	fe843503          	ld	a0,-24(s0)
    480036de:	bc3ff0ef          	jal	480032a0 <__metal_local_interrupt_enable>
    480036e2:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:560
}
    480036e4:	853e                	mv	a0,a5
    480036e6:	60e2                	ld	ra,24(sp)
    480036e8:	6442                	ld	s0,16(sp)
    480036ea:	6105                	add	sp,sp,32
    480036ec:	8082                	ret

00000000480036ee <__metal_driver_riscv_cpu_controller_interrupt_enable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_enable_vector():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:563

int __metal_driver_riscv_cpu_controller_interrupt_enable_vector(
    struct metal_interrupt *controller, int id, metal_vector_mode mode) {
    480036ee:	7179                	add	sp,sp,-48
    480036f0:	f406                	sd	ra,40(sp)
    480036f2:	f022                	sd	s0,32(sp)
    480036f4:	1800                	add	s0,sp,48
    480036f6:	fca43c23          	sd	a0,-40(s0)
    480036fa:	87ae                	mv	a5,a1
    480036fc:	8732                	mv	a4,a2
    480036fe:	fcf42a23          	sw	a5,-44(s0)
    48003702:	87ba                	mv	a5,a4
    48003704:	fcf42823          	sw	a5,-48(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:564
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
    48003708:	fd843783          	ld	a5,-40(s0)
    4800370c:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:566

    if (id == METAL_INTERRUPT_ID_BASE) {
    48003710:	fd442783          	lw	a5,-44(s0)
    48003714:	2781                	sext.w	a5,a5
    48003716:	e3b9                	bnez	a5,4800375c <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x6e>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:567
        if (mode == METAL_DIRECT_MODE) {
    48003718:	fd042783          	lw	a5,-48(s0)
    4800371c:	2781                	sext.w	a5,a5
    4800371e:	ef81                	bnez	a5,48003736 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x48>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:568
            __metal_controller_interrupt_vector(
    48003720:	fd042783          	lw	a5,-48(s0)
    48003724:	fffff597          	auipc	a1,0xfffff
    48003728:	9dc58593          	add	a1,a1,-1572 # 48002100 <__metal_exception_handler>
    4800372c:	853e                	mv	a0,a5
    4800372e:	a41ff0ef          	jal	4800316e <__metal_controller_interrupt_vector>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:570
                mode, (void *)(uintptr_t)&__metal_exception_handler);
            return 0;
    48003732:	4781                	li	a5,0
    48003734:	a02d                	j	4800375e <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x70>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:572
        }
        if (mode == METAL_VECTOR_MODE) {
    48003736:	fd042783          	lw	a5,-48(s0)
    4800373a:	0007871b          	sext.w	a4,a5
    4800373e:	4785                	li	a5,1
    48003740:	00f71e63          	bne	a4,a5,4800375c <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x6e>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:574
            __metal_controller_interrupt_vector(
                mode, (void *)&intc->metal_mtvec_table);
    48003744:	fe843783          	ld	a5,-24(s0)
    48003748:	01078713          	add	a4,a5,16
validation-software/freedom-metal/src/drivers/riscv_cpu.c:573
            __metal_controller_interrupt_vector(
    4800374c:	fd042783          	lw	a5,-48(s0)
    48003750:	85ba                	mv	a1,a4
    48003752:	853e                	mv	a0,a5
    48003754:	a1bff0ef          	jal	4800316e <__metal_controller_interrupt_vector>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:575
            return 0;
    48003758:	4781                	li	a5,0
    4800375a:	a011                	j	4800375e <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x70>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:578
        }
    }
    return -1;
    4800375c:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:579
}
    4800375e:	853e                	mv	a0,a5
    48003760:	70a2                	ld	ra,40(sp)
    48003762:	7402                	ld	s0,32(sp)
    48003764:	6145                	add	sp,sp,48
    48003766:	8082                	ret

0000000048003768 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_disable_vector():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:582

int __metal_driver_riscv_cpu_controller_interrupt_disable_vector(
    struct metal_interrupt *controller, int id) {
    48003768:	1101                	add	sp,sp,-32
    4800376a:	ec06                	sd	ra,24(sp)
    4800376c:	e822                	sd	s0,16(sp)
    4800376e:	1000                	add	s0,sp,32
    48003770:	fea43423          	sd	a0,-24(s0)
    48003774:	87ae                	mv	a5,a1
    48003776:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:583
    if (id == METAL_INTERRUPT_ID_BASE) {
    4800377a:	fe442783          	lw	a5,-28(s0)
    4800377e:	2781                	sext.w	a5,a5
    48003780:	eb91                	bnez	a5,48003794 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x2c>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:584
        __metal_controller_interrupt_vector(
    48003782:	fffff597          	auipc	a1,0xfffff
    48003786:	97e58593          	add	a1,a1,-1666 # 48002100 <__metal_exception_handler>
    4800378a:	4501                	li	a0,0
    4800378c:	9e3ff0ef          	jal	4800316e <__metal_controller_interrupt_vector>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:586
            METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
        return 0;
    48003790:	4781                	li	a5,0
    48003792:	a011                	j	48003796 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x2e>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:588
    }
    return -1;
    48003794:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:589
}
    48003796:	853e                	mv	a0,a5
    48003798:	60e2                	ld	ra,24(sp)
    4800379a:	6442                	ld	s0,16(sp)
    4800379c:	6105                	add	sp,sp,32
    4800379e:	8082                	ret

00000000480037a0 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:592

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode(
    struct metal_interrupt *controller) {
    480037a0:	1101                	add	sp,sp,-32
    480037a2:	ec06                	sd	ra,24(sp)
    480037a4:	e822                	sd	s0,16(sp)
    480037a6:	1000                	add	s0,sp,32
    480037a8:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:593
    return __metal_controller_interrupt_vector_mode();
    480037ac:	96bff0ef          	jal	48003116 <__metal_controller_interrupt_vector_mode>
    480037b0:	87aa                	mv	a5,a0
    480037b2:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:594
}
    480037b4:	853e                	mv	a0,a5
    480037b6:	60e2                	ld	ra,24(sp)
    480037b8:	6442                	ld	s0,16(sp)
    480037ba:	6105                	add	sp,sp,32
    480037bc:	8082                	ret

00000000480037be <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:597

int __metal_driver_riscv_cpu_controller_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
    480037be:	1101                	add	sp,sp,-32
    480037c0:	ec06                	sd	ra,24(sp)
    480037c2:	e822                	sd	s0,16(sp)
    480037c4:	1000                	add	s0,sp,32
    480037c6:	fea43423          	sd	a0,-24(s0)
    480037ca:	87ae                	mv	a5,a1
    480037cc:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:599

    if (mode == METAL_DIRECT_MODE) {
    480037d0:	fe442783          	lw	a5,-28(s0)
    480037d4:	2781                	sext.w	a5,a5
    480037d6:	ef81                	bnez	a5,480037ee <__metal_driver_riscv_cpu_controller_set_vector_mode+0x30>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:600
        __metal_controller_interrupt_vector(
    480037d8:	fe442783          	lw	a5,-28(s0)
    480037dc:	fffff597          	auipc	a1,0xfffff
    480037e0:	92458593          	add	a1,a1,-1756 # 48002100 <__metal_exception_handler>
    480037e4:	853e                	mv	a0,a5
    480037e6:	989ff0ef          	jal	4800316e <__metal_controller_interrupt_vector>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:602
            mode, (void *)(uintptr_t)&__metal_exception_handler);
        return 0;
    480037ea:	4781                	li	a5,0
    480037ec:	a025                	j	48003814 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x56>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:604
    }
    if (mode == METAL_VECTOR_MODE) {
    480037ee:	fe442783          	lw	a5,-28(s0)
    480037f2:	0007871b          	sext.w	a4,a5
    480037f6:	4785                	li	a5,1
    480037f8:	00f71d63          	bne	a4,a5,48003812 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x54>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:605
        __metal_controller_interrupt_vector(
    480037fc:	fe442783          	lw	a5,-28(s0)
    48003800:	00002597          	auipc	a1,0x2
    48003804:	70058593          	add	a1,a1,1792 # 48005f00 <__metal_vector_table>
    48003808:	853e                	mv	a0,a5
    4800380a:	965ff0ef          	jal	4800316e <__metal_controller_interrupt_vector>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:607
            mode, (void *)(uintptr_t)__metal_vector_table);
        return 0;
    4800380e:	4781                	li	a5,0
    48003810:	a011                	j	48003814 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x56>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:609
    }
    return -1;
    48003812:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:610
}
    48003814:	853e                	mv	a0,a5
    48003816:	60e2                	ld	ra,24(sp)
    48003818:	6442                	ld	s0,16(sp)
    4800381a:	6105                	add	sp,sp,32
    4800381c:	8082                	ret

000000004800381e <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:613

int __metal_driver_riscv_cpu_controller_command_request(
    struct metal_interrupt *controller, int cmd, void *data) {
    4800381e:	7179                	add	sp,sp,-48
    48003820:	f422                	sd	s0,40(sp)
    48003822:	1800                	add	s0,sp,48
    48003824:	fea43423          	sd	a0,-24(s0)
    48003828:	87ae                	mv	a5,a1
    4800382a:	fcc43c23          	sd	a2,-40(s0)
    4800382e:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:616
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic
     */
    return 0;
    48003832:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:617
}
    48003834:	853e                	mv	a0,a5
    48003836:	7422                	ld	s0,40(sp)
    48003838:	6145                	add	sp,sp,48
    4800383a:	8082                	ret

000000004800383c <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:621

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu) {
    4800383c:	7179                	add	sp,sp,-48
    4800383e:	f422                	sd	s0,40(sp)
    48003840:	1800                	add	s0,sp,48
    48003842:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:622
    unsigned long long val = 0;
    48003846:	fe043423          	sd	zero,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:637
         * so we must retry. */
    } while (hi != hi1);

    val = ((unsigned long long)hi << 32) | lo;
#else
    __asm__ volatile("csrr %0, mcycle" : "=r"(val));
    4800384a:	b00027f3          	csrr	a5,mcycle
    4800384e:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:640
#endif

    return val;
    48003852:	fe843783          	ld	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:641
}
    48003856:	853e                	mv	a0,a5
    48003858:	7422                	ld	s0,40(sp)
    4800385a:	6145                	add	sp,sp,48
    4800385c:	8082                	ret

000000004800385e <__metal_driver_cpu_clock_timebase_get>:
__metal_driver_cpu_clock_timebase_get():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:643

unsigned long long __metal_driver_cpu_clock_timebase_get(struct metal_cpu *cpu) {
    4800385e:	7179                	add	sp,sp,-48
    48003860:	f406                	sd	ra,40(sp)
    48003862:	f022                	sd	s0,32(sp)
    48003864:	1800                	add	s0,sp,48
    48003866:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:645
    unsigned long long timebase;
    if (!cpu) {
    4800386a:	fd843783          	ld	a5,-40(s0)
    4800386e:	e399                	bnez	a5,48003874 <__metal_driver_cpu_clock_timebase_get+0x16>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:646
        return 0;
    48003870:	4781                	li	a5,0
    48003872:	a809                	j	48003884 <__metal_driver_cpu_clock_timebase_get+0x26>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:649
    }

    timebase = __metal_driver_cpu_clock_frequency((struct metal_cpu *)cpu);
    48003874:	fd843503          	ld	a0,-40(s0)
    48003878:	a12fe0ef          	jal	48001a8a <__metal_driver_cpu_clock_frequency>
    4800387c:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:650
    return timebase;
    48003880:	fe843783          	ld	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:651
}
    48003884:	853e                	mv	a0,a5
    48003886:	70a2                	ld	ra,40(sp)
    48003888:	7402                	ld	s0,32(sp)
    4800388a:	6145                	add	sp,sp,48
    4800388c:	8082                	ret

000000004800388e <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:653

unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
    4800388e:	7139                	add	sp,sp,-64
    48003890:	fc06                	sd	ra,56(sp)
    48003892:	f822                	sd	s0,48(sp)
    48003894:	0080                	add	s0,sp,64
    48003896:	fca43423          	sd	a0,-56(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:654
    unsigned long long time = 0;
    4800389a:	fc043c23          	sd	zero,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:658
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    4800389e:	fc843503          	ld	a0,-56(s0)
    480038a2:	a16fe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    480038a6:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:660

    if (intc) {
    480038aa:	fe843783          	ld	a5,-24(s0)
    480038ae:	c78d                	beqz	a5,480038d8 <__metal_driver_cpu_mtime_get+0x4a>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:661
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    480038b0:	fe843783          	ld	a5,-24(s0)
    480038b4:	2007b783          	ld	a5,512(a5)
    480038b8:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:662
        if (tmr_intc) {
    480038bc:	fe043783          	ld	a5,-32(s0)
    480038c0:	cf81                	beqz	a5,480038d8 <__metal_driver_cpu_mtime_get+0x4a>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:663
            tmr_intc->vtable->command_request(tmr_intc, METAL_TIMER_MTIME_GET,
    480038c2:	fe043783          	ld	a5,-32(s0)
    480038c6:	639c                	ld	a5,0(a5)
    480038c8:	6fdc                	ld	a5,152(a5)
    480038ca:	fd840713          	add	a4,s0,-40
    480038ce:	863a                	mv	a2,a4
    480038d0:	4585                	li	a1,1
    480038d2:	fe043503          	ld	a0,-32(s0)
    480038d6:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:667
                                              &time);
        }
    }
    return time;
    480038d8:	fd843783          	ld	a5,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:668
}
    480038dc:	853e                	mv	a0,a5
    480038de:	70e2                	ld	ra,56(sp)
    480038e0:	7442                	ld	s0,48(sp)
    480038e2:	6121                	add	sp,sp,64
    480038e4:	8082                	ret

00000000480038e6 <__metal_driver_cpu_mtime_timebase_get>:
__metal_driver_cpu_mtime_timebase_get():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:670

unsigned long long __metal_driver_cpu_mtime_timebase_get(struct metal_cpu *cpu) {
    480038e6:	7179                	add	sp,sp,-48
    480038e8:	f406                	sd	ra,40(sp)
    480038ea:	f022                	sd	s0,32(sp)
    480038ec:	1800                	add	s0,sp,48
    480038ee:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:672
    unsigned long long timebase;
    if (!cpu) {
    480038f2:	fd843783          	ld	a5,-40(s0)
    480038f6:	e399                	bnez	a5,480038fc <__metal_driver_cpu_mtime_timebase_get+0x16>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:673
        return 0;
    480038f8:	4781                	li	a5,0
    480038fa:	a809                	j	4800390c <__metal_driver_cpu_mtime_timebase_get+0x26>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:676
    }

    timebase = __metal_driver_cpu_mtime_frequency((struct metal_cpu *)cpu);
    480038fc:	fd843503          	ld	a0,-40(s0)
    48003900:	95cfe0ef          	jal	48001a5c <__metal_driver_cpu_mtime_frequency>
    48003904:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:677
    return timebase;
    48003908:	fe843783          	ld	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:678
}
    4800390c:	853e                	mv	a0,a5
    4800390e:	70a2                	ld	ra,40(sp)
    48003910:	7402                	ld	s0,32(sp)
    48003912:	6145                	add	sp,sp,48
    48003914:	8082                	ret

0000000048003916 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:681

int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time) {
    48003916:	715d                	add	sp,sp,-80
    48003918:	e486                	sd	ra,72(sp)
    4800391a:	e0a2                	sd	s0,64(sp)
    4800391c:	fc26                	sd	s1,56(sp)
    4800391e:	0880                	add	s0,sp,80
    48003920:	faa43c23          	sd	a0,-72(s0)
    48003924:	fab43823          	sd	a1,-80(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:682
    int rc = -1;
    48003928:	57fd                	li	a5,-1
    4800392a:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:686
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    4800392e:	fb843503          	ld	a0,-72(s0)
    48003932:	986fe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003936:	fca43823          	sd	a0,-48(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:688

    if (intc) {
    4800393a:	fd043783          	ld	a5,-48(s0)
    4800393e:	cf85                	beqz	a5,48003976 <__metal_driver_cpu_mtimecmp_set+0x60>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:689
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
    48003940:	fd043783          	ld	a5,-48(s0)
    48003944:	2007b783          	ld	a5,512(a5)
    48003948:	fcf43423          	sd	a5,-56(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:690
        if (tmr_intc) {
    4800394c:	fc843783          	ld	a5,-56(s0)
    48003950:	c39d                	beqz	a5,48003976 <__metal_driver_cpu_mtimecmp_set+0x60>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:691
            rc = tmr_intc->vtable->mtimecmp_set(
    48003952:	fc843783          	ld	a5,-56(s0)
    48003956:	639c                	ld	a5,0(a5)
    48003958:	73c4                	ld	s1,160(a5)
    4800395a:	fb843503          	ld	a0,-72(s0)
    4800395e:	8d6fe0ef          	jal	48001a34 <__metal_driver_cpu_hartid>
    48003962:	87aa                	mv	a5,a0
    48003964:	fb043603          	ld	a2,-80(s0)
    48003968:	85be                	mv	a1,a5
    4800396a:	fc843503          	ld	a0,-56(s0)
    4800396e:	9482                	jalr	s1
    48003970:	87aa                	mv	a5,a0
    48003972:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:695
                tmr_intc, __metal_driver_cpu_hartid(cpu), time);
        }
    }
    return rc;
    48003976:	fdc42783          	lw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:696
}
    4800397a:	853e                	mv	a0,a5
    4800397c:	60a6                	ld	ra,72(sp)
    4800397e:	6406                	ld	s0,64(sp)
    48003980:	74e2                	ld	s1,56(sp)
    48003982:	6161                	add	sp,sp,80
    48003984:	8082                	ret

0000000048003986 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:699

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu) {
    48003986:	1101                	add	sp,sp,-32
    48003988:	ec22                	sd	s0,24(sp)
    4800398a:	1000                	add	s0,sp,32
    4800398c:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:701
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    48003990:	37ffc797          	auipc	a5,0x37ffc
    48003994:	77078793          	add	a5,a5,1904 # 80000100 <__metal_dt_clint_2000000>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:712

#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;

#endif 
}
    48003998:	853e                	mv	a0,a5
    4800399a:	6462                	ld	s0,24(sp)
    4800399c:	6105                	add	sp,sp,32
    4800399e:	8082                	ret

00000000480039a0 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:714

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu) {
    480039a0:	1101                	add	sp,sp,-32
    480039a2:	ec22                	sd	s0,24(sp)
    480039a4:	1000                	add	s0,sp,32
    480039a6:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:715
    return METAL_INTERRUPT_ID_TMR;
    480039aa:	479d                	li	a5,7
validation-software/freedom-metal/src/drivers/riscv_cpu.c:716
}
    480039ac:	853e                	mv	a0,a5
    480039ae:	6462                	ld	s0,24(sp)
    480039b0:	6105                	add	sp,sp,32
    480039b2:	8082                	ret

00000000480039b4 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:719

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu) {
    480039b4:	1101                	add	sp,sp,-32
    480039b6:	ec22                	sd	s0,24(sp)
    480039b8:	1000                	add	s0,sp,32
    480039ba:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:721
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
    480039be:	37ffc797          	auipc	a5,0x37ffc
    480039c2:	74278793          	add	a5,a5,1858 # 80000100 <__metal_dt_clint_2000000>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:732

#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;

#endif
}
    480039c6:	853e                	mv	a0,a5
    480039c8:	6462                	ld	s0,24(sp)
    480039ca:	6105                	add	sp,sp,32
    480039cc:	8082                	ret

00000000480039ce <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:734

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu) {
    480039ce:	1101                	add	sp,sp,-32
    480039d0:	ec22                	sd	s0,24(sp)
    480039d2:	1000                	add	s0,sp,32
    480039d4:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:735
    return METAL_INTERRUPT_ID_SW;
    480039d8:	478d                	li	a5,3
validation-software/freedom-metal/src/drivers/riscv_cpu.c:736
}
    480039da:	853e                	mv	a0,a5
    480039dc:	6462                	ld	s0,24(sp)
    480039de:	6105                	add	sp,sp,32
    480039e0:	8082                	ret

00000000480039e2 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:738

int __metal_driver_cpu_set_sw_ipi(struct metal_cpu *cpu, int hartid) {
    480039e2:	7139                	add	sp,sp,-64
    480039e4:	fc06                	sd	ra,56(sp)
    480039e6:	f822                	sd	s0,48(sp)
    480039e8:	0080                	add	s0,sp,64
    480039ea:	fca43423          	sd	a0,-56(s0)
    480039ee:	87ae                	mv	a5,a1
    480039f0:	fcf42223          	sw	a5,-60(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:739
    int rc = -1;
    480039f4:	57fd                	li	a5,-1
    480039f6:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:743
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    480039fa:	fc843503          	ld	a0,-56(s0)
    480039fe:	8bafe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003a02:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:745

    if (intc) {
    48003a06:	fe043783          	ld	a5,-32(s0)
    48003a0a:	cb85                	beqz	a5,48003a3a <__metal_driver_cpu_set_sw_ipi+0x58>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:746
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    48003a0c:	fe043783          	ld	a5,-32(s0)
    48003a10:	1807b783          	ld	a5,384(a5)
    48003a14:	fcf43c23          	sd	a5,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:747
        if (sw_intc) {
    48003a18:	fd843783          	ld	a5,-40(s0)
    48003a1c:	cf99                	beqz	a5,48003a3a <__metal_driver_cpu_set_sw_ipi+0x58>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:748
            rc = sw_intc->vtable->command_request(
    48003a1e:	fd843783          	ld	a5,-40(s0)
    48003a22:	639c                	ld	a5,0(a5)
    48003a24:	6fdc                	ld	a5,152(a5)
    48003a26:	fc440713          	add	a4,s0,-60
    48003a2a:	863a                	mv	a2,a4
    48003a2c:	458d                	li	a1,3
    48003a2e:	fd843503          	ld	a0,-40(s0)
    48003a32:	9782                	jalr	a5
    48003a34:	87aa                	mv	a5,a0
    48003a36:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:752
                sw_intc, METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
    48003a3a:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:753
}
    48003a3e:	853e                	mv	a0,a5
    48003a40:	70e2                	ld	ra,56(sp)
    48003a42:	7442                	ld	s0,48(sp)
    48003a44:	6121                	add	sp,sp,64
    48003a46:	8082                	ret

0000000048003a48 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:755

int __metal_driver_cpu_clear_sw_ipi(struct metal_cpu *cpu, int hartid) {
    48003a48:	7139                	add	sp,sp,-64
    48003a4a:	fc06                	sd	ra,56(sp)
    48003a4c:	f822                	sd	s0,48(sp)
    48003a4e:	0080                	add	s0,sp,64
    48003a50:	fca43423          	sd	a0,-56(s0)
    48003a54:	87ae                	mv	a5,a1
    48003a56:	fcf42223          	sw	a5,-60(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:756
    int rc = -1;
    48003a5a:	57fd                	li	a5,-1
    48003a5c:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:760
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    48003a60:	fc843503          	ld	a0,-56(s0)
    48003a64:	854fe0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003a68:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:762

    if (intc) {
    48003a6c:	fe043783          	ld	a5,-32(s0)
    48003a70:	cb85                	beqz	a5,48003aa0 <__metal_driver_cpu_clear_sw_ipi+0x58>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:763
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    48003a72:	fe043783          	ld	a5,-32(s0)
    48003a76:	1807b783          	ld	a5,384(a5)
    48003a7a:	fcf43c23          	sd	a5,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:764
        if (sw_intc) {
    48003a7e:	fd843783          	ld	a5,-40(s0)
    48003a82:	cf99                	beqz	a5,48003aa0 <__metal_driver_cpu_clear_sw_ipi+0x58>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:765
            rc = sw_intc->vtable->command_request(
    48003a84:	fd843783          	ld	a5,-40(s0)
    48003a88:	639c                	ld	a5,0(a5)
    48003a8a:	6fdc                	ld	a5,152(a5)
    48003a8c:	fc440713          	add	a4,s0,-60
    48003a90:	863a                	mv	a2,a4
    48003a92:	4589                	li	a1,2
    48003a94:	fd843503          	ld	a0,-40(s0)
    48003a98:	9782                	jalr	a5
    48003a9a:	87aa                	mv	a5,a0
    48003a9c:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:769
                sw_intc, METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
    48003aa0:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:770
}
    48003aa4:	853e                	mv	a0,a5
    48003aa6:	70e2                	ld	ra,56(sp)
    48003aa8:	7442                	ld	s0,48(sp)
    48003aaa:	6121                	add	sp,sp,64
    48003aac:	8082                	ret

0000000048003aae <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:772

int __metal_driver_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
    48003aae:	7139                	add	sp,sp,-64
    48003ab0:	fc06                	sd	ra,56(sp)
    48003ab2:	f822                	sd	s0,48(sp)
    48003ab4:	0080                	add	s0,sp,64
    48003ab6:	fca43423          	sd	a0,-56(s0)
    48003aba:	87ae                	mv	a5,a1
    48003abc:	fcf42223          	sw	a5,-60(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:773
    int rc = 0;
    48003ac0:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:777
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    48003ac4:	fc843503          	ld	a0,-56(s0)
    48003ac8:	ff1fd0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003acc:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:779

    if (intc) {
    48003ad0:	fe043783          	ld	a5,-32(s0)
    48003ad4:	cb85                	beqz	a5,48003b04 <__metal_driver_cpu_get_msip+0x56>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:780
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
    48003ad6:	fe043783          	ld	a5,-32(s0)
    48003ada:	1807b783          	ld	a5,384(a5)
    48003ade:	fcf43c23          	sd	a5,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:781
        if (sw_intc) {
    48003ae2:	fd843783          	ld	a5,-40(s0)
    48003ae6:	cf99                	beqz	a5,48003b04 <__metal_driver_cpu_get_msip+0x56>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:782
            rc = sw_intc->vtable->command_request(
    48003ae8:	fd843783          	ld	a5,-40(s0)
    48003aec:	639c                	ld	a5,0(a5)
    48003aee:	6fdc                	ld	a5,152(a5)
    48003af0:	fc440713          	add	a4,s0,-60
    48003af4:	863a                	mv	a2,a4
    48003af6:	4591                	li	a1,4
    48003af8:	fd843503          	ld	a0,-40(s0)
    48003afc:	9782                	jalr	a5
    48003afe:	87aa                	mv	a5,a0
    48003b00:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:786
                sw_intc, METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
    48003b04:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:787
}
    48003b08:	853e                	mv	a0,a5
    48003b0a:	70e2                	ld	ra,56(sp)
    48003b0c:	7442                	ld	s0,48(sp)
    48003b0e:	6121                	add	sp,sp,64
    48003b10:	8082                	ret

0000000048003b12 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:790

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu) {
    48003b12:	1101                	add	sp,sp,-32
    48003b14:	ec06                	sd	ra,24(sp)
    48003b16:	e822                	sd	s0,16(sp)
    48003b18:	1000                	add	s0,sp,32
    48003b1a:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:791
    return __metal_driver_cpu_interrupt_controller(cpu);
    48003b1e:	fe843503          	ld	a0,-24(s0)
    48003b22:	f97fd0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003b26:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:792
}
    48003b28:	853e                	mv	a0,a5
    48003b2a:	60e2                	ld	ra,24(sp)
    48003b2c:	6442                	ld	s0,16(sp)
    48003b2e:	6105                	add	sp,sp,32
    48003b30:	8082                	ret

0000000048003b32 <__metal_driver_cpu_enable_interrupt>:
__metal_driver_cpu_enable_interrupt():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:794

int __metal_driver_cpu_enable_interrupt(struct metal_cpu *cpu, void *priv) {
    48003b32:	1101                	add	sp,sp,-32
    48003b34:	ec06                	sd	ra,24(sp)
    48003b36:	e822                	sd	s0,16(sp)
    48003b38:	1000                	add	s0,sp,32
    48003b3a:	fea43423          	sd	a0,-24(s0)
    48003b3e:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:795
    if (__metal_driver_cpu_interrupt_controller(cpu)) {
    48003b42:	fe843503          	ld	a0,-24(s0)
    48003b46:	f73fd0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003b4a:	87aa                	mv	a5,a0
    48003b4c:	c789                	beqz	a5,48003b56 <__metal_driver_cpu_enable_interrupt+0x24>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:797
        /* Only support machine mode for now */
        __metal_interrupt_global_enable();
    48003b4e:	87cfe0ef          	jal	48001bca <__metal_interrupt_global_enable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:798
        return 0;
    48003b52:	4781                	li	a5,0
    48003b54:	a011                	j	48003b58 <__metal_driver_cpu_enable_interrupt+0x26>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:800
    }
    return -1;
    48003b56:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:801
}
    48003b58:	853e                	mv	a0,a5
    48003b5a:	60e2                	ld	ra,24(sp)
    48003b5c:	6442                	ld	s0,16(sp)
    48003b5e:	6105                	add	sp,sp,32
    48003b60:	8082                	ret

0000000048003b62 <__metal_driver_cpu_disable_interrupt>:
__metal_driver_cpu_disable_interrupt():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:803

int __metal_driver_cpu_disable_interrupt(struct metal_cpu *cpu, void *priv) {
    48003b62:	1101                	add	sp,sp,-32
    48003b64:	ec06                	sd	ra,24(sp)
    48003b66:	e822                	sd	s0,16(sp)
    48003b68:	1000                	add	s0,sp,32
    48003b6a:	fea43423          	sd	a0,-24(s0)
    48003b6e:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:804
    if (__metal_driver_cpu_interrupt_controller(cpu)) {
    48003b72:	fe843503          	ld	a0,-24(s0)
    48003b76:	f43fd0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003b7a:	87aa                	mv	a5,a0
    48003b7c:	c789                	beqz	a5,48003b86 <__metal_driver_cpu_disable_interrupt+0x24>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:806
        /* Only support machine mode for now */
        __metal_interrupt_global_disable();
    48003b7e:	864fe0ef          	jal	48001be2 <__metal_interrupt_global_disable>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:807
        return 0;
    48003b82:	4781                	li	a5,0
    48003b84:	a011                	j	48003b88 <__metal_driver_cpu_disable_interrupt+0x26>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:809
    }
    return -1;
    48003b86:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:810
}
    48003b88:	853e                	mv	a0,a5
    48003b8a:	60e2                	ld	ra,24(sp)
    48003b8c:	6442                	ld	s0,16(sp)
    48003b8e:	6105                	add	sp,sp,32
    48003b90:	8082                	ret

0000000048003b92 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:813

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
                                          metal_exception_handler_t isr) {
    48003b92:	7139                	add	sp,sp,-64
    48003b94:	fc06                	sd	ra,56(sp)
    48003b96:	f822                	sd	s0,48(sp)
    48003b98:	0080                	add	s0,sp,64
    48003b9a:	fca43c23          	sd	a0,-40(s0)
    48003b9e:	87ae                	mv	a5,a1
    48003ba0:	fcc43423          	sd	a2,-56(s0)
    48003ba4:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:816
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
    48003ba8:	fd843503          	ld	a0,-40(s0)
    48003bac:	f0dfd0ef          	jal	48001ab8 <__metal_driver_cpu_interrupt_controller>
    48003bb0:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:818

    if (intc) {
    48003bb4:	fe843783          	ld	a5,-24(s0)
    48003bb8:	cf81                	beqz	a5,48003bd0 <__metal_driver_cpu_exception_register+0x3e>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:819
        return __metal_exception_register((struct metal_interrupt *)intc, ecode,
    48003bba:	fd442783          	lw	a5,-44(s0)
    48003bbe:	fc843603          	ld	a2,-56(s0)
    48003bc2:	85be                	mv	a1,a5
    48003bc4:	fe843503          	ld	a0,-24(s0)
    48003bc8:	fb6ff0ef          	jal	4800337e <__metal_exception_register>
    48003bcc:	87aa                	mv	a5,a0
    48003bce:	a011                	j	48003bd2 <__metal_driver_cpu_exception_register+0x40>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:822
                                          isr);
    }
    return -1;
    48003bd0:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/riscv_cpu.c:823
}
    48003bd2:	853e                	mv	a0,a5
    48003bd4:	70e2                	ld	ra,56(sp)
    48003bd6:	7442                	ld	s0,48(sp)
    48003bd8:	6121                	add	sp,sp,64
    48003bda:	8082                	ret

0000000048003bdc <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:826

int __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu,
                                              uintptr_t epc) {
    48003bdc:	1101                	add	sp,sp,-32
    48003bde:	ec22                	sd	s0,24(sp)
    48003be0:	1000                	add	s0,sp,32
    48003be2:	fea43423          	sd	a0,-24(s0)
    48003be6:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:832
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short *)epc & METAL_INSN_LENGTH_MASK) ==
    48003bea:	fe043783          	ld	a5,-32(s0)
    48003bee:	879c                	lhu	a5,0(a5)
    48003bf0:	2781                	sext.w	a5,a5
    48003bf2:	8b8d                	and	a5,a5,3
    48003bf4:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:835
            METAL_INSN_NOT_COMPRESSED)
               ? 4
               : 2;
    48003bf6:	873e                	mv	a4,a5
    48003bf8:	478d                	li	a5,3
    48003bfa:	00f71463          	bne	a4,a5,48003c02 <__metal_driver_cpu_get_instruction_length+0x26>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:835 (discriminator 1)
    48003bfe:	4791                	li	a5,4
    48003c00:	a011                	j	48003c04 <__metal_driver_cpu_get_instruction_length+0x28>
validation-software/freedom-metal/src/drivers/riscv_cpu.c:835 (discriminator 2)
    48003c02:	4789                	li	a5,2
validation-software/freedom-metal/src/drivers/riscv_cpu.c:836 (discriminator 4)
}
    48003c04:	853e                	mv	a0,a5
    48003c06:	6462                	ld	s0,24(sp)
    48003c08:	6105                	add	sp,sp,32
    48003c0a:	8082                	ret

0000000048003c0c <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:838

uintptr_t __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu) {
    48003c0c:	7179                	add	sp,sp,-48
    48003c0e:	f422                	sd	s0,40(sp)
    48003c10:	1800                	add	s0,sp,48
    48003c12:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:840
    uintptr_t mepc;
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
    48003c16:	341027f3          	csrr	a5,mepc
    48003c1a:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:841
    return mepc;
    48003c1e:	fe843783          	ld	a5,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:842
}
    48003c22:	853e                	mv	a0,a5
    48003c24:	7422                	ld	s0,40(sp)
    48003c26:	6145                	add	sp,sp,48
    48003c28:	8082                	ret

0000000048003c2a <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:844

int __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc) {
    48003c2a:	1101                	add	sp,sp,-32
    48003c2c:	ec22                	sd	s0,24(sp)
    48003c2e:	1000                	add	s0,sp,32
    48003c30:	fea43423          	sd	a0,-24(s0)
    48003c34:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:845
    __asm__ volatile("csrw mepc, %0" ::"r"(mepc));
    48003c38:	fe043783          	ld	a5,-32(s0)
    48003c3c:	34179073          	csrw	mepc,a5
validation-software/freedom-metal/src/drivers/riscv_cpu.c:846
    return 0;
    48003c40:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:847
}
    48003c42:	853e                	mv	a0,a5
    48003c44:	6462                	ld	s0,24(sp)
    48003c46:	6105                	add	sp,sp,32
    48003c48:	8082                	ret

0000000048003c4a <__metal_driver_cpu_get_buserror>:
__metal_driver_cpu_get_buserror():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:849

struct metal_buserror *__metal_driver_cpu_get_buserror(struct metal_cpu *cpu) {
    48003c4a:	1101                	add	sp,sp,-32
    48003c4c:	ec06                	sd	ra,24(sp)
    48003c4e:	e822                	sd	s0,16(sp)
    48003c50:	1000                	add	s0,sp,32
    48003c52:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:850
    return __metal_driver_cpu_buserror(cpu);
    48003c56:	fe843503          	ld	a0,-24(s0)
    48003c5a:	e8dfd0ef          	jal	48001ae6 <__metal_driver_cpu_buserror>
    48003c5e:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/riscv_cpu.c:851
}
    48003c60:	853e                	mv	a0,a5
    48003c62:	60e2                	ld	ra,24(sp)
    48003c64:	6442                	ld	s0,16(sp)
    48003c66:	6105                	add	sp,sp,32
    48003c68:	8082                	ret

0000000048003c6a <__metal_driver_cpu_get_cpu_specific>:
__metal_driver_cpu_get_cpu_specific():
validation-software/freedom-metal/src/drivers/riscv_cpu.c:853

void *__metal_driver_cpu_get_cpu_specific(struct metal_cpu *cpu) {
    48003c6a:	1101                	add	sp,sp,-32
    48003c6c:	ec22                	sd	s0,24(sp)
    48003c6e:	1000                	add	s0,sp,32
    48003c70:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:854
    return cpu->cpu_specific;
    48003c74:	fe843783          	ld	a5,-24(s0)
    48003c78:	679c                	ld	a5,8(a5)
validation-software/freedom-metal/src/drivers/riscv_cpu.c:855
}
    48003c7a:	853e                	mv	a0,a5
    48003c7c:	6462                	ld	s0,24(sp)
    48003c7e:	6105                	add	sp,sp,32
    48003c80:	8082                	ret

0000000048003c82 <__metal_driver_sifive_buserror0_control_base>:
__metal_driver_sifive_buserror0_control_base():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:325



/* --------------------- sifive_buserror0 ------------ */
static __inline__ uintptr_t __metal_driver_sifive_buserror0_control_base(const struct metal_buserror *buserror)
{
    48003c82:	1101                	add	sp,sp,-32
    48003c84:	ec22                	sd	s0,24(sp)
    48003c86:	1000                	add	s0,sp,32
    48003c88:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:326
	if ((uintptr_t)buserror == (uintptr_t)&__metal_dt_bus_error_unit_1700000) {
    48003c8c:	fe843703          	ld	a4,-24(s0)
    48003c90:	fa818793          	add	a5,gp,-88 # 80001158 <__metal_dt_bus_error_unit_1700000>
    48003c94:	00f71563          	bne	a4,a5,48003c9e <__metal_driver_sifive_buserror0_control_base+0x1c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:327
		return METAL_SIFIVE_BUSERROR0_1700000_BASE_ADDRESS;
    48003c98:	017007b7          	lui	a5,0x1700
    48003c9c:	a011                	j	48003ca0 <__metal_driver_sifive_buserror0_control_base+0x1e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:330
	}
	else {
		return 0;
    48003c9e:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:332
	}
}
    48003ca0:	853e                	mv	a0,a5
    48003ca2:	6462                	ld	s0,24(sp)
    48003ca4:	6105                	add	sp,sp,32
    48003ca6:	8082                	ret

0000000048003ca8 <__metal_driver_sifive_buserror0_interrupt_parent>:
__metal_driver_sifive_buserror0_interrupt_parent():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:335

static __inline__ struct metal_interrupt * __metal_driver_sifive_buserror0_interrupt_parent(const struct metal_buserror *buserror)
{
    48003ca8:	1101                	add	sp,sp,-32
    48003caa:	ec22                	sd	s0,24(sp)
    48003cac:	1000                	add	s0,sp,32
    48003cae:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:336
	if ((uintptr_t)buserror == (uintptr_t)&__metal_dt_bus_error_unit_1700000) {
    48003cb2:	fe843703          	ld	a4,-24(s0)
    48003cb6:	fa818793          	add	a5,gp,-88 # 80001158 <__metal_dt_bus_error_unit_1700000>
    48003cba:	00f71763          	bne	a4,a5,48003cc8 <__metal_driver_sifive_buserror0_interrupt_parent+0x20>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:337
		return (struct metal_interrupt *)&__metal_dt_aplic_irq_domain_c004000.controller;
    48003cbe:	37ffd797          	auipc	a5,0x37ffd
    48003cc2:	a1278793          	add	a5,a5,-1518 # 800006d0 <__metal_dt_aplic_irq_domain_c004000>
    48003cc6:	a011                	j	48003cca <__metal_driver_sifive_buserror0_interrupt_parent+0x22>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:340
	}
	else {
		return NULL;
    48003cc8:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:342
	}
}
    48003cca:	853e                	mv	a0,a5
    48003ccc:	6462                	ld	s0,24(sp)
    48003cce:	6105                	add	sp,sp,32
    48003cd0:	8082                	ret

0000000048003cd2 <__metal_driver_sifive_buserror0_interrupt_id>:
__metal_driver_sifive_buserror0_interrupt_id():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:345

static __inline__ int __metal_driver_sifive_buserror0_interrupt_id(const struct metal_buserror *buserror)
{
    48003cd2:	1101                	add	sp,sp,-32
    48003cd4:	ec22                	sd	s0,24(sp)
    48003cd6:	1000                	add	s0,sp,32
    48003cd8:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:346
	if ((uintptr_t)buserror == (uintptr_t)&__metal_dt_bus_error_unit_1700000) {
    48003cdc:	fe843703          	ld	a4,-24(s0)
    48003ce0:	fa818793          	add	a5,gp,-88 # 80001158 <__metal_dt_bus_error_unit_1700000>
    48003ce4:	00f71563          	bne	a4,a5,48003cee <__metal_driver_sifive_buserror0_interrupt_id+0x1c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:347
		return 131;
    48003ce8:	08300793          	li	a5,131
    48003cec:	a011                	j	48003cf0 <__metal_driver_sifive_buserror0_interrupt_id+0x1e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:350
	}
	else {
		return 0;
    48003cee:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:352
	}
}
    48003cf0:	853e                	mv	a0,a5
    48003cf2:	6462                	ld	s0,24(sp)
    48003cf4:	6105                	add	sp,sp,32
    48003cf6:	8082                	ret

0000000048003cf8 <metal_buserror_init>:
metal_buserror_init():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:16
#include <metal/cpu.h>
#include <metal/init.h>
#include <metal/io.h>
#include <metal/machine.h>

void metal_buserror_init(struct metal_buserror *beu) {
    48003cf8:	7179                	add	sp,sp,-48
    48003cfa:	f406                	sd	ra,40(sp)
    48003cfc:	f022                	sd	s0,32(sp)
    48003cfe:	1800                	add	s0,sp,48
    48003d00:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:17
    struct metal_cpu *cpu = metal_cpu_get(metal_cpu_get_current_hartid());
    48003d04:	0e4020ef          	jal	48005de8 <metal_cpu_get_current_hartid>
    48003d08:	87aa                	mv	a5,a0
    48003d0a:	2781                	sext.w	a5,a5
    48003d0c:	853e                	mv	a0,a5
    48003d0e:	08c020ef          	jal	48005d9a <metal_cpu_get>
    48003d12:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:18
    if (cpu != NULL) {
    48003d16:	fe843783          	ld	a5,-24(s0)
    48003d1a:	c395                	beqz	a5,48003d3e <metal_buserror_init+0x46>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:19
        struct metal_buserror *beu = metal_cpu_get_buserror(cpu);
    48003d1c:	fe843503          	ld	a0,-24(s0)
    48003d20:	02e020ef          	jal	48005d4e <metal_cpu_get_buserror>
    48003d24:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:20
        if (beu != NULL) {
    48003d28:	fe043783          	ld	a5,-32(s0)
    48003d2c:	cb89                	beqz	a5,48003d3e <metal_buserror_init+0x46>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:21
            metal_buserror_set_event_enabled(beu, METAL_BUSERROR_EVENT_ALL,
    48003d2e:	4605                	li	a2,1
    48003d30:	6785                	lui	a5,0x1
    48003d32:	eee78593          	add	a1,a5,-274 # eee <__heap_size+0x6ee>
    48003d36:	fe043503          	ld	a0,-32(s0)
    48003d3a:	00e000ef          	jal	48003d48 <metal_buserror_set_event_enabled>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:25
                                             true);
        }
    }
}
    48003d3e:	0001                	nop
    48003d40:	70a2                	ld	ra,40(sp)
    48003d42:	7402                	ld	s0,32(sp)
    48003d44:	6145                	add	sp,sp,48
    48003d46:	8082                	ret

0000000048003d48 <metal_buserror_set_event_enabled>:
metal_buserror_set_event_enabled():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:29

int metal_buserror_set_event_enabled(struct metal_buserror *beu,
                                     metal_buserror_event_t events,
                                     bool enabled) {
    48003d48:	7179                	add	sp,sp,-48
    48003d4a:	f406                	sd	ra,40(sp)
    48003d4c:	f022                	sd	s0,32(sp)
    48003d4e:	1800                	add	s0,sp,48
    48003d50:	fca43c23          	sd	a0,-40(s0)
    48003d54:	87ae                	mv	a5,a1
    48003d56:	8732                	mv	a4,a2
    48003d58:	fcf42a23          	sw	a5,-44(s0)
    48003d5c:	87ba                	mv	a5,a4
    48003d5e:	fcf409a3          	sb	a5,-45(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:30
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    48003d62:	fd843503          	ld	a0,-40(s0)
    48003d66:	f1dff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    48003d6a:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:31
    if (base == (uintptr_t)NULL) {
    48003d6e:	fe843783          	ld	a5,-24(s0)
    48003d72:	e399                	bnez	a5,48003d78 <metal_buserror_set_event_enabled+0x30>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:32
        return 1;
    48003d74:	4785                	li	a5,1
    48003d76:	a069                	j	48003e00 <metal_buserror_set_event_enabled+0xb8>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:34
    }
    if (!(events & METAL_BUSERROR_EVENT_ANY)) {
    48003d78:	fd442783          	lw	a5,-44(s0)
    48003d7c:	873e                	mv	a4,a5
    48003d7e:	6785                	lui	a5,0x1
    48003d80:	eee78793          	add	a5,a5,-274 # eee <__heap_size+0x6ee>
    48003d84:	8ff9                	and	a5,a5,a4
    48003d86:	2781                	sext.w	a5,a5
    48003d88:	e399                	bnez	a5,48003d8e <metal_buserror_set_event_enabled+0x46>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:35
        return 2;
    48003d8a:	4789                	li	a5,2
    48003d8c:	a895                	j	48003e00 <metal_buserror_set_event_enabled+0xb8>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:38
    }

    uintptr_t reg_enable = base + METAL_SIFIVE_BUSERROR0_ENABLE;
    48003d8e:	fe843783          	ld	a5,-24(s0)
    48003d92:	07c1                	add	a5,a5,16
    48003d94:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:40

    if (enabled) {
    48003d98:	fd344783          	lbu	a5,-45(s0)
    48003d9c:	9fe1                	zext.b	a5,a5
    48003d9e:	c385                	beqz	a5,48003dbe <metal_buserror_set_event_enabled+0x76>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:41
        __METAL_ACCESS_ONCE((__metal_io_u8 *)reg_enable) |= events;
    48003da0:	fe043783          	ld	a5,-32(s0)
    48003da4:	839c                	lbu	a5,0(a5)
    48003da6:	0ff7f693          	zext.b	a3,a5
    48003daa:	fd442783          	lw	a5,-44(s0)
    48003dae:	0ff7f713          	zext.b	a4,a5
    48003db2:	fe043783          	ld	a5,-32(s0)
    48003db6:	8f55                	or	a4,a4,a3
    48003db8:	9f61                	zext.b	a4,a4
    48003dba:	8b98                	sb	a4,0(a5)
    48003dbc:	a00d                	j	48003dde <metal_buserror_set_event_enabled+0x96>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:43
    } else {
        __METAL_ACCESS_ONCE((__metal_io_u8 *)reg_enable) &= ~events;
    48003dbe:	fe043783          	ld	a5,-32(s0)
    48003dc2:	839c                	lbu	a5,0(a5)
    48003dc4:	0ff7f693          	zext.b	a3,a5
    48003dc8:	fd442783          	lw	a5,-44(s0)
    48003dcc:	9fe1                	zext.b	a5,a5
    48003dce:	9ff5                	not	a5,a5
    48003dd0:	0ff7f713          	zext.b	a4,a5
    48003dd4:	fe043783          	ld	a5,-32(s0)
    48003dd8:	8f75                	and	a4,a4,a3
    48003dda:	9f61                	zext.b	a4,a4
    48003ddc:	8b98                	sb	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:46
    }

    if (!(events & __METAL_ACCESS_ONCE((__metal_io_u8 *)reg_enable))) {
    48003dde:	fe043783          	ld	a5,-32(s0)
    48003de2:	839c                	lbu	a5,0(a5)
    48003de4:	9fe1                	zext.b	a5,a5
    48003de6:	2781                	sext.w	a5,a5
    48003de8:	fd442703          	lw	a4,-44(s0)
    48003dec:	8ff9                	and	a5,a5,a4
    48003dee:	2781                	sext.w	a5,a5
    48003df0:	e799                	bnez	a5,48003dfe <metal_buserror_set_event_enabled+0xb6>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:47
        return __METAL_ACCESS_ONCE((__metal_io_u8 *)reg_enable);
    48003df2:	fe043783          	ld	a5,-32(s0)
    48003df6:	839c                	lbu	a5,0(a5)
    48003df8:	9fe1                	zext.b	a5,a5
    48003dfa:	2781                	sext.w	a5,a5
    48003dfc:	a011                	j	48003e00 <metal_buserror_set_event_enabled+0xb8>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:50
    }

    return 0;
    48003dfe:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:51
}
    48003e00:	853e                	mv	a0,a5
    48003e02:	70a2                	ld	ra,40(sp)
    48003e04:	7402                	ld	s0,32(sp)
    48003e06:	6145                	add	sp,sp,48
    48003e08:	8082                	ret

0000000048003e0a <metal_buserror_get_event_enabled>:
metal_buserror_get_event_enabled():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:54

metal_buserror_event_t
metal_buserror_get_event_enabled(struct metal_buserror *beu) {
    48003e0a:	7179                	add	sp,sp,-48
    48003e0c:	f406                	sd	ra,40(sp)
    48003e0e:	f022                	sd	s0,32(sp)
    48003e10:	1800                	add	s0,sp,48
    48003e12:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:55
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    48003e16:	fd843503          	ld	a0,-40(s0)
    48003e1a:	e69ff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    48003e1e:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:56
    if (base == (uintptr_t)NULL) {
    48003e22:	fe843783          	ld	a5,-24(s0)
    48003e26:	e399                	bnez	a5,48003e2c <metal_buserror_get_event_enabled+0x22>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:57
        return 1;
    48003e28:	4785                	li	a5,1
    48003e2a:	a819                	j	48003e40 <metal_buserror_get_event_enabled+0x36>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:60
    }

    uintptr_t reg_enable = base + METAL_SIFIVE_BUSERROR0_ENABLE;
    48003e2c:	fe843783          	ld	a5,-24(s0)
    48003e30:	07c1                	add	a5,a5,16
    48003e32:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:62

    return __METAL_ACCESS_ONCE((__metal_io_u8 *)reg_enable);
    48003e36:	fe043783          	ld	a5,-32(s0)
    48003e3a:	839c                	lbu	a5,0(a5)
    48003e3c:	9fe1                	zext.b	a5,a5
    48003e3e:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:63
}
    48003e40:	853e                	mv	a0,a5
    48003e42:	70a2                	ld	ra,40(sp)
    48003e44:	7402                	ld	s0,32(sp)
    48003e46:	6145                	add	sp,sp,48
    48003e48:	8082                	ret

0000000048003e4a <metal_buserror_set_platform_interrupt>:
metal_buserror_set_platform_interrupt():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:67

int metal_buserror_set_platform_interrupt(struct metal_buserror *beu,
                                          metal_buserror_event_t events,
                                          bool enabled) {
    48003e4a:	7179                	add	sp,sp,-48
    48003e4c:	f406                	sd	ra,40(sp)
    48003e4e:	f022                	sd	s0,32(sp)
    48003e50:	1800                	add	s0,sp,48
    48003e52:	fca43c23          	sd	a0,-40(s0)
    48003e56:	87ae                	mv	a5,a1
    48003e58:	8732                	mv	a4,a2
    48003e5a:	fcf42a23          	sw	a5,-44(s0)
    48003e5e:	87ba                	mv	a5,a4
    48003e60:	fcf409a3          	sb	a5,-45(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:68
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    48003e64:	fd843503          	ld	a0,-40(s0)
    48003e68:	e1bff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    48003e6c:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:69
    if (base == (uintptr_t)NULL) {
    48003e70:	fe843783          	ld	a5,-24(s0)
    48003e74:	e399                	bnez	a5,48003e7a <metal_buserror_set_platform_interrupt+0x30>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:70
        return 1;
    48003e76:	4785                	li	a5,1
    48003e78:	a0ad                	j	48003ee2 <metal_buserror_set_platform_interrupt+0x98>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:72
    }
    if (!(events & METAL_BUSERROR_EVENT_ANY)) {
    48003e7a:	fd442783          	lw	a5,-44(s0)
    48003e7e:	873e                	mv	a4,a5
    48003e80:	6785                	lui	a5,0x1
    48003e82:	eee78793          	add	a5,a5,-274 # eee <__heap_size+0x6ee>
    48003e86:	8ff9                	and	a5,a5,a4
    48003e88:	2781                	sext.w	a5,a5
    48003e8a:	e399                	bnez	a5,48003e90 <metal_buserror_set_platform_interrupt+0x46>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:73
        return 2;
    48003e8c:	4789                	li	a5,2
    48003e8e:	a891                	j	48003ee2 <metal_buserror_set_platform_interrupt+0x98>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:76
    }

    uintptr_t platform_interrupt =
    48003e90:	fe843783          	ld	a5,-24(s0)
    48003e94:	07e1                	add	a5,a5,24
    48003e96:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:79
        base + METAL_SIFIVE_BUSERROR0_PLATFORM_INTERRUPT;

    if (enabled) {
    48003e9a:	fd344783          	lbu	a5,-45(s0)
    48003e9e:	9fe1                	zext.b	a5,a5
    48003ea0:	c385                	beqz	a5,48003ec0 <metal_buserror_set_platform_interrupt+0x76>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:80
        __METAL_ACCESS_ONCE((__metal_io_u8 *)platform_interrupt) |= events;
    48003ea2:	fe043783          	ld	a5,-32(s0)
    48003ea6:	839c                	lbu	a5,0(a5)
    48003ea8:	0ff7f693          	zext.b	a3,a5
    48003eac:	fd442783          	lw	a5,-44(s0)
    48003eb0:	0ff7f713          	zext.b	a4,a5
    48003eb4:	fe043783          	ld	a5,-32(s0)
    48003eb8:	8f55                	or	a4,a4,a3
    48003eba:	9f61                	zext.b	a4,a4
    48003ebc:	8b98                	sb	a4,0(a5)
    48003ebe:	a00d                	j	48003ee0 <metal_buserror_set_platform_interrupt+0x96>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:82
    } else {
        __METAL_ACCESS_ONCE((__metal_io_u8 *)platform_interrupt) &= ~events;
    48003ec0:	fe043783          	ld	a5,-32(s0)
    48003ec4:	839c                	lbu	a5,0(a5)
    48003ec6:	0ff7f693          	zext.b	a3,a5
    48003eca:	fd442783          	lw	a5,-44(s0)
    48003ece:	9fe1                	zext.b	a5,a5
    48003ed0:	9ff5                	not	a5,a5
    48003ed2:	0ff7f713          	zext.b	a4,a5
    48003ed6:	fe043783          	ld	a5,-32(s0)
    48003eda:	8f75                	and	a4,a4,a3
    48003edc:	9f61                	zext.b	a4,a4
    48003ede:	8b98                	sb	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:85
    }

    return 0;
    48003ee0:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:86
}
    48003ee2:	853e                	mv	a0,a5
    48003ee4:	70a2                	ld	ra,40(sp)
    48003ee6:	7402                	ld	s0,32(sp)
    48003ee8:	6145                	add	sp,sp,48
    48003eea:	8082                	ret

0000000048003eec <metal_buserror_set_local_interrupt>:
metal_buserror_set_local_interrupt():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:90

int metal_buserror_set_local_interrupt(struct metal_buserror *beu,
                                       metal_buserror_event_t events,
                                       bool enabled) {
    48003eec:	7179                	add	sp,sp,-48
    48003eee:	f406                	sd	ra,40(sp)
    48003ef0:	f022                	sd	s0,32(sp)
    48003ef2:	1800                	add	s0,sp,48
    48003ef4:	fca43c23          	sd	a0,-40(s0)
    48003ef8:	87ae                	mv	a5,a1
    48003efa:	8732                	mv	a4,a2
    48003efc:	fcf42a23          	sw	a5,-44(s0)
    48003f00:	87ba                	mv	a5,a4
    48003f02:	fcf409a3          	sb	a5,-45(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:91
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    48003f06:	fd843503          	ld	a0,-40(s0)
    48003f0a:	d79ff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    48003f0e:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:92
    if (base == (uintptr_t)NULL) {
    48003f12:	fe843783          	ld	a5,-24(s0)
    48003f16:	e399                	bnez	a5,48003f1c <metal_buserror_set_local_interrupt+0x30>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:93
        return 1;
    48003f18:	4785                	li	a5,1
    48003f1a:	a0b5                	j	48003f86 <metal_buserror_set_local_interrupt+0x9a>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:95
    }
    if (!(events & METAL_BUSERROR_EVENT_ANY)) {
    48003f1c:	fd442783          	lw	a5,-44(s0)
    48003f20:	873e                	mv	a4,a5
    48003f22:	6785                	lui	a5,0x1
    48003f24:	eee78793          	add	a5,a5,-274 # eee <__heap_size+0x6ee>
    48003f28:	8ff9                	and	a5,a5,a4
    48003f2a:	2781                	sext.w	a5,a5
    48003f2c:	e399                	bnez	a5,48003f32 <metal_buserror_set_local_interrupt+0x46>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:96
        return 2;
    48003f2e:	4789                	li	a5,2
    48003f30:	a899                	j	48003f86 <metal_buserror_set_local_interrupt+0x9a>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:99
    }

    uintptr_t local_interrupt = base + METAL_SIFIVE_BUSERROR0_LOCAL_INTERRUPT;
    48003f32:	fe843783          	ld	a5,-24(s0)
    48003f36:	02878793          	add	a5,a5,40
    48003f3a:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:101

    if (enabled) {
    48003f3e:	fd344783          	lbu	a5,-45(s0)
    48003f42:	9fe1                	zext.b	a5,a5
    48003f44:	c385                	beqz	a5,48003f64 <metal_buserror_set_local_interrupt+0x78>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:102
        __METAL_ACCESS_ONCE((__metal_io_u8 *)local_interrupt) |= events;
    48003f46:	fe043783          	ld	a5,-32(s0)
    48003f4a:	839c                	lbu	a5,0(a5)
    48003f4c:	0ff7f693          	zext.b	a3,a5
    48003f50:	fd442783          	lw	a5,-44(s0)
    48003f54:	0ff7f713          	zext.b	a4,a5
    48003f58:	fe043783          	ld	a5,-32(s0)
    48003f5c:	8f55                	or	a4,a4,a3
    48003f5e:	9f61                	zext.b	a4,a4
    48003f60:	8b98                	sb	a4,0(a5)
    48003f62:	a00d                	j	48003f84 <metal_buserror_set_local_interrupt+0x98>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:104
    } else {
        __METAL_ACCESS_ONCE((__metal_io_u8 *)local_interrupt) &= ~events;
    48003f64:	fe043783          	ld	a5,-32(s0)
    48003f68:	839c                	lbu	a5,0(a5)
    48003f6a:	0ff7f693          	zext.b	a3,a5
    48003f6e:	fd442783          	lw	a5,-44(s0)
    48003f72:	9fe1                	zext.b	a5,a5
    48003f74:	9ff5                	not	a5,a5
    48003f76:	0ff7f713          	zext.b	a4,a5
    48003f7a:	fe043783          	ld	a5,-32(s0)
    48003f7e:	8f75                	and	a4,a4,a3
    48003f80:	9f61                	zext.b	a4,a4
    48003f82:	8b98                	sb	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:107
    }

    return 0;
    48003f84:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:108
}
    48003f86:	853e                	mv	a0,a5
    48003f88:	70a2                	ld	ra,40(sp)
    48003f8a:	7402                	ld	s0,32(sp)
    48003f8c:	6145                	add	sp,sp,48
    48003f8e:	8082                	ret

0000000048003f90 <metal_buserror_get_cause>:
metal_buserror_get_cause():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:110

metal_buserror_event_t metal_buserror_get_cause(struct metal_buserror *beu) {
    48003f90:	7179                	add	sp,sp,-48
    48003f92:	f406                	sd	ra,40(sp)
    48003f94:	f022                	sd	s0,32(sp)
    48003f96:	1800                	add	s0,sp,48
    48003f98:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:111
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    48003f9c:	fd843503          	ld	a0,-40(s0)
    48003fa0:	ce3ff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    48003fa4:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:112
    if (base == (uintptr_t)NULL) {
    48003fa8:	fe843783          	ld	a5,-24(s0)
    48003fac:	e781                	bnez	a5,48003fb4 <metal_buserror_get_cause+0x24>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:113
        return METAL_BUSERROR_EVENT_INVALID;
    48003fae:	10000793          	li	a5,256
    48003fb2:	a839                	j	48003fd0 <metal_buserror_get_cause+0x40>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:116
    }

    uintptr_t cause = base + METAL_SIFIVE_BUSERROR0_CAUSE;
    48003fb4:	fe843783          	ld	a5,-24(s0)
    48003fb8:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:119

    return (metal_buserror_event_t)(
        1 << __METAL_ACCESS_ONCE((__metal_io_u8 *)cause));
    48003fbc:	fe043783          	ld	a5,-32(s0)
    48003fc0:	839c                	lbu	a5,0(a5)
    48003fc2:	9fe1                	zext.b	a5,a5
    48003fc4:	2781                	sext.w	a5,a5
    48003fc6:	4705                	li	a4,1
    48003fc8:	00f717bb          	sllw	a5,a4,a5
    48003fcc:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:118
    return (metal_buserror_event_t)(
    48003fce:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:120
}
    48003fd0:	853e                	mv	a0,a5
    48003fd2:	70a2                	ld	ra,40(sp)
    48003fd4:	7402                	ld	s0,32(sp)
    48003fd6:	6145                	add	sp,sp,48
    48003fd8:	8082                	ret

0000000048003fda <metal_buserror_clear_cause>:
metal_buserror_clear_cause():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:122

int metal_buserror_clear_cause(struct metal_buserror *beu) {
    48003fda:	7179                	add	sp,sp,-48
    48003fdc:	f406                	sd	ra,40(sp)
    48003fde:	f022                	sd	s0,32(sp)
    48003fe0:	1800                	add	s0,sp,48
    48003fe2:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:123
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    48003fe6:	fd843503          	ld	a0,-40(s0)
    48003fea:	c99ff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    48003fee:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:124
    if (base == (uintptr_t)NULL) {
    48003ff2:	fe843783          	ld	a5,-24(s0)
    48003ff6:	e781                	bnez	a5,48003ffe <metal_buserror_clear_cause+0x24>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:127
        /* We return (1 << 8) because the value of the cause register
         * can never equal that value */
        return (1 << 8);
    48003ff8:	10000793          	li	a5,256
    48003ffc:	a831                	j	48004018 <metal_buserror_clear_cause+0x3e>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:130
    }

    uintptr_t cause = base + METAL_SIFIVE_BUSERROR0_CAUSE;
    48003ffe:	fe843783          	ld	a5,-24(s0)
    48004002:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:131
    __METAL_ACCESS_ONCE((__metal_io_u8 *)cause) = METAL_BUSERROR_EVENT_NONE;
    48004006:	fe043783          	ld	a5,-32(s0)
    4800400a:	00078023          	sb	zero,0(a5)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:133

    return __METAL_ACCESS_ONCE((__metal_io_u8 *)cause);
    4800400e:	fe043783          	ld	a5,-32(s0)
    48004012:	839c                	lbu	a5,0(a5)
    48004014:	9fe1                	zext.b	a5,a5
    48004016:	2781                	sext.w	a5,a5
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:134
}
    48004018:	853e                	mv	a0,a5
    4800401a:	70a2                	ld	ra,40(sp)
    4800401c:	7402                	ld	s0,32(sp)
    4800401e:	6145                	add	sp,sp,48
    48004020:	8082                	ret

0000000048004022 <metal_buserror_get_event_address>:
metal_buserror_get_event_address():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:136

uintptr_t metal_buserror_get_event_address(struct metal_buserror *beu) {
    48004022:	7179                	add	sp,sp,-48
    48004024:	f406                	sd	ra,40(sp)
    48004026:	f022                	sd	s0,32(sp)
    48004028:	1800                	add	s0,sp,48
    4800402a:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:137
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    4800402e:	fd843503          	ld	a0,-40(s0)
    48004032:	c51ff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    48004036:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:138
    if (base == (uintptr_t)NULL) {
    4800403a:	fe843783          	ld	a5,-24(s0)
    4800403e:	e399                	bnez	a5,48004044 <metal_buserror_get_event_address+0x22>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:139
        return 0;
    48004040:	4781                	li	a5,0
    48004042:	a811                	j	48004056 <metal_buserror_get_event_address+0x34>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:142
    }

    uintptr_t value = base + METAL_SIFIVE_BUSERROR0_VALUE;
    48004044:	fe843783          	ld	a5,-24(s0)
    48004048:	07a1                	add	a5,a5,8
    4800404a:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:144

    return __METAL_ACCESS_ONCE((__metal_io_u8 *)value);
    4800404e:	fe043783          	ld	a5,-32(s0)
    48004052:	839c                	lbu	a5,0(a5)
    48004054:	9fe1                	zext.b	a5,a5
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:145
}
    48004056:	853e                	mv	a0,a5
    48004058:	70a2                	ld	ra,40(sp)
    4800405a:	7402                	ld	s0,32(sp)
    4800405c:	6145                	add	sp,sp,48
    4800405e:	8082                	ret

0000000048004060 <metal_buserror_is_event_accrued>:
metal_buserror_is_event_accrued():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:148

bool metal_buserror_is_event_accrued(struct metal_buserror *beu,
                                     metal_buserror_event_t events) {
    48004060:	7179                	add	sp,sp,-48
    48004062:	f406                	sd	ra,40(sp)
    48004064:	f022                	sd	s0,32(sp)
    48004066:	1800                	add	s0,sp,48
    48004068:	fca43c23          	sd	a0,-40(s0)
    4800406c:	87ae                	mv	a5,a1
    4800406e:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:149
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    48004072:	fd843503          	ld	a0,-40(s0)
    48004076:	c0dff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    4800407a:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:150
    if (base == (uintptr_t)NULL) {
    4800407e:	fe843783          	ld	a5,-24(s0)
    48004082:	e399                	bnez	a5,48004088 <metal_buserror_is_event_accrued+0x28>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:151
        return false;
    48004084:	4781                	li	a5,0
    48004086:	a835                	j	480040c2 <metal_buserror_is_event_accrued+0x62>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:154
    }

    uintptr_t accrued = base + METAL_SIFIVE_BUSERROR0_ACCRUED;
    48004088:	fe843783          	ld	a5,-24(s0)
    4800408c:	02078793          	add	a5,a5,32
    48004090:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:156

    if (!(events & METAL_BUSERROR_EVENT_ANY)) {
    48004094:	fd442783          	lw	a5,-44(s0)
    48004098:	873e                	mv	a4,a5
    4800409a:	6785                	lui	a5,0x1
    4800409c:	eee78793          	add	a5,a5,-274 # eee <__heap_size+0x6ee>
    480040a0:	8ff9                	and	a5,a5,a4
    480040a2:	2781                	sext.w	a5,a5
    480040a4:	e399                	bnez	a5,480040aa <metal_buserror_is_event_accrued+0x4a>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:157
        return false;
    480040a6:	4781                	li	a5,0
    480040a8:	a829                	j	480040c2 <metal_buserror_is_event_accrued+0x62>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:160
    }

    return !!(events & __METAL_ACCESS_ONCE((__metal_io_u8 *)accrued));
    480040aa:	fe043783          	ld	a5,-32(s0)
    480040ae:	839c                	lbu	a5,0(a5)
    480040b0:	9fe1                	zext.b	a5,a5
    480040b2:	2781                	sext.w	a5,a5
    480040b4:	fd442703          	lw	a4,-44(s0)
    480040b8:	8ff9                	and	a5,a5,a4
    480040ba:	2781                	sext.w	a5,a5
    480040bc:	00f037b3          	snez	a5,a5
    480040c0:	9fe1                	zext.b	a5,a5
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:161
}
    480040c2:	853e                	mv	a0,a5
    480040c4:	70a2                	ld	ra,40(sp)
    480040c6:	7402                	ld	s0,32(sp)
    480040c8:	6145                	add	sp,sp,48
    480040ca:	8082                	ret

00000000480040cc <metal_buserror_clear_event_accrued>:
metal_buserror_clear_event_accrued():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:164

int metal_buserror_clear_event_accrued(struct metal_buserror *beu,
                                       metal_buserror_event_t events) {
    480040cc:	7179                	add	sp,sp,-48
    480040ce:	f406                	sd	ra,40(sp)
    480040d0:	f022                	sd	s0,32(sp)
    480040d2:	1800                	add	s0,sp,48
    480040d4:	fca43c23          	sd	a0,-40(s0)
    480040d8:	87ae                	mv	a5,a1
    480040da:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:165
    uintptr_t base = __metal_driver_sifive_buserror0_control_base(beu);
    480040de:	fd843503          	ld	a0,-40(s0)
    480040e2:	ba1ff0ef          	jal	48003c82 <__metal_driver_sifive_buserror0_control_base>
    480040e6:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:166
    if (base == (uintptr_t)NULL) {
    480040ea:	fe843783          	ld	a5,-24(s0)
    480040ee:	e781                	bnez	a5,480040f6 <metal_buserror_clear_event_accrued+0x2a>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:169
        /* We return (1 << 8) because the value of the accrued register
         * can never equal that value */
        return (1 << 8);
    480040f0:	10000793          	li	a5,256
    480040f4:	a0a5                	j	4800415c <metal_buserror_clear_event_accrued+0x90>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:172
    }

    uintptr_t accrued = base + METAL_SIFIVE_BUSERROR0_ACCRUED;
    480040f6:	fe843783          	ld	a5,-24(s0)
    480040fa:	02078793          	add	a5,a5,32
    480040fe:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:174

    if (!(events & METAL_BUSERROR_EVENT_ANY)) {
    48004102:	fd442783          	lw	a5,-44(s0)
    48004106:	873e                	mv	a4,a5
    48004108:	6785                	lui	a5,0x1
    4800410a:	eee78793          	add	a5,a5,-274 # eee <__heap_size+0x6ee>
    4800410e:	8ff9                	and	a5,a5,a4
    48004110:	2781                	sext.w	a5,a5
    48004112:	e781                	bnez	a5,4800411a <metal_buserror_clear_event_accrued+0x4e>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:177
        /* We return (1 << 9) because the value of the accrued register
         * can never equal that value */
        return (1 << 9);
    48004114:	20000793          	li	a5,512
    48004118:	a091                	j	4800415c <metal_buserror_clear_event_accrued+0x90>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:179
    } else {
        __METAL_ACCESS_ONCE((__metal_io_u8 *)accrued) &= ~events;
    4800411a:	fe043783          	ld	a5,-32(s0)
    4800411e:	839c                	lbu	a5,0(a5)
    48004120:	0ff7f693          	zext.b	a3,a5
    48004124:	fd442783          	lw	a5,-44(s0)
    48004128:	9fe1                	zext.b	a5,a5
    4800412a:	9ff5                	not	a5,a5
    4800412c:	0ff7f713          	zext.b	a4,a5
    48004130:	fe043783          	ld	a5,-32(s0)
    48004134:	8f75                	and	a4,a4,a3
    48004136:	9f61                	zext.b	a4,a4
    48004138:	8b98                	sb	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:180
        if (events & __METAL_ACCESS_ONCE((__metal_io_u8 *)accrued)) {
    4800413a:	fe043783          	ld	a5,-32(s0)
    4800413e:	839c                	lbu	a5,0(a5)
    48004140:	9fe1                	zext.b	a5,a5
    48004142:	2781                	sext.w	a5,a5
    48004144:	fd442703          	lw	a4,-44(s0)
    48004148:	8ff9                	and	a5,a5,a4
    4800414a:	2781                	sext.w	a5,a5
    4800414c:	c799                	beqz	a5,4800415a <metal_buserror_clear_event_accrued+0x8e>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:181
            return __METAL_ACCESS_ONCE((__metal_io_u8 *)accrued);
    4800414e:	fe043783          	ld	a5,-32(s0)
    48004152:	839c                	lbu	a5,0(a5)
    48004154:	9fe1                	zext.b	a5,a5
    48004156:	2781                	sext.w	a5,a5
    48004158:	a011                	j	4800415c <metal_buserror_clear_event_accrued+0x90>
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:185
        }
    }

    return 0;
    4800415a:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:186
}
    4800415c:	853e                	mv	a0,a5
    4800415e:	70a2                	ld	ra,40(sp)
    48004160:	7402                	ld	s0,32(sp)
    48004162:	6145                	add	sp,sp,48
    48004164:	8082                	ret

0000000048004166 <metal_buserror_get_platform_interrupt_parent>:
metal_buserror_get_platform_interrupt_parent():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:189

struct metal_interrupt *
metal_buserror_get_platform_interrupt_parent(struct metal_buserror *beu) {
    48004166:	1101                	add	sp,sp,-32
    48004168:	ec06                	sd	ra,24(sp)
    4800416a:	e822                	sd	s0,16(sp)
    4800416c:	1000                	add	s0,sp,32
    4800416e:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:190
    return __metal_driver_sifive_buserror0_interrupt_parent(beu);
    48004172:	fe843503          	ld	a0,-24(s0)
    48004176:	b33ff0ef          	jal	48003ca8 <__metal_driver_sifive_buserror0_interrupt_parent>
    4800417a:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:191
}
    4800417c:	853e                	mv	a0,a5
    4800417e:	60e2                	ld	ra,24(sp)
    48004180:	6442                	ld	s0,16(sp)
    48004182:	6105                	add	sp,sp,32
    48004184:	8082                	ret

0000000048004186 <metal_buserror_get_platform_interrupt_id>:
metal_buserror_get_platform_interrupt_id():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:193

int metal_buserror_get_platform_interrupt_id(struct metal_buserror *beu) {
    48004186:	1101                	add	sp,sp,-32
    48004188:	ec06                	sd	ra,24(sp)
    4800418a:	e822                	sd	s0,16(sp)
    4800418c:	1000                	add	s0,sp,32
    4800418e:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:194
    return __metal_driver_sifive_buserror0_interrupt_id(beu);
    48004192:	fe843503          	ld	a0,-24(s0)
    48004196:	b3dff0ef          	jal	48003cd2 <__metal_driver_sifive_buserror0_interrupt_id>
    4800419a:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:195
}
    4800419c:	853e                	mv	a0,a5
    4800419e:	60e2                	ld	ra,24(sp)
    480041a0:	6442                	ld	s0,16(sp)
    480041a2:	6105                	add	sp,sp,32
    480041a4:	8082                	ret

00000000480041a6 <metal_buserror_get_local_interrupt_id>:
metal_buserror_get_local_interrupt_id():
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:197

int metal_buserror_get_local_interrupt_id(struct metal_buserror *beu) {
    480041a6:	1101                	add	sp,sp,-32
    480041a8:	ec22                	sd	s0,24(sp)
    480041aa:	1000                	add	s0,sp,32
    480041ac:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:198
    return 128;
    480041b0:	08000793          	li	a5,128
validation-software/freedom-metal/src/drivers/sifive_buserror0.c:199
}
    480041b4:	853e                	mv	a0,a5
    480041b6:	6462                	ld	s0,24(sp)
    480041b8:	6105                	add	sp,sp,32
    480041ba:	8082                	ret

00000000480041bc <sifive_extensiblecache0_init>:
sifive_extensiblecache0_init():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:77
                                  enum sifive_extensiblecache0_flush_options option);

/**
 * Functions definitions
 */
int sifive_extensiblecache0_init(void) {
    480041bc:	1101                	add	sp,sp,-32
    480041be:	ec06                	sd	ra,24(sp)
    480041c0:	e822                	sd	s0,16(sp)
    480041c2:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:79

    for (unsigned idx = 0U; idx < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT; ++idx) {
    480041c4:	fe042623          	sw	zero,-20(s0)
    480041c8:	a891                	j	4800421c <sifive_extensiblecache0_init+0x60>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:80 (discriminator 3)
        sifive_extensiblecache0_clock_gating_enable(idx,
    480041ca:	fec46783          	lwu	a5,-20(s0)
    480041ce:	4581                	li	a1,0
    480041d0:	853e                	mv	a0,a5
    480041d2:	180000ef          	jal	48004352 <sifive_extensiblecache0_clock_gating_enable>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:82 (discriminator 3)
                                                    SIFIVE_EXTENSIBLECACHE0_CG_SLICE_LEVEL);
        sifive_extensiblecache0_clock_gating_enable(idx,
    480041d6:	fec46783          	lwu	a5,-20(s0)
    480041da:	4585                	li	a1,1
    480041dc:	853e                	mv	a0,a5
    480041de:	174000ef          	jal	48004352 <sifive_extensiblecache0_clock_gating_enable>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:84 (discriminator 3)
                                                    SIFIVE_EXTENSIBLECACHE0_CG_ART);
        sifive_extensiblecache0_clock_gating_enable(idx,
    480041e2:	fec46783          	lwu	a5,-20(s0)
    480041e6:	4589                	li	a1,2
    480041e8:	853e                	mv	a0,a5
    480041ea:	168000ef          	jal	48004352 <sifive_extensiblecache0_clock_gating_enable>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:86 (discriminator 3)
                                                    SIFIVE_EXTENSIBLECACHE0_CG_CONTROL_BLOCK);
        sifive_extensiblecache0_clock_gating_enable(idx,
    480041ee:	fec46783          	lwu	a5,-20(s0)
    480041f2:	458d                	li	a1,3
    480041f4:	853e                	mv	a0,a5
    480041f6:	15c000ef          	jal	48004352 <sifive_extensiblecache0_clock_gating_enable>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:88 (discriminator 3)
                                                    SIFIVE_EXTENSIBLECACHE0_CG_PERF_MONITOR);
        sifive_extensiblecache0_clock_gating_enable(idx,
    480041fa:	fec46783          	lwu	a5,-20(s0)
    480041fe:	4591                	li	a1,4
    48004200:	853e                	mv	a0,a5
    48004202:	150000ef          	jal	48004352 <sifive_extensiblecache0_clock_gating_enable>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:90 (discriminator 3)
                                                    SIFIVE_EXTENSIBLECACHE0_CG_BUCKET_MONITOR);
        sifive_extensiblecache0_clock_gating_enable(idx,
    48004206:	fec46783          	lwu	a5,-20(s0)
    4800420a:	4595                	li	a1,5
    4800420c:	853e                	mv	a0,a5
    4800420e:	144000ef          	jal	48004352 <sifive_extensiblecache0_clock_gating_enable>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:79 (discriminator 3)
    for (unsigned idx = 0U; idx < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT; ++idx) {
    48004212:	fec42783          	lw	a5,-20(s0)
    48004216:	2785                	addw	a5,a5,1
    48004218:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:79 (discriminator 1)
    4800421c:	fec42783          	lw	a5,-20(s0)
    48004220:	0007871b          	sext.w	a4,a5
    48004224:	4785                	li	a5,1
    48004226:	fae7f2e3          	bgeu	a5,a4,480041ca <sifive_extensiblecache0_init+0xe>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:93
                                                    SIFIVE_EXTENSIBLECACHE0_CG_PPAMO);
    }
    return 0;
    4800422a:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:94
}
    4800422c:	853e                	mv	a0,a5
    4800422e:	60e2                	ld	ra,24(sp)
    48004230:	6442                	ld	s0,16(sp)
    48004232:	6105                	add	sp,sp,32
    48004234:	8082                	ret

0000000048004236 <sifive_extensiblecache0_get_data_config>:
sifive_extensiblecache0_get_data_config():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:98

int sifive_extensiblecache0_get_data_config(
    size_t slice_index,
    struct sifive_extensiblecache0_data_config *data_config) {
    48004236:	7179                	add	sp,sp,-48
    48004238:	f422                	sd	s0,40(sp)
    4800423a:	1800                	add	s0,sp,48
    4800423c:	fca43c23          	sd	a0,-40(s0)
    48004240:	fcb43823          	sd	a1,-48(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:100

    int ret = -EINVAL;
    48004244:	57a9                	li	a5,-22
    48004246:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:101
    if (data_config && slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT) {
    4800424a:	fd043783          	ld	a5,-48(s0)
    4800424e:	c7ad                	beqz	a5,480042b8 <sifive_extensiblecache0_get_data_config+0x82>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:101 (discriminator 1)
    48004250:	fd843703          	ld	a4,-40(s0)
    48004254:	4785                	li	a5,1
    48004256:	06e7e163          	bltu	a5,a4,480042b8 <sifive_extensiblecache0_get_data_config+0x82>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:104
        /* Get control port base address */
        EXTENSIBLECACHE_Type *const ec = \
            (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    4800425a:	ffffc717          	auipc	a4,0xffffc
    4800425e:	66e70713          	add	a4,a4,1646 # 480008c8 <_SLICES>
    48004262:	fd843783          	ld	a5,-40(s0)
    48004266:	0792                	sll	a5,a5,0x4
    48004268:	97ba                	add	a5,a5,a4
    4800426a:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:103
        EXTENSIBLECACHE_Type *const ec = \
    4800426c:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:107
        /* Fill-out data config structure */
        data_config->data_capacity = \
            READ_FIELD(ec->DATAARRAYCONFIG, EC_DATA_CONFIG_BUFFER_CAPACITY_MASK);
    48004270:	fe043783          	ld	a5,-32(s0)
    48004274:	6398                	ld	a4,0(a5)
    48004276:	2a001793          	bset	a5,zero,0x20
    4800427a:	17fd                	add	a5,a5,-1
    4800427c:	8f7d                	and	a4,a4,a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:106
        data_config->data_capacity = \
    4800427e:	fd043783          	ld	a5,-48(s0)
    48004282:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:109
        data_config->num_banks = \
            READ_FIELD(ec->DATAARRAYCONFIG, EC_DATA_CONFIG_NUM_BANKS_MASK);
    48004284:	fe043783          	ld	a5,-32(s0)
    48004288:	6398                	ld	a4,0(a5)
    4800428a:	0ff00793          	li	a5,255
    4800428e:	1782                	sll	a5,a5,0x20
    48004290:	8ff9                	and	a5,a5,a4
    48004292:	0207d713          	srl	a4,a5,0x20
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:108
        data_config->num_banks = \
    48004296:	fd043783          	ld	a5,-48(s0)
    4800429a:	e798                	sd	a4,8(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:111
        data_config->line_size = \
            READ_FIELD(ec->DATAARRAYCONFIG, EC_DATA_CONFIG_LINE_SIZE_MASK);
    4800429c:	fe043783          	ld	a5,-32(s0)
    480042a0:	6398                	ld	a4,0(a5)
    480042a2:	0ff00793          	li	a5,255
    480042a6:	17a2                	sll	a5,a5,0x28
    480042a8:	8ff9                	and	a5,a5,a4
    480042aa:	0287d713          	srl	a4,a5,0x28
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:110
        data_config->line_size = \
    480042ae:	fd043783          	ld	a5,-48(s0)
    480042b2:	eb98                	sd	a4,16(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:113

        ret = 0;
    480042b4:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:116
    }

    return ret;
    480042b8:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:117
}
    480042bc:	853e                	mv	a0,a5
    480042be:	7422                	ld	s0,40(sp)
    480042c0:	6145                	add	sp,sp,48
    480042c2:	8082                	ret

00000000480042c4 <sifive_extensiblecache0_get_tag_config>:
sifive_extensiblecache0_get_tag_config():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:121

int sifive_extensiblecache0_get_tag_config(
    size_t slice_index,
    struct sifive_extensiblecache0_tag_config *tag_config) {
    480042c4:	7179                	add	sp,sp,-48
    480042c6:	f422                	sd	s0,40(sp)
    480042c8:	1800                	add	s0,sp,48
    480042ca:	fca43c23          	sd	a0,-40(s0)
    480042ce:	fcb43823          	sd	a1,-48(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:123

    int ret = -EINVAL;
    480042d2:	57a9                	li	a5,-22
    480042d4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:125

    if (tag_config && slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT) {
    480042d8:	fd043783          	ld	a5,-48(s0)
    480042dc:	c7ad                	beqz	a5,48004346 <sifive_extensiblecache0_get_tag_config+0x82>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:125 (discriminator 1)
    480042de:	fd843703          	ld	a4,-40(s0)
    480042e2:	4785                	li	a5,1
    480042e4:	06e7e163          	bltu	a5,a4,48004346 <sifive_extensiblecache0_get_tag_config+0x82>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:128
        /* Get control port base address */
        EXTENSIBLECACHE_Type *const ec = \
            (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    480042e8:	ffffc717          	auipc	a4,0xffffc
    480042ec:	5e070713          	add	a4,a4,1504 # 480008c8 <_SLICES>
    480042f0:	fd843783          	ld	a5,-40(s0)
    480042f4:	0792                	sll	a5,a5,0x4
    480042f6:	97ba                	add	a5,a5,a4
    480042f8:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:127
        EXTENSIBLECACHE_Type *const ec = \
    480042fa:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:131
        /* Fill-out tag config structure */
        tag_config->tag_capacity = \
            READ_FIELD(ec->TAGARRAYCONFIG, EC_TAG_CONFIG_TRACKING_CAPACITY_MASK);
    480042fe:	fe043783          	ld	a5,-32(s0)
    48004302:	6798                	ld	a4,8(a5)
    48004304:	2a001793          	bset	a5,zero,0x20
    48004308:	17fd                	add	a5,a5,-1
    4800430a:	8f7d                	and	a4,a4,a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:130
        tag_config->tag_capacity = \
    4800430c:	fd043783          	ld	a5,-48(s0)
    48004310:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:133
        tag_config->num_banks = \
            READ_FIELD(ec->TAGARRAYCONFIG, EC_TAG_CONFIG_NUM_BANKS_MASK);
    48004312:	fe043783          	ld	a5,-32(s0)
    48004316:	6798                	ld	a4,8(a5)
    48004318:	0ff00793          	li	a5,255
    4800431c:	1782                	sll	a5,a5,0x20
    4800431e:	8ff9                	and	a5,a5,a4
    48004320:	0207d713          	srl	a4,a5,0x20
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:132
        tag_config->num_banks = \
    48004324:	fd043783          	ld	a5,-48(s0)
    48004328:	e798                	sd	a4,8(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:135
        tag_config->associativity = \
            READ_FIELD(ec->TAGARRAYCONFIG, EC_TAG_CONFIG_ASSOCIATIVITY_MASK);
    4800432a:	fe043783          	ld	a5,-32(s0)
    4800432e:	6798                	ld	a4,8(a5)
    48004330:	0ff00793          	li	a5,255
    48004334:	17a2                	sll	a5,a5,0x28
    48004336:	8ff9                	and	a5,a5,a4
    48004338:	0287d713          	srl	a4,a5,0x28
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:134
        tag_config->associativity = \
    4800433c:	fd043783          	ld	a5,-48(s0)
    48004340:	eb98                	sd	a4,16(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:137

        ret = 0;
    48004342:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:140
    }

    return ret;
    48004346:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:141
}
    4800434a:	853e                	mv	a0,a5
    4800434c:	7422                	ld	s0,40(sp)
    4800434e:	6145                	add	sp,sp,48
    48004350:	8082                	ret

0000000048004352 <sifive_extensiblecache0_clock_gating_enable>:
sifive_extensiblecache0_clock_gating_enable():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:144

int sifive_extensiblecache0_clock_gating_enable(size_t slice_index,
                                                enum sifive_extensiblecache0_cg_options option) {
    48004352:	7179                	add	sp,sp,-48
    48004354:	f422                	sd	s0,40(sp)
    48004356:	1800                	add	s0,sp,48
    48004358:	fca43c23          	sd	a0,-40(s0)
    4800435c:	87ae                	mv	a5,a1
    4800435e:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:147


    if (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT)) {
    48004362:	fd843703          	ld	a4,-40(s0)
    48004366:	4785                	li	a5,1
    48004368:	00e7f463          	bgeu	a5,a4,48004370 <sifive_extensiblecache0_clock_gating_enable+0x1e>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:148
        return -EINVAL;
    4800436c:	57a9                	li	a5,-22
    4800436e:	a055                	j	48004412 <sifive_extensiblecache0_clock_gating_enable+0xc0>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:153
    }

    unsigned cg_option;

    switch (option) {
    48004370:	fd442783          	lw	a5,-44(s0)
    48004374:	0007871b          	sext.w	a4,a5
    48004378:	4795                	li	a5,5
    4800437a:	04e7ed63          	bltu	a5,a4,480043d4 <sifive_extensiblecache0_clock_gating_enable+0x82>
    4800437e:	fd446783          	lwu	a5,-44(s0)
    48004382:	00279713          	sll	a4,a5,0x2
    48004386:	ffffc797          	auipc	a5,0xffffc
    4800438a:	56278793          	add	a5,a5,1378 # 480008e8 <_SLICES+0x20>
    4800438e:	97ba                	add	a5,a5,a4
    48004390:	439c                	lw	a5,0(a5)
    48004392:	0007871b          	sext.w	a4,a5
    48004396:	ffffc797          	auipc	a5,0xffffc
    4800439a:	55278793          	add	a5,a5,1362 # 480008e8 <_SLICES+0x20>
    4800439e:	97ba                	add	a5,a5,a4
    480043a0:	8782                	jr	a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:155
    case SIFIVE_EXTENSIBLECACHE0_CG_SLICE_LEVEL:
        cg_option = EC_CHICKENBIT_CG_SLICE_LEVEL_MASK;
    480043a2:	4785                	li	a5,1
    480043a4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:156
        break;
    480043a8:	a805                	j	480043d8 <sifive_extensiblecache0_clock_gating_enable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:158
    case SIFIVE_EXTENSIBLECACHE0_CG_ART:
        cg_option = EC_CHICKENBIT_CG_ART_MASK;
    480043aa:	4789                	li	a5,2
    480043ac:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:159
        break;
    480043b0:	a025                	j	480043d8 <sifive_extensiblecache0_clock_gating_enable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:161
    case SIFIVE_EXTENSIBLECACHE0_CG_CONTROL_BLOCK:
        cg_option = EC_CHICKENBIT_CG_CONTROL_BLOCK_MASK;
    480043b2:	4791                	li	a5,4
    480043b4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:162
        break;
    480043b8:	a005                	j	480043d8 <sifive_extensiblecache0_clock_gating_enable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:164
    case SIFIVE_EXTENSIBLECACHE0_CG_PERF_MONITOR:
        cg_option = EC_CHICKENBIT_CG_PERF_MONITOR_MASK;
    480043ba:	47a1                	li	a5,8
    480043bc:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:165
        break;
    480043c0:	a821                	j	480043d8 <sifive_extensiblecache0_clock_gating_enable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:167
    case SIFIVE_EXTENSIBLECACHE0_CG_BUCKET_MONITOR:
        cg_option = EC_CHICKENBIT_CG_BUCKET_MONITOR_MASK;
    480043c2:	47c1                	li	a5,16
    480043c4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:168
        break;
    480043c8:	a801                	j	480043d8 <sifive_extensiblecache0_clock_gating_enable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:170
    case SIFIVE_EXTENSIBLECACHE0_CG_PPAMO:
        cg_option = EC_CHICKENBIT_CG_PPAMO_MASK;
    480043ca:	02000793          	li	a5,32
    480043ce:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:171
        break;
    480043d2:	a019                	j	480043d8 <sifive_extensiblecache0_clock_gating_enable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:173
    default:
        return -EINVAL;
    480043d4:	57a9                	li	a5,-22
    480043d6:	a835                	j	48004412 <sifive_extensiblecache0_clock_gating_enable+0xc0>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:177
    }

    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    480043d8:	ffffc717          	auipc	a4,0xffffc
    480043dc:	4f070713          	add	a4,a4,1264 # 480008c8 <_SLICES>
    480043e0:	fd843783          	ld	a5,-40(s0)
    480043e4:	0792                	sll	a5,a5,0x4
    480043e6:	97ba                	add	a5,a5,a4
    480043e8:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:176
    EXTENSIBLECACHE_Type *const ec = \
    480043ea:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:179

    ec->CHICKENBIT = PREP_FIELD(ec->CHICKENBIT, cg_option, CG_ENABLE);
    480043ee:	fe043783          	ld	a5,-32(s0)
    480043f2:	1007a783          	lw	a5,256(a5)
    480043f6:	0007871b          	sext.w	a4,a5
    480043fa:	fec42783          	lw	a5,-20(s0)
    480043fe:	9ff5                	not	a5,a5
    48004400:	2781                	sext.w	a5,a5
    48004402:	8ff9                	and	a5,a5,a4
    48004404:	0007871b          	sext.w	a4,a5
    48004408:	fe043783          	ld	a5,-32(s0)
    4800440c:	10e7a023          	sw	a4,256(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:181

    return 0;
    48004410:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:182
}
    48004412:	853e                	mv	a0,a5
    48004414:	7422                	ld	s0,40(sp)
    48004416:	6145                	add	sp,sp,48
    48004418:	8082                	ret

000000004800441a <sifive_extensiblecache0_clock_gating_disable>:
sifive_extensiblecache0_clock_gating_disable():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:185

int sifive_extensiblecache0_clock_gating_disable(size_t slice_index,
                                                 enum sifive_extensiblecache0_cg_options option) {
    4800441a:	7179                	add	sp,sp,-48
    4800441c:	f422                	sd	s0,40(sp)
    4800441e:	1800                	add	s0,sp,48
    48004420:	fca43c23          	sd	a0,-40(s0)
    48004424:	87ae                	mv	a5,a1
    48004426:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:188


    if (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT)) {
    4800442a:	fd843703          	ld	a4,-40(s0)
    4800442e:	4785                	li	a5,1
    48004430:	00e7f463          	bgeu	a5,a4,48004438 <sifive_extensiblecache0_clock_gating_disable+0x1e>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:189
        return -EINVAL;
    48004434:	57a9                	li	a5,-22
    48004436:	a875                	j	480044f2 <sifive_extensiblecache0_clock_gating_disable+0xd8>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:194
    }

    unsigned cg_option;

    switch (option) {
    48004438:	fd442783          	lw	a5,-44(s0)
    4800443c:	0007871b          	sext.w	a4,a5
    48004440:	4795                	li	a5,5
    48004442:	04e7ed63          	bltu	a5,a4,4800449c <sifive_extensiblecache0_clock_gating_disable+0x82>
    48004446:	fd446783          	lwu	a5,-44(s0)
    4800444a:	00279713          	sll	a4,a5,0x2
    4800444e:	ffffc797          	auipc	a5,0xffffc
    48004452:	4b278793          	add	a5,a5,1202 # 48000900 <_SLICES+0x38>
    48004456:	97ba                	add	a5,a5,a4
    48004458:	439c                	lw	a5,0(a5)
    4800445a:	0007871b          	sext.w	a4,a5
    4800445e:	ffffc797          	auipc	a5,0xffffc
    48004462:	4a278793          	add	a5,a5,1186 # 48000900 <_SLICES+0x38>
    48004466:	97ba                	add	a5,a5,a4
    48004468:	8782                	jr	a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:196
    case SIFIVE_EXTENSIBLECACHE0_CG_SLICE_LEVEL:
        cg_option = EC_CHICKENBIT_CG_SLICE_LEVEL_MASK;
    4800446a:	4785                	li	a5,1
    4800446c:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:197
        break;
    48004470:	a805                	j	480044a0 <sifive_extensiblecache0_clock_gating_disable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:199
    case SIFIVE_EXTENSIBLECACHE0_CG_ART:
        cg_option = EC_CHICKENBIT_CG_ART_MASK;
    48004472:	4789                	li	a5,2
    48004474:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:200
        break;
    48004478:	a025                	j	480044a0 <sifive_extensiblecache0_clock_gating_disable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:202
    case SIFIVE_EXTENSIBLECACHE0_CG_CONTROL_BLOCK:
        cg_option = EC_CHICKENBIT_CG_CONTROL_BLOCK_MASK;
    4800447a:	4791                	li	a5,4
    4800447c:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:203
        break;
    48004480:	a005                	j	480044a0 <sifive_extensiblecache0_clock_gating_disable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:205
    case SIFIVE_EXTENSIBLECACHE0_CG_PERF_MONITOR:
        cg_option = EC_CHICKENBIT_CG_PERF_MONITOR_MASK;
    48004482:	47a1                	li	a5,8
    48004484:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:206
        break;
    48004488:	a821                	j	480044a0 <sifive_extensiblecache0_clock_gating_disable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:208
    case SIFIVE_EXTENSIBLECACHE0_CG_BUCKET_MONITOR:
        cg_option = EC_CHICKENBIT_CG_BUCKET_MONITOR_MASK;
    4800448a:	47c1                	li	a5,16
    4800448c:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:209
        break;
    48004490:	a801                	j	480044a0 <sifive_extensiblecache0_clock_gating_disable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:211
    case SIFIVE_EXTENSIBLECACHE0_CG_PPAMO:
        cg_option = EC_CHICKENBIT_CG_PPAMO_MASK;
    48004492:	02000793          	li	a5,32
    48004496:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:212
        break;
    4800449a:	a019                	j	480044a0 <sifive_extensiblecache0_clock_gating_disable+0x86>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:214
    default:
        return -EINVAL;
    4800449c:	57a9                	li	a5,-22
    4800449e:	a891                	j	480044f2 <sifive_extensiblecache0_clock_gating_disable+0xd8>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:218
    }

    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    480044a0:	ffffc717          	auipc	a4,0xffffc
    480044a4:	42870713          	add	a4,a4,1064 # 480008c8 <_SLICES>
    480044a8:	fd843783          	ld	a5,-40(s0)
    480044ac:	0792                	sll	a5,a5,0x4
    480044ae:	97ba                	add	a5,a5,a4
    480044b0:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:217
    EXTENSIBLECACHE_Type *const ec = \
    480044b2:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:220

    ec->CHICKENBIT = PREP_FIELD(ec->CHICKENBIT, cg_option, CG_DISABLE);
    480044b6:	fe043783          	ld	a5,-32(s0)
    480044ba:	1007a783          	lw	a5,256(a5)
    480044be:	0007871b          	sext.w	a4,a5
    480044c2:	fec42783          	lw	a5,-20(s0)
    480044c6:	9ff5                	not	a5,a5
    480044c8:	2781                	sext.w	a5,a5
    480044ca:	8ff9                	and	a5,a5,a4
    480044cc:	0007871b          	sext.w	a4,a5
    480044d0:	fec42783          	lw	a5,-20(s0)
    480044d4:	40f007bb          	negw	a5,a5
    480044d8:	2781                	sext.w	a5,a5
    480044da:	fec42683          	lw	a3,-20(s0)
    480044de:	8ff5                	and	a5,a5,a3
    480044e0:	2781                	sext.w	a5,a5
    480044e2:	8fd9                	or	a5,a5,a4
    480044e4:	0007871b          	sext.w	a4,a5
    480044e8:	fe043783          	ld	a5,-32(s0)
    480044ec:	10e7a023          	sw	a4,256(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:222

    return 0;
    480044f0:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:223
}
    480044f2:	853e                	mv	a0,a5
    480044f4:	7422                	ld	s0,40(sp)
    480044f6:	6145                	add	sp,sp,48
    480044f8:	8082                	ret

00000000480044fa <sifive_extensiblecache0_clock_gating_get_status>:
sifive_extensiblecache0_clock_gating_get_status():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:227

int sifive_extensiblecache0_clock_gating_get_status(size_t slice_index,
                                                    enum sifive_extensiblecache0_cg_options option,
                                                    bool *status) {
    480044fa:	7139                	add	sp,sp,-64
    480044fc:	fc22                	sd	s0,56(sp)
    480044fe:	0080                	add	s0,sp,64
    48004500:	fca43c23          	sd	a0,-40(s0)
    48004504:	87ae                	mv	a5,a1
    48004506:	fcc43423          	sd	a2,-56(s0)
    4800450a:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:229

    if (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT) || !status) {
    4800450e:	fd843703          	ld	a4,-40(s0)
    48004512:	4785                	li	a5,1
    48004514:	00e7e563          	bltu	a5,a4,4800451e <sifive_extensiblecache0_clock_gating_get_status+0x24>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:229 (discriminator 1)
    48004518:	fc843783          	ld	a5,-56(s0)
    4800451c:	e399                	bnez	a5,48004522 <sifive_extensiblecache0_clock_gating_get_status+0x28>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:230
        return -EINVAL;
    4800451e:	57a9                	li	a5,-22
    48004520:	a055                	j	480045c4 <sifive_extensiblecache0_clock_gating_get_status+0xca>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:234
    }

    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    48004522:	ffffc717          	auipc	a4,0xffffc
    48004526:	3a670713          	add	a4,a4,934 # 480008c8 <_SLICES>
    4800452a:	fd843783          	ld	a5,-40(s0)
    4800452e:	0792                	sll	a5,a5,0x4
    48004530:	97ba                	add	a5,a5,a4
    48004532:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:233
    EXTENSIBLECACHE_Type *const ec = \
    48004534:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:238

    unsigned cg_option;

    switch (option) {
    48004538:	fd442783          	lw	a5,-44(s0)
    4800453c:	0007871b          	sext.w	a4,a5
    48004540:	4789                	li	a5,2
    48004542:	02f70d63          	beq	a4,a5,4800457c <sifive_extensiblecache0_clock_gating_get_status+0x82>
    48004546:	fd442783          	lw	a5,-44(s0)
    4800454a:	0007871b          	sext.w	a4,a5
    4800454e:	4789                	li	a5,2
    48004550:	02e7ea63          	bltu	a5,a4,48004584 <sifive_extensiblecache0_clock_gating_get_status+0x8a>
    48004554:	fd442783          	lw	a5,-44(s0)
    48004558:	2781                	sext.w	a5,a5
    4800455a:	cb89                	beqz	a5,4800456c <sifive_extensiblecache0_clock_gating_get_status+0x72>
    4800455c:	fd442783          	lw	a5,-44(s0)
    48004560:	0007871b          	sext.w	a4,a5
    48004564:	4785                	li	a5,1
    48004566:	00f70763          	beq	a4,a5,48004574 <sifive_extensiblecache0_clock_gating_get_status+0x7a>
    4800456a:	a829                	j	48004584 <sifive_extensiblecache0_clock_gating_get_status+0x8a>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:240
    case SIFIVE_EXTENSIBLECACHE0_CG_SLICE_LEVEL:
        cg_option = EC_CHICKENBIT_CG_SLICE_LEVEL_MASK;
    4800456c:	4785                	li	a5,1
    4800456e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:241
        break;
    48004572:	a819                	j	48004588 <sifive_extensiblecache0_clock_gating_get_status+0x8e>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:243
    case SIFIVE_EXTENSIBLECACHE0_CG_ART:
        cg_option = EC_CHICKENBIT_CG_ART_MASK;
    48004574:	4789                	li	a5,2
    48004576:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:244
        break;
    4800457a:	a039                	j	48004588 <sifive_extensiblecache0_clock_gating_get_status+0x8e>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:246
    case SIFIVE_EXTENSIBLECACHE0_CG_CONTROL_BLOCK:
        cg_option = EC_CHICKENBIT_CG_CONTROL_BLOCK_MASK;
    4800457c:	4791                	li	a5,4
    4800457e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:247
        break;
    48004582:	a019                	j	48004588 <sifive_extensiblecache0_clock_gating_get_status+0x8e>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:249
    default:
        return -EINVAL;
    48004584:	57a9                	li	a5,-22
    48004586:	a83d                	j	480045c4 <sifive_extensiblecache0_clock_gating_get_status+0xca>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:252
    }

    *status = READ_FIELD(ec->CHICKENBIT, cg_option);
    48004588:	fe043783          	ld	a5,-32(s0)
    4800458c:	1007a783          	lw	a5,256(a5)
    48004590:	2781                	sext.w	a5,a5
    48004592:	fec42703          	lw	a4,-20(s0)
    48004596:	8ff9                	and	a5,a5,a4
    48004598:	0007871b          	sext.w	a4,a5
    4800459c:	fec42783          	lw	a5,-20(s0)
    480045a0:	40f007bb          	negw	a5,a5
    480045a4:	2781                	sext.w	a5,a5
    480045a6:	fec42683          	lw	a3,-20(s0)
    480045aa:	8ff5                	and	a5,a5,a3
    480045ac:	2781                	sext.w	a5,a5
    480045ae:	02f757bb          	divuw	a5,a4,a5
    480045b2:	2781                	sext.w	a5,a5
    480045b4:	00f037b3          	snez	a5,a5
    480045b8:	0ff7f713          	zext.b	a4,a5
    480045bc:	fc843783          	ld	a5,-56(s0)
    480045c0:	8b98                	sb	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:254

    return 0;
    480045c2:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:255
}
    480045c4:	853e                	mv	a0,a5
    480045c6:	7462                	ld	s0,56(sp)
    480045c8:	6121                	add	sp,sp,64
    480045ca:	8082                	ret

00000000480045cc <sifive_extensiblecache0_clock_gating_set_hysteresis>:
sifive_extensiblecache0_clock_gating_set_hysteresis():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:257

int sifive_extensiblecache0_clock_gating_set_hysteresis(size_t slice_index, size_t hysteresis) {
    480045cc:	7179                	add	sp,sp,-48
    480045ce:	f422                	sd	s0,40(sp)
    480045d0:	1800                	add	s0,sp,48
    480045d2:	fca43c23          	sd	a0,-40(s0)
    480045d6:	fcb43823          	sd	a1,-48(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:259

    if (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT)) {
    480045da:	fd843703          	ld	a4,-40(s0)
    480045de:	4785                	li	a5,1
    480045e0:	00e7f463          	bgeu	a5,a4,480045e8 <sifive_extensiblecache0_clock_gating_set_hysteresis+0x1c>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:260
        return -EINVAL;
    480045e4:	57a9                	li	a5,-22
    480045e6:	a8b9                	j	48004644 <sifive_extensiblecache0_clock_gating_set_hysteresis+0x78>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:264
    }

    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    480045e8:	ffffc717          	auipc	a4,0xffffc
    480045ec:	2e070713          	add	a4,a4,736 # 480008c8 <_SLICES>
    480045f0:	fd843783          	ld	a5,-40(s0)
    480045f4:	0792                	sll	a5,a5,0x4
    480045f6:	97ba                	add	a5,a5,a4
    480045f8:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:263
    EXTENSIBLECACHE_Type *const ec = \
    480045fa:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:266

    size_t mult32_hyesteresis = hysteresis >> 5U;
    480045fe:	fd043783          	ld	a5,-48(s0)
    48004602:	8395                	srl	a5,a5,0x5
    48004604:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:268

    ec->HYSCOUNTER = PREP_FIELD(ec->HYSCOUNTER,
    48004608:	fe843703          	ld	a4,-24(s0)
    4800460c:	6785                	lui	a5,0x1
    4800460e:	97ba                	add	a5,a5,a4
    48004610:	9007a783          	lw	a5,-1792(a5) # 900 <__heap_size+0x100>
    48004614:	2781                	sext.w	a5,a5
    48004616:	c1f7f793          	and	a5,a5,-993
    4800461a:	0007871b          	sext.w	a4,a5
    4800461e:	fe043783          	ld	a5,-32(s0)
    48004622:	2781                	sext.w	a5,a5
    48004624:	0057979b          	sllw	a5,a5,0x5
    48004628:	2781                	sext.w	a5,a5
    4800462a:	3e07f793          	and	a5,a5,992
    4800462e:	2781                	sext.w	a5,a5
    48004630:	8fd9                	or	a5,a5,a4
    48004632:	0007871b          	sext.w	a4,a5
    48004636:	fe843683          	ld	a3,-24(s0)
    4800463a:	6785                	lui	a5,0x1
    4800463c:	97b6                	add	a5,a5,a3
    4800463e:	90e7a023          	sw	a4,-1792(a5) # 900 <__heap_size+0x100>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:272
                                EC_HYSCOUNTER_SLICE_LEVEL_CG_MASK,
                                mult32_hyesteresis);

    return 0;
    48004642:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:273
}
    48004644:	853e                	mv	a0,a5
    48004646:	7422                	ld	s0,40(sp)
    48004648:	6145                	add	sp,sp,48
    4800464a:	8082                	ret

000000004800464c <sifive_extensiblecache0_clock_gating_get_hysteresis>:
sifive_extensiblecache0_clock_gating_get_hysteresis():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:275

int sifive_extensiblecache0_clock_gating_get_hysteresis(size_t slice_index, size_t *hysteresis) {
    4800464c:	7179                	add	sp,sp,-48
    4800464e:	f422                	sd	s0,40(sp)
    48004650:	1800                	add	s0,sp,48
    48004652:	fca43c23          	sd	a0,-40(s0)
    48004656:	fcb43823          	sd	a1,-48(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:277

    if (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT) || !hysteresis) {
    4800465a:	fd843703          	ld	a4,-40(s0)
    4800465e:	4785                	li	a5,1
    48004660:	00e7e563          	bltu	a5,a4,4800466a <sifive_extensiblecache0_clock_gating_get_hysteresis+0x1e>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:277 (discriminator 1)
    48004664:	fd043783          	ld	a5,-48(s0)
    48004668:	e399                	bnez	a5,4800466e <sifive_extensiblecache0_clock_gating_get_hysteresis+0x22>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:278
        return -EINVAL;
    4800466a:	57a9                	li	a5,-22
    4800466c:	a091                	j	480046b0 <sifive_extensiblecache0_clock_gating_get_hysteresis+0x64>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:282
    }

    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    4800466e:	ffffc717          	auipc	a4,0xffffc
    48004672:	25a70713          	add	a4,a4,602 # 480008c8 <_SLICES>
    48004676:	fd843783          	ld	a5,-40(s0)
    4800467a:	0792                	sll	a5,a5,0x4
    4800467c:	97ba                	add	a5,a5,a4
    4800467e:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:281
    EXTENSIBLECACHE_Type *const ec = \
    48004680:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:284

    *hysteresis = READ_FIELD(ec->HYSCOUNTER, EC_HYSCOUNTER_SLICE_LEVEL_CG_MASK) << 5U;
    48004684:	fe843703          	ld	a4,-24(s0)
    48004688:	6785                	lui	a5,0x1
    4800468a:	97ba                	add	a5,a5,a4
    4800468c:	9007a783          	lw	a5,-1792(a5) # 900 <__heap_size+0x100>
    48004690:	2781                	sext.w	a5,a5
    48004692:	3e07f793          	and	a5,a5,992
    48004696:	2781                	sext.w	a5,a5
    48004698:	0057d79b          	srlw	a5,a5,0x5
    4800469c:	2781                	sext.w	a5,a5
    4800469e:	0057979b          	sllw	a5,a5,0x5
    480046a2:	2781                	sext.w	a5,a5
    480046a4:	0807873b          	zext.w	a4,a5
    480046a8:	fd043783          	ld	a5,-48(s0)
    480046ac:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:286

    return 0;
    480046ae:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:287
}
    480046b0:	853e                	mv	a0,a5
    480046b2:	7422                	ld	s0,40(sp)
    480046b4:	6145                	add	sp,sp,48
    480046b6:	8082                	ret

00000000480046b8 <sifive_extensiblecache0_lock_range>:
sifive_extensiblecache0_lock_range():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:291

int sifive_extensiblecache0_lock_range(size_t slice_index,
                                       size_t region_index, uintptr_t addr,
                                       size_t size) {
    480046b8:	7139                	add	sp,sp,-64
    480046ba:	fc06                	sd	ra,56(sp)
    480046bc:	f822                	sd	s0,48(sp)
    480046be:	0080                	add	s0,sp,64
    480046c0:	fca43c23          	sd	a0,-40(s0)
    480046c4:	fcb43823          	sd	a1,-48(s0)
    480046c8:	fcc43423          	sd	a2,-56(s0)
    480046cc:	fcd43023          	sd	a3,-64(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:293

    if (0 != _is_region_valid(slice_index, region_index)) {
    480046d0:	fd043583          	ld	a1,-48(s0)
    480046d4:	fd843503          	ld	a0,-40(s0)
    480046d8:	344000ef          	jal	48004a1c <_is_region_valid>
    480046dc:	87aa                	mv	a5,a0
    480046de:	c399                	beqz	a5,480046e4 <sifive_extensiblecache0_lock_range+0x2c>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:294
        return -EINVAL;
    480046e0:	57a9                	li	a5,-22
    480046e2:	a079                	j	48004770 <sifive_extensiblecache0_lock_range+0xb8>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:297
    }

    if (0 != _is_range_valid(addr, size)) {
    480046e4:	fc043583          	ld	a1,-64(s0)
    480046e8:	fc843503          	ld	a0,-56(s0)
    480046ec:	360000ef          	jal	48004a4c <_is_range_valid>
    480046f0:	87aa                	mv	a5,a0
    480046f2:	c399                	beqz	a5,480046f8 <sifive_extensiblecache0_lock_range+0x40>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:298
        return -EINVAL;
    480046f4:	57a9                	li	a5,-22
    480046f6:	a8ad                	j	48004770 <sifive_extensiblecache0_lock_range+0xb8>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:302
    }
    /* Lock a physical address range */
    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    480046f8:	ffffc717          	auipc	a4,0xffffc
    480046fc:	1d070713          	add	a4,a4,464 # 480008c8 <_SLICES>
    48004700:	fd843783          	ld	a5,-40(s0)
    48004704:	0792                	sll	a5,a5,0x4
    48004706:	97ba                	add	a5,a5,a4
    48004708:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:301
    EXTENSIBLECACHE_Type *const ec = \
    4800470a:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:305

    ec->MEMLOCK[region_index] = \
        PREP_FIELD(ec->MEMLOCK[region_index], EC_CACHE_LOCK_REGION_PA_MASK,
    4800470e:	fe843703          	ld	a4,-24(s0)
    48004712:	fd043783          	ld	a5,-48(s0)
    48004716:	08078793          	add	a5,a5,128
    4800471a:	078e                	sll	a5,a5,0x3
    4800471c:	97ba                	add	a5,a5,a4
    4800471e:	6398                	ld	a4,0(a5)
    48004720:	57fd                	li	a5,-1
    48004722:	17e2                	sll	a5,a5,0x38
    48004724:	07fd                	add	a5,a5,31
    48004726:	8f7d                	and	a4,a4,a5
    48004728:	fc043783          	ld	a5,-64(s0)
    4800472c:	8395                	srl	a5,a5,0x5
    4800472e:	40f006b3          	neg	a3,a5
    48004732:	fc843783          	ld	a5,-56(s0)
    48004736:	8efd                	and	a3,a3,a5
    48004738:	fc043783          	ld	a5,-64(s0)
    4800473c:	17fd                	add	a5,a5,-1
    4800473e:	8399                	srl	a5,a5,0x6
    48004740:	0796                	sll	a5,a5,0x5
    48004742:	8edd                	or	a3,a3,a5
    48004744:	2b801793          	bset	a5,zero,0x38
    48004748:	1781                	add	a5,a5,-32
    4800474a:	8ff5                	and	a5,a5,a3
    4800474c:	8f5d                	or	a4,a4,a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:304
    ec->MEMLOCK[region_index] = \
    4800474e:	fe843683          	ld	a3,-24(s0)
    48004752:	fd043783          	ld	a5,-48(s0)
    48004756:	08078793          	add	a5,a5,128
    4800475a:	078e                	sll	a5,a5,0x3
    4800475c:	97b6                	add	a5,a5,a3
    4800475e:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:308
                   NAPOT_ADDR(addr, size));

    return sifive_extensiblecache0_set_lock_enable(slice_index, region_index, true);
    48004760:	4605                	li	a2,1
    48004762:	fd043583          	ld	a1,-48(s0)
    48004766:	fd843503          	ld	a0,-40(s0)
    4800476a:	09a000ef          	jal	48004804 <sifive_extensiblecache0_set_lock_enable>
    4800476e:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:309
}
    48004770:	853e                	mv	a0,a5
    48004772:	70e2                	ld	ra,56(sp)
    48004774:	7442                	ld	s0,48(sp)
    48004776:	6121                	add	sp,sp,64
    48004778:	8082                	ret

000000004800477a <sifive_extensiblecache0_lock_full>:
sifive_extensiblecache0_lock_full():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:312

int sifive_extensiblecache0_lock_full(size_t slice_index,
                                      size_t region_index) {
    4800477a:	7179                	add	sp,sp,-48
    4800477c:	f406                	sd	ra,40(sp)
    4800477e:	f022                	sd	s0,32(sp)
    48004780:	1800                	add	s0,sp,48
    48004782:	fca43c23          	sd	a0,-40(s0)
    48004786:	fcb43823          	sd	a1,-48(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:314

    if (0 != _is_region_valid(slice_index, region_index)) {
    4800478a:	fd043583          	ld	a1,-48(s0)
    4800478e:	fd843503          	ld	a0,-40(s0)
    48004792:	28a000ef          	jal	48004a1c <_is_region_valid>
    48004796:	87aa                	mv	a5,a0
    48004798:	c399                	beqz	a5,4800479e <sifive_extensiblecache0_lock_full+0x24>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:315
        return -EINVAL;
    4800479a:	57a9                	li	a5,-22
    4800479c:	a8b9                	j	480047fa <sifive_extensiblecache0_lock_full+0x80>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:319
    }
    /* Lock full physical address */
    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    4800479e:	ffffc717          	auipc	a4,0xffffc
    480047a2:	12a70713          	add	a4,a4,298 # 480008c8 <_SLICES>
    480047a6:	fd843783          	ld	a5,-40(s0)
    480047aa:	0792                	sll	a5,a5,0x4
    480047ac:	97ba                	add	a5,a5,a4
    480047ae:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:318
    EXTENSIBLECACHE_Type *const ec = \
    480047b0:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:322

    ec->MEMLOCK[region_index] = \
        PREP_FIELD(ec->MEMLOCK[region_index], EC_CACHE_LOCK_REGION_PA_MASK, FULL_LOCK_PA);
    480047b4:	fe843703          	ld	a4,-24(s0)
    480047b8:	fd043783          	ld	a5,-48(s0)
    480047bc:	08078793          	add	a5,a5,128
    480047c0:	078e                	sll	a5,a5,0x3
    480047c2:	97ba                	add	a5,a5,a4
    480047c4:	6398                	ld	a4,0(a5)
    480047c6:	57fd                	li	a5,-1
    480047c8:	17e2                	sll	a5,a5,0x38
    480047ca:	07fd                	add	a5,a5,31
    480047cc:	8f7d                	and	a4,a4,a5
    480047ce:	2b801793          	bset	a5,zero,0x38
    480047d2:	c0078793          	add	a5,a5,-1024
    480047d6:	8f5d                	or	a4,a4,a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:321
    ec->MEMLOCK[region_index] = \
    480047d8:	fe843683          	ld	a3,-24(s0)
    480047dc:	fd043783          	ld	a5,-48(s0)
    480047e0:	08078793          	add	a5,a5,128
    480047e4:	078e                	sll	a5,a5,0x3
    480047e6:	97b6                	add	a5,a5,a3
    480047e8:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:324

    return sifive_extensiblecache0_set_lock_enable(slice_index, region_index, true);
    480047ea:	4605                	li	a2,1
    480047ec:	fd043583          	ld	a1,-48(s0)
    480047f0:	fd843503          	ld	a0,-40(s0)
    480047f4:	010000ef          	jal	48004804 <sifive_extensiblecache0_set_lock_enable>
    480047f8:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:325
}
    480047fa:	853e                	mv	a0,a5
    480047fc:	70a2                	ld	ra,40(sp)
    480047fe:	7402                	ld	s0,32(sp)
    48004800:	6145                	add	sp,sp,48
    48004802:	8082                	ret

0000000048004804 <sifive_extensiblecache0_set_lock_enable>:
sifive_extensiblecache0_set_lock_enable():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:329

int sifive_extensiblecache0_set_lock_enable(size_t slice_index,
                                            size_t region_index,
                                            bool enable) {
    48004804:	7139                	add	sp,sp,-64
    48004806:	fc06                	sd	ra,56(sp)
    48004808:	f822                	sd	s0,48(sp)
    4800480a:	0080                	add	s0,sp,64
    4800480c:	fca43c23          	sd	a0,-40(s0)
    48004810:	fcb43823          	sd	a1,-48(s0)
    48004814:	87b2                	mv	a5,a2
    48004816:	fcf407a3          	sb	a5,-49(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:331

    if (0 != _is_region_valid(slice_index, region_index)) {
    4800481a:	fd043583          	ld	a1,-48(s0)
    4800481e:	fd843503          	ld	a0,-40(s0)
    48004822:	1fa000ef          	jal	48004a1c <_is_region_valid>
    48004826:	87aa                	mv	a5,a0
    48004828:	c399                	beqz	a5,4800482e <sifive_extensiblecache0_set_lock_enable+0x2a>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:332
        return -EINVAL;
    4800482a:	57a9                	li	a5,-22
    4800482c:	a0a1                	j	48004874 <sifive_extensiblecache0_set_lock_enable+0x70>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:337
    }

    /* Lock physical address range */
    EXTENSIBLECACHE_Type *const ec =
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    4800482e:	ffffc717          	auipc	a4,0xffffc
    48004832:	09a70713          	add	a4,a4,154 # 480008c8 <_SLICES>
    48004836:	fd843783          	ld	a5,-40(s0)
    4800483a:	0792                	sll	a5,a5,0x4
    4800483c:	97ba                	add	a5,a5,a4
    4800483e:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:336
    EXTENSIBLECACHE_Type *const ec =
    48004840:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:340

    ec->MEMLOCK[region_index] =
        PREP_FIELD(ec->MEMLOCK[region_index], EC_CACHE_LOCK_REGION_ENABLE_MASK, enable);
    48004844:	fe843703          	ld	a4,-24(s0)
    48004848:	fd043783          	ld	a5,-48(s0)
    4800484c:	08078793          	add	a5,a5,128
    48004850:	078e                	sll	a5,a5,0x3
    48004852:	97ba                	add	a5,a5,a4
    48004854:	639c                	ld	a5,0(a5)
    48004856:	ffe7f713          	and	a4,a5,-2
    4800485a:	fcf44783          	lbu	a5,-49(s0)
    4800485e:	8f5d                	or	a4,a4,a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:339
    ec->MEMLOCK[region_index] =
    48004860:	fe843683          	ld	a3,-24(s0)
    48004864:	fd043783          	ld	a5,-48(s0)
    48004868:	08078793          	add	a5,a5,128
    4800486c:	078e                	sll	a5,a5,0x3
    4800486e:	97b6                	add	a5,a5,a3
    48004870:	e398                	sd	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:342

    return 0;
    48004872:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:343
}
    48004874:	853e                	mv	a0,a5
    48004876:	70e2                	ld	ra,56(sp)
    48004878:	7442                	ld	s0,48(sp)
    4800487a:	6121                	add	sp,sp,64
    4800487c:	8082                	ret

000000004800487e <sifive_extensiblecache0_get_lock_enable>:
sifive_extensiblecache0_get_lock_enable():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:347

int sifive_extensiblecache0_get_lock_enable(size_t slice_index,
                                            size_t region_index,
                                            bool *enable) {
    4800487e:	7139                	add	sp,sp,-64
    48004880:	fc06                	sd	ra,56(sp)
    48004882:	f822                	sd	s0,48(sp)
    48004884:	0080                	add	s0,sp,64
    48004886:	fca43c23          	sd	a0,-40(s0)
    4800488a:	fcb43823          	sd	a1,-48(s0)
    4800488e:	fcc43423          	sd	a2,-56(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:349

    if ((0 != _is_region_valid(slice_index, region_index)) || !enable) {
    48004892:	fd043583          	ld	a1,-48(s0)
    48004896:	fd843503          	ld	a0,-40(s0)
    4800489a:	182000ef          	jal	48004a1c <_is_region_valid>
    4800489e:	87aa                	mv	a5,a0
    480048a0:	e781                	bnez	a5,480048a8 <sifive_extensiblecache0_get_lock_enable+0x2a>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:349 (discriminator 1)
    480048a2:	fc843783          	ld	a5,-56(s0)
    480048a6:	e399                	bnez	a5,480048ac <sifive_extensiblecache0_get_lock_enable+0x2e>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:350
        return -EINVAL;
    480048a8:	57a9                	li	a5,-22
    480048aa:	a835                	j	480048e6 <sifive_extensiblecache0_get_lock_enable+0x68>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:354
    }

    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    480048ac:	ffffc717          	auipc	a4,0xffffc
    480048b0:	01c70713          	add	a4,a4,28 # 480008c8 <_SLICES>
    480048b4:	fd843783          	ld	a5,-40(s0)
    480048b8:	0792                	sll	a5,a5,0x4
    480048ba:	97ba                	add	a5,a5,a4
    480048bc:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:353
    EXTENSIBLECACHE_Type *const ec = \
    480048be:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:355
    *enable = READ_FIELD(ec->MEMLOCK[region_index], EC_CACHE_LOCK_REGION_ENABLE_MASK);
    480048c2:	fe843703          	ld	a4,-24(s0)
    480048c6:	fd043783          	ld	a5,-48(s0)
    480048ca:	08078793          	add	a5,a5,128
    480048ce:	078e                	sll	a5,a5,0x3
    480048d0:	97ba                	add	a5,a5,a4
    480048d2:	639c                	ld	a5,0(a5)
    480048d4:	8b85                	and	a5,a5,1
    480048d6:	00f037b3          	snez	a5,a5
    480048da:	0ff7f713          	zext.b	a4,a5
    480048de:	fc843783          	ld	a5,-56(s0)
    480048e2:	8b98                	sb	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:357

    return 0;
    480048e4:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:358
}
    480048e6:	853e                	mv	a0,a5
    480048e8:	70e2                	ld	ra,56(sp)
    480048ea:	7442                	ld	s0,48(sp)
    480048ec:	6121                	add	sp,sp,64
    480048ee:	8082                	ret

00000000480048f0 <sifive_extensiblecache0_flush_range>:
sifive_extensiblecache0_flush_range():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:363

int sifive_extensiblecache0_flush_range(size_t slice_index,
                                        uintptr_t addr,
                                        size_t size,
                                        enum sifive_extensiblecache0_flush_options option) {
    480048f0:	7139                	add	sp,sp,-64
    480048f2:	fc06                	sd	ra,56(sp)
    480048f4:	f822                	sd	s0,48(sp)
    480048f6:	0080                	add	s0,sp,64
    480048f8:	fca43c23          	sd	a0,-40(s0)
    480048fc:	fcb43823          	sd	a1,-48(s0)
    48004900:	fcc43423          	sd	a2,-56(s0)
    48004904:	87b6                	mv	a5,a3
    48004906:	fcf42223          	sw	a5,-60(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:365

    if (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT)) {
    4800490a:	fd843703          	ld	a4,-40(s0)
    4800490e:	4785                	li	a5,1
    48004910:	00e7f463          	bgeu	a5,a4,48004918 <sifive_extensiblecache0_flush_range+0x28>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:366
        return -EINVAL;
    48004914:	57a9                	li	a5,-22
    48004916:	a049                	j	48004998 <sifive_extensiblecache0_flush_range+0xa8>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:369
    }

    if (0 != _is_range_valid(addr, size)) {
    48004918:	fc843583          	ld	a1,-56(s0)
    4800491c:	fd043503          	ld	a0,-48(s0)
    48004920:	12c000ef          	jal	48004a4c <_is_range_valid>
    48004924:	87aa                	mv	a5,a0
    48004926:	c399                	beqz	a5,4800492c <sifive_extensiblecache0_flush_range+0x3c>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:370
        return -EINVAL;
    48004928:	57a9                	li	a5,-22
    4800492a:	a0bd                	j	48004998 <sifive_extensiblecache0_flush_range+0xa8>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:375
    }

    /* Set physical address range for flushing */
    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    4800492c:	ffffc717          	auipc	a4,0xffffc
    48004930:	f9c70713          	add	a4,a4,-100 # 480008c8 <_SLICES>
    48004934:	fd843783          	ld	a5,-40(s0)
    48004938:	0792                	sll	a5,a5,0x4
    4800493a:	97ba                	add	a5,a5,a4
    4800493c:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:374
    EXTENSIBLECACHE_Type *const ec = \
    4800493e:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:378

    ec->FLUSHADDR = \
        PREP_FIELD(ec->FLUSHADDR, EC_CACHE_FLUSH_ADDRESS_PA_MASK,
    48004942:	fe843703          	ld	a4,-24(s0)
    48004946:	6785                	lui	a5,0x1
    48004948:	97ba                	add	a5,a5,a4
    4800494a:	8107b703          	ld	a4,-2032(a5) # 810 <__heap_size+0x10>
    4800494e:	57fd                	li	a5,-1
    48004950:	17e2                	sll	a5,a5,0x38
    48004952:	07fd                	add	a5,a5,31
    48004954:	8f7d                	and	a4,a4,a5
    48004956:	fc843783          	ld	a5,-56(s0)
    4800495a:	8395                	srl	a5,a5,0x5
    4800495c:	40f006b3          	neg	a3,a5
    48004960:	fd043783          	ld	a5,-48(s0)
    48004964:	8efd                	and	a3,a3,a5
    48004966:	fc843783          	ld	a5,-56(s0)
    4800496a:	17fd                	add	a5,a5,-1
    4800496c:	8399                	srl	a5,a5,0x6
    4800496e:	0796                	sll	a5,a5,0x5
    48004970:	8edd                	or	a3,a3,a5
    48004972:	2b801793          	bset	a5,zero,0x38
    48004976:	1781                	add	a5,a5,-32
    48004978:	8ff5                	and	a5,a5,a3
    4800497a:	8f5d                	or	a4,a4,a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:377
    ec->FLUSHADDR = \
    4800497c:	fe843683          	ld	a3,-24(s0)
    48004980:	6785                	lui	a5,0x1
    48004982:	97b6                	add	a5,a5,a3
    48004984:	80e7b823          	sd	a4,-2032(a5) # 810 <__heap_size+0x10>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:381
                   NAPOT_ADDR(addr, size));

    return sifive_extensiblecache0_flush(slice_index, option);
    48004988:	fc442783          	lw	a5,-60(s0)
    4800498c:	85be                	mv	a1,a5
    4800498e:	fd843503          	ld	a0,-40(s0)
    48004992:	0ea000ef          	jal	48004a7c <sifive_extensiblecache0_flush>
    48004996:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:382
}
    48004998:	853e                	mv	a0,a5
    4800499a:	70e2                	ld	ra,56(sp)
    4800499c:	7442                	ld	s0,48(sp)
    4800499e:	6121                	add	sp,sp,64
    480049a0:	8082                	ret

00000000480049a2 <sifive_extensiblecache0_flush_full>:
sifive_extensiblecache0_flush_full():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:385

int sifive_extensiblecache0_flush_full(size_t slice_index,
                                       enum sifive_extensiblecache0_flush_options option) {
    480049a2:	7179                	add	sp,sp,-48
    480049a4:	f406                	sd	ra,40(sp)
    480049a6:	f022                	sd	s0,32(sp)
    480049a8:	1800                	add	s0,sp,48
    480049aa:	fca43c23          	sd	a0,-40(s0)
    480049ae:	87ae                	mv	a5,a1
    480049b0:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:387

    if (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT)) {
    480049b4:	fd843703          	ld	a4,-40(s0)
    480049b8:	4785                	li	a5,1
    480049ba:	00e7f463          	bgeu	a5,a4,480049c2 <sifive_extensiblecache0_flush_full+0x20>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:388
        return -EINVAL;
    480049be:	57a9                	li	a5,-22
    480049c0:	a889                	j	48004a12 <sifive_extensiblecache0_flush_full+0x70>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:393
    }

    /* Set full physical address for flushing */
    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    480049c2:	ffffc717          	auipc	a4,0xffffc
    480049c6:	f0670713          	add	a4,a4,-250 # 480008c8 <_SLICES>
    480049ca:	fd843783          	ld	a5,-40(s0)
    480049ce:	0792                	sll	a5,a5,0x4
    480049d0:	97ba                	add	a5,a5,a4
    480049d2:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:392
    EXTENSIBLECACHE_Type *const ec = \
    480049d4:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:396

    ec->FLUSHADDR = \
        PREP_FIELD(ec->FLUSHADDR, EC_CACHE_FLUSH_ADDRESS_PA_MASK, FULL_FLUSH_PA);
    480049d8:	fe843703          	ld	a4,-24(s0)
    480049dc:	6785                	lui	a5,0x1
    480049de:	97ba                	add	a5,a5,a4
    480049e0:	8107b703          	ld	a4,-2032(a5) # 810 <__heap_size+0x10>
    480049e4:	57fd                	li	a5,-1
    480049e6:	17e2                	sll	a5,a5,0x38
    480049e8:	07fd                	add	a5,a5,31
    480049ea:	8f7d                	and	a4,a4,a5
    480049ec:	2b801793          	bset	a5,zero,0x38
    480049f0:	c0078793          	add	a5,a5,-1024
    480049f4:	8f5d                	or	a4,a4,a5
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:395
    ec->FLUSHADDR = \
    480049f6:	fe843683          	ld	a3,-24(s0)
    480049fa:	6785                	lui	a5,0x1
    480049fc:	97b6                	add	a5,a5,a3
    480049fe:	80e7b823          	sd	a4,-2032(a5) # 810 <__heap_size+0x10>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:398

    return sifive_extensiblecache0_flush(slice_index, option);
    48004a02:	fd442783          	lw	a5,-44(s0)
    48004a06:	85be                	mv	a1,a5
    48004a08:	fd843503          	ld	a0,-40(s0)
    48004a0c:	070000ef          	jal	48004a7c <sifive_extensiblecache0_flush>
    48004a10:	87aa                	mv	a5,a0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:399
}
    48004a12:	853e                	mv	a0,a5
    48004a14:	70a2                	ld	ra,40(sp)
    48004a16:	7402                	ld	s0,32(sp)
    48004a18:	6145                	add	sp,sp,48
    48004a1a:	8082                	ret

0000000048004a1c <_is_region_valid>:
_is_region_valid():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:404

/**
 * Private functions definitions
 */
static inline int _is_region_valid(size_t slice_index, size_t region_index) {
    48004a1c:	1101                	add	sp,sp,-32
    48004a1e:	ec22                	sd	s0,24(sp)
    48004a20:	1000                	add	s0,sp,32
    48004a22:	fea43423          	sd	a0,-24(s0)
    48004a26:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:406

    return (!(slice_index < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT &&
    48004a2a:	fe843703          	ld	a4,-24(s0)
    48004a2e:	4785                	li	a5,1
    48004a30:	00e7e763          	bltu	a5,a4,48004a3e <_is_region_valid+0x22>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:406 (discriminator 2)
    48004a34:	fe043703          	ld	a4,-32(s0)
    48004a38:	478d                	li	a5,3
    48004a3a:	00e7f463          	bgeu	a5,a4,48004a42 <_is_region_valid+0x26>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:406 (discriminator 3)
    48004a3e:	4785                	li	a5,1
    48004a40:	a011                	j	48004a44 <_is_region_valid+0x28>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:406 (discriminator 4)
    48004a42:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:408 (discriminator 6)
             region_index < SIFIVE_EXTENSIBLECACHE0_LOCK_REGION_COUNT));
}
    48004a44:	853e                	mv	a0,a5
    48004a46:	6462                	ld	s0,24(sp)
    48004a48:	6105                	add	sp,sp,32
    48004a4a:	8082                	ret

0000000048004a4c <_is_range_valid>:
_is_range_valid():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:410

static inline int _is_range_valid(unsigned long addr, size_t size) {
    48004a4c:	1101                	add	sp,sp,-32
    48004a4e:	ec22                	sd	s0,24(sp)
    48004a50:	1000                	add	s0,sp,32
    48004a52:	fea43423          	sd	a0,-24(s0)
    48004a56:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:412

    return ((addr & 0x3FUL) || (size & 0x3FUL));
    48004a5a:	fe843783          	ld	a5,-24(s0)
    48004a5e:	03f7f793          	and	a5,a5,63
    48004a62:	e791                	bnez	a5,48004a6e <_is_range_valid+0x22>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:412 (discriminator 2)
    48004a64:	fe043783          	ld	a5,-32(s0)
    48004a68:	03f7f793          	and	a5,a5,63
    48004a6c:	c399                	beqz	a5,48004a72 <_is_range_valid+0x26>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:412 (discriminator 3)
    48004a6e:	4785                	li	a5,1
    48004a70:	a011                	j	48004a74 <_is_range_valid+0x28>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:412 (discriminator 4)
    48004a72:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:413 (discriminator 6)
}
    48004a74:	853e                	mv	a0,a5
    48004a76:	6462                	ld	s0,24(sp)
    48004a78:	6105                	add	sp,sp,32
    48004a7a:	8082                	ret

0000000048004a7c <sifive_extensiblecache0_flush>:
sifive_extensiblecache0_flush():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:416

static int sifive_extensiblecache0_flush(size_t slice_index,
    enum sifive_extensiblecache0_flush_options option) {
    48004a7c:	7179                	add	sp,sp,-48
    48004a7e:	f422                	sd	s0,40(sp)
    48004a80:	1800                	add	s0,sp,48
    48004a82:	fca43c23          	sd	a0,-40(s0)
    48004a86:	87ae                	mv	a5,a1
    48004a88:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:420
    unsigned flush_cmd;

    /* Trigger the specidfied cache operation */
    switch (option) {
    48004a8c:	fd442783          	lw	a5,-44(s0)
    48004a90:	2781                	sext.w	a5,a5
    48004a92:	cb89                	beqz	a5,48004aa4 <sifive_extensiblecache0_flush+0x28>
    48004a94:	fd442783          	lw	a5,-44(s0)
    48004a98:	0007871b          	sext.w	a4,a5
    48004a9c:	4785                	li	a5,1
    48004a9e:	00f70763          	beq	a4,a5,48004aac <sifive_extensiblecache0_flush+0x30>
    48004aa2:	a809                	j	48004ab4 <sifive_extensiblecache0_flush+0x38>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:422
    case SIFIVE_EXTENSIBLECACHE0_FLUSH_CLEAN:
        flush_cmd = EC_CACHE_FLUSH_CLEAN_CMD;
    48004aa4:	4789                	li	a5,2
    48004aa6:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:423
        break;
    48004aaa:	a039                	j	48004ab8 <sifive_extensiblecache0_flush+0x3c>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:425
    case SIFIVE_EXTENSIBLECACHE0_FLUSH_CLEAN_INV:
        flush_cmd = EC_CACHE_FLUSH_CLEAN_INV_CMD;
    48004aac:	478d                	li	a5,3
    48004aae:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:426
        break;
    48004ab2:	a019                	j	48004ab8 <sifive_extensiblecache0_flush+0x3c>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:428
    default:
        return -EINVAL;
    48004ab4:	57a9                	li	a5,-22
    48004ab6:	a8b9                	j	48004b14 <sifive_extensiblecache0_flush+0x98>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:432
    }

    EXTENSIBLECACHE_Type *const ec = \
        (EXTENSIBLECACHE_Type *)_SLICES[slice_index].base;
    48004ab8:	ffffc717          	auipc	a4,0xffffc
    48004abc:	e1070713          	add	a4,a4,-496 # 480008c8 <_SLICES>
    48004ac0:	fd843783          	ld	a5,-40(s0)
    48004ac4:	0792                	sll	a5,a5,0x4
    48004ac6:	97ba                	add	a5,a5,a4
    48004ac8:	639c                	ld	a5,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:431
    EXTENSIBLECACHE_Type *const ec = \
    48004aca:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:434

    ec->CACHEFLUSHCMD = PREP_FIELD(ec->CACHEFLUSHCMD, EC_CACHE_FLUSH_CMD_MASK, flush_cmd);
    48004ace:	fe043703          	ld	a4,-32(s0)
    48004ad2:	6785                	lui	a5,0x1
    48004ad4:	97ba                	add	a5,a5,a4
    48004ad6:	8007a783          	lw	a5,-2048(a5) # 800 <__heap_size>
    48004ada:	2781                	sext.w	a5,a5
    48004adc:	9bf1                	and	a5,a5,-4
    48004ade:	0007871b          	sext.w	a4,a5
    48004ae2:	fec42783          	lw	a5,-20(s0)
    48004ae6:	8b8d                	and	a5,a5,3
    48004ae8:	2781                	sext.w	a5,a5
    48004aea:	8fd9                	or	a5,a5,a4
    48004aec:	0007871b          	sext.w	a4,a5
    48004af0:	fe043683          	ld	a3,-32(s0)
    48004af4:	6785                	lui	a5,0x1
    48004af6:	97b6                	add	a5,a5,a3
    48004af8:	80e7a023          	sw	a4,-2048(a5) # 800 <__heap_size>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:436
    /* Wait for flush completion signal */
    while (0 == READ_FIELD(ec->CACHEFLUSHSTATUS, EC_CACHE_FLUSH_STATUS_MASK))
    48004afc:	0001                	nop
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:436 (discriminator 1)
    48004afe:	fe043703          	ld	a4,-32(s0)
    48004b02:	6785                	lui	a5,0x1
    48004b04:	97ba                	add	a5,a5,a4
    48004b06:	8087a783          	lw	a5,-2040(a5) # 808 <__heap_size+0x8>
    48004b0a:	2781                	sext.w	a5,a5
    48004b0c:	8b85                	and	a5,a5,1
    48004b0e:	2781                	sext.w	a5,a5
    48004b10:	d7fd                	beqz	a5,48004afe <sifive_extensiblecache0_flush+0x82>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:439
        ;

    return 0;
    48004b12:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:440
}
    48004b14:	853e                	mv	a0,a5
    48004b16:	7422                	ld	s0,40(sp)
    48004b18:	6145                	add	sp,sp,48
    48004b1a:	8082                	ret

0000000048004b1c <sifive_extensiblecache0_noDirtyFill_set>:
sifive_extensiblecache0_noDirtyFill_set():
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:442

void sifive_extensiblecache0_noDirtyFill_set(void) {
    48004b1c:	1101                	add	sp,sp,-32
    48004b1e:	ec22                	sd	s0,24(sp)
    48004b20:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:446

    volatile uint32_t * reg;

    for (unsigned idx = 0U; idx < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT; idx++) {
    48004b22:	fe042623          	sw	zero,-20(s0)
    48004b26:	a80d                	j	48004b58 <sifive_extensiblecache0_noDirtyFill_set+0x3c>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:447 (discriminator 3)
      reg = (uint32_t *)((uint8_t *)(_SLICES[idx].base) + METAL_SIFIVE_EXTENSIBLECACHE0_MODECONTROL);
    48004b28:	ffffc717          	auipc	a4,0xffffc
    48004b2c:	da070713          	add	a4,a4,-608 # 480008c8 <_SLICES>
    48004b30:	fec46783          	lwu	a5,-20(s0)
    48004b34:	0792                	sll	a5,a5,0x4
    48004b36:	97ba                	add	a5,a5,a4
    48004b38:	6398                	ld	a4,0(a5)
    48004b3a:	6785                	lui	a5,0x1
    48004b3c:	a0078793          	add	a5,a5,-1536 # a00 <__heap_size+0x200>
    48004b40:	97ba                	add	a5,a5,a4
    48004b42:	fef43023          	sd	a5,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:448 (discriminator 3)
      *reg = 0x01;
    48004b46:	fe043783          	ld	a5,-32(s0)
    48004b4a:	4705                	li	a4,1
    48004b4c:	c398                	sw	a4,0(a5)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:446 (discriminator 3)
    for (unsigned idx = 0U; idx < SIFIVE_EXTENSIBLECACHE0_SLICE_COUNT; idx++) {
    48004b4e:	fec42783          	lw	a5,-20(s0)
    48004b52:	2785                	addw	a5,a5,1
    48004b54:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:446 (discriminator 1)
    48004b58:	fec42783          	lw	a5,-20(s0)
    48004b5c:	0007871b          	sext.w	a4,a5
    48004b60:	4785                	li	a5,1
    48004b62:	fce7f3e3          	bgeu	a5,a4,48004b28 <sifive_extensiblecache0_noDirtyFill_set+0xc>
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:450
    }
    __asm__ volatile("fence o, o" : : : "memory");
    48004b66:	0440000f          	fence	o,o
validation-software/freedom-metal/src/drivers/sifive_extensiblecache0.c:451
}
    48004b6a:	0001                	nop
    48004b6c:	6462                	ld	s0,24(sp)
    48004b6e:	6105                	add	sp,sp,32
    48004b70:	8082                	ret

0000000048004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>:
__metal_driver_sifive_global_external_interrupts0_interrupt_parent():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:369
{
		return 0;
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_global_external_interrupts0_interrupt_parent(struct metal_interrupt *controller)
{
    48004b72:	1101                	add	sp,sp,-32
    48004b74:	ec22                	sd	s0,24(sp)
    48004b76:	1000                	add	s0,sp,32
    48004b78:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:370
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_global_external_interrupts) {
    48004b7c:	fe843703          	ld	a4,-24(s0)
    48004b80:	37ffc797          	auipc	a5,0x37ffc
    48004b84:	b8078793          	add	a5,a5,-1152 # 80000700 <__metal_dt_global_external_interrupts>
    48004b88:	00f71763          	bne	a4,a5,48004b96 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent+0x24>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:371
		return (struct metal_interrupt *)&__metal_dt_aplic_irq_domain_c004000.controller;
    48004b8c:	37ffc797          	auipc	a5,0x37ffc
    48004b90:	b4478793          	add	a5,a5,-1212 # 800006d0 <__metal_dt_aplic_irq_domain_c004000>
    48004b94:	a011                	j	48004b98 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent+0x26>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:374
	}
	else {
		return NULL;
    48004b96:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:376
	}
}
    48004b98:	853e                	mv	a0,a5
    48004b9a:	6462                	ld	s0,24(sp)
    48004b9c:	6105                	add	sp,sp,32
    48004b9e:	8082                	ret

0000000048004ba0 <__metal_driver_sifive_global_external_interrupts0_num_interrupts>:
__metal_driver_sifive_global_external_interrupts0_num_interrupts():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:379

static __inline__ int __metal_driver_sifive_global_external_interrupts0_num_interrupts(struct metal_interrupt *controller)
{
    48004ba0:	1101                	add	sp,sp,-32
    48004ba2:	ec22                	sd	s0,24(sp)
    48004ba4:	1000                	add	s0,sp,32
    48004ba6:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:380
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_global_external_interrupts) {
    48004baa:	fe843703          	ld	a4,-24(s0)
    48004bae:	37ffc797          	auipc	a5,0x37ffc
    48004bb2:	b5278793          	add	a5,a5,-1198 # 80000700 <__metal_dt_global_external_interrupts>
    48004bb6:	00f71563          	bne	a4,a5,48004bc0 <__metal_driver_sifive_global_external_interrupts0_num_interrupts+0x20>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:381
		return METAL_MAX_GLOBAL_EXT_INTERRUPTS;
    48004bba:	07f00793          	li	a5,127
    48004bbe:	a011                	j	48004bc2 <__metal_driver_sifive_global_external_interrupts0_num_interrupts+0x22>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:384
	}
	else {
		return 0;
    48004bc0:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:386
	}
}
    48004bc2:	853e                	mv	a0,a5
    48004bc4:	6462                	ld	s0,24(sp)
    48004bc6:	6105                	add	sp,sp,32
    48004bc8:	8082                	ret

0000000048004bca <__metal_driver_sifive_global_external_interrupts0_interrupt_lines>:
__metal_driver_sifive_global_external_interrupts0_interrupt_lines():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:389

static __inline__ int __metal_driver_sifive_global_external_interrupts0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
    48004bca:	1101                	add	sp,sp,-32
    48004bcc:	ec22                	sd	s0,24(sp)
    48004bce:	1000                	add	s0,sp,32
    48004bd0:	fea43423          	sd	a0,-24(s0)
    48004bd4:	87ae                	mv	a5,a1
    48004bd6:	fef42223          	sw	a5,-28(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:390
	if (idx == 0) {
    48004bda:	fe442783          	lw	a5,-28(s0)
    48004bde:	2781                	sext.w	a5,a5
    48004be0:	e781                	bnez	a5,48004be8 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x1e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:391
		return 4;
    48004be2:	4791                	li	a5,4
    48004be4:	2a90006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:393
	}
	else if (idx == 1) {
    48004be8:	fe442783          	lw	a5,-28(s0)
    48004bec:	0007871b          	sext.w	a4,a5
    48004bf0:	4785                	li	a5,1
    48004bf2:	00f71563          	bne	a4,a5,48004bfc <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x32>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:394
		return 5;
    48004bf6:	4795                	li	a5,5
    48004bf8:	2950006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:396
	}
	else if (idx == 2) {
    48004bfc:	fe442783          	lw	a5,-28(s0)
    48004c00:	0007871b          	sext.w	a4,a5
    48004c04:	4789                	li	a5,2
    48004c06:	00f71563          	bne	a4,a5,48004c10 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x46>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:397
		return 6;
    48004c0a:	4799                	li	a5,6
    48004c0c:	2810006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:399
	}
	else if (idx == 3) {
    48004c10:	fe442783          	lw	a5,-28(s0)
    48004c14:	0007871b          	sext.w	a4,a5
    48004c18:	478d                	li	a5,3
    48004c1a:	00f71563          	bne	a4,a5,48004c24 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x5a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:400
		return 7;
    48004c1e:	479d                	li	a5,7
    48004c20:	26d0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:402
	}
	else if (idx == 4) {
    48004c24:	fe442783          	lw	a5,-28(s0)
    48004c28:	0007871b          	sext.w	a4,a5
    48004c2c:	4791                	li	a5,4
    48004c2e:	00f71563          	bne	a4,a5,48004c38 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x6e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:403
		return 8;
    48004c32:	47a1                	li	a5,8
    48004c34:	2590006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:405
	}
	else if (idx == 5) {
    48004c38:	fe442783          	lw	a5,-28(s0)
    48004c3c:	0007871b          	sext.w	a4,a5
    48004c40:	4795                	li	a5,5
    48004c42:	00f71563          	bne	a4,a5,48004c4c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x82>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:406
		return 9;
    48004c46:	47a5                	li	a5,9
    48004c48:	2450006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:408
	}
	else if (idx == 6) {
    48004c4c:	fe442783          	lw	a5,-28(s0)
    48004c50:	0007871b          	sext.w	a4,a5
    48004c54:	4799                	li	a5,6
    48004c56:	00f71563          	bne	a4,a5,48004c60 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x96>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:409
		return 10;
    48004c5a:	47a9                	li	a5,10
    48004c5c:	2310006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:411
	}
	else if (idx == 7) {
    48004c60:	fe442783          	lw	a5,-28(s0)
    48004c64:	0007871b          	sext.w	a4,a5
    48004c68:	479d                	li	a5,7
    48004c6a:	00f71563          	bne	a4,a5,48004c74 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xaa>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:412
		return 11;
    48004c6e:	47ad                	li	a5,11
    48004c70:	21d0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:414
	}
	else if (idx == 8) {
    48004c74:	fe442783          	lw	a5,-28(s0)
    48004c78:	0007871b          	sext.w	a4,a5
    48004c7c:	47a1                	li	a5,8
    48004c7e:	00f71563          	bne	a4,a5,48004c88 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xbe>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:415
		return 12;
    48004c82:	47b1                	li	a5,12
    48004c84:	2090006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:417
	}
	else if (idx == 9) {
    48004c88:	fe442783          	lw	a5,-28(s0)
    48004c8c:	0007871b          	sext.w	a4,a5
    48004c90:	47a5                	li	a5,9
    48004c92:	00f71563          	bne	a4,a5,48004c9c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xd2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:418
		return 13;
    48004c96:	47b5                	li	a5,13
    48004c98:	1f50006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:420
	}
	else if (idx == 10) {
    48004c9c:	fe442783          	lw	a5,-28(s0)
    48004ca0:	0007871b          	sext.w	a4,a5
    48004ca4:	47a9                	li	a5,10
    48004ca6:	00f71563          	bne	a4,a5,48004cb0 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xe6>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:421
		return 14;
    48004caa:	47b9                	li	a5,14
    48004cac:	1e10006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:423
	}
	else if (idx == 11) {
    48004cb0:	fe442783          	lw	a5,-28(s0)
    48004cb4:	0007871b          	sext.w	a4,a5
    48004cb8:	47ad                	li	a5,11
    48004cba:	00f71563          	bne	a4,a5,48004cc4 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xfa>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:424
		return 15;
    48004cbe:	47bd                	li	a5,15
    48004cc0:	1cd0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:426
	}
	else if (idx == 12) {
    48004cc4:	fe442783          	lw	a5,-28(s0)
    48004cc8:	0007871b          	sext.w	a4,a5
    48004ccc:	47b1                	li	a5,12
    48004cce:	00f71563          	bne	a4,a5,48004cd8 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x10e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:427
		return 16;
    48004cd2:	47c1                	li	a5,16
    48004cd4:	1b90006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:429
	}
	else if (idx == 13) {
    48004cd8:	fe442783          	lw	a5,-28(s0)
    48004cdc:	0007871b          	sext.w	a4,a5
    48004ce0:	47b5                	li	a5,13
    48004ce2:	00f71563          	bne	a4,a5,48004cec <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x122>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:430
		return 17;
    48004ce6:	47c5                	li	a5,17
    48004ce8:	1a50006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:432
	}
	else if (idx == 14) {
    48004cec:	fe442783          	lw	a5,-28(s0)
    48004cf0:	0007871b          	sext.w	a4,a5
    48004cf4:	47b9                	li	a5,14
    48004cf6:	00f71563          	bne	a4,a5,48004d00 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x136>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:433
		return 18;
    48004cfa:	47c9                	li	a5,18
    48004cfc:	1910006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:435
	}
	else if (idx == 15) {
    48004d00:	fe442783          	lw	a5,-28(s0)
    48004d04:	0007871b          	sext.w	a4,a5
    48004d08:	47bd                	li	a5,15
    48004d0a:	00f71563          	bne	a4,a5,48004d14 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x14a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:436
		return 19;
    48004d0e:	47cd                	li	a5,19
    48004d10:	17d0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:438
	}
	else if (idx == 16) {
    48004d14:	fe442783          	lw	a5,-28(s0)
    48004d18:	0007871b          	sext.w	a4,a5
    48004d1c:	47c1                	li	a5,16
    48004d1e:	00f71563          	bne	a4,a5,48004d28 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x15e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:439
		return 20;
    48004d22:	47d1                	li	a5,20
    48004d24:	1690006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:441
	}
	else if (idx == 17) {
    48004d28:	fe442783          	lw	a5,-28(s0)
    48004d2c:	0007871b          	sext.w	a4,a5
    48004d30:	47c5                	li	a5,17
    48004d32:	00f71563          	bne	a4,a5,48004d3c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x172>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:442
		return 21;
    48004d36:	47d5                	li	a5,21
    48004d38:	1550006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:444
	}
	else if (idx == 18) {
    48004d3c:	fe442783          	lw	a5,-28(s0)
    48004d40:	0007871b          	sext.w	a4,a5
    48004d44:	47c9                	li	a5,18
    48004d46:	00f71563          	bne	a4,a5,48004d50 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x186>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:445
		return 22;
    48004d4a:	47d9                	li	a5,22
    48004d4c:	1410006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:447
	}
	else if (idx == 19) {
    48004d50:	fe442783          	lw	a5,-28(s0)
    48004d54:	0007871b          	sext.w	a4,a5
    48004d58:	47cd                	li	a5,19
    48004d5a:	00f71563          	bne	a4,a5,48004d64 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x19a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:448
		return 23;
    48004d5e:	47dd                	li	a5,23
    48004d60:	12d0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:450
	}
	else if (idx == 20) {
    48004d64:	fe442783          	lw	a5,-28(s0)
    48004d68:	0007871b          	sext.w	a4,a5
    48004d6c:	47d1                	li	a5,20
    48004d6e:	00f71563          	bne	a4,a5,48004d78 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x1ae>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:451
		return 24;
    48004d72:	47e1                	li	a5,24
    48004d74:	1190006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:453
	}
	else if (idx == 21) {
    48004d78:	fe442783          	lw	a5,-28(s0)
    48004d7c:	0007871b          	sext.w	a4,a5
    48004d80:	47d5                	li	a5,21
    48004d82:	00f71563          	bne	a4,a5,48004d8c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x1c2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:454
		return 25;
    48004d86:	47e5                	li	a5,25
    48004d88:	1050006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:456
	}
	else if (idx == 22) {
    48004d8c:	fe442783          	lw	a5,-28(s0)
    48004d90:	0007871b          	sext.w	a4,a5
    48004d94:	47d9                	li	a5,22
    48004d96:	00f71563          	bne	a4,a5,48004da0 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x1d6>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:457
		return 26;
    48004d9a:	47e9                	li	a5,26
    48004d9c:	0f10006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:459
	}
	else if (idx == 23) {
    48004da0:	fe442783          	lw	a5,-28(s0)
    48004da4:	0007871b          	sext.w	a4,a5
    48004da8:	47dd                	li	a5,23
    48004daa:	00f71563          	bne	a4,a5,48004db4 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x1ea>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:460
		return 27;
    48004dae:	47ed                	li	a5,27
    48004db0:	0dd0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:462
	}
	else if (idx == 24) {
    48004db4:	fe442783          	lw	a5,-28(s0)
    48004db8:	0007871b          	sext.w	a4,a5
    48004dbc:	47e1                	li	a5,24
    48004dbe:	00f71563          	bne	a4,a5,48004dc8 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x1fe>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:463
		return 28;
    48004dc2:	47f1                	li	a5,28
    48004dc4:	0c90006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:465
	}
	else if (idx == 25) {
    48004dc8:	fe442783          	lw	a5,-28(s0)
    48004dcc:	0007871b          	sext.w	a4,a5
    48004dd0:	47e5                	li	a5,25
    48004dd2:	00f71563          	bne	a4,a5,48004ddc <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x212>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:466
		return 29;
    48004dd6:	47f5                	li	a5,29
    48004dd8:	0b50006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:468
	}
	else if (idx == 26) {
    48004ddc:	fe442783          	lw	a5,-28(s0)
    48004de0:	0007871b          	sext.w	a4,a5
    48004de4:	47e9                	li	a5,26
    48004de6:	00f71563          	bne	a4,a5,48004df0 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x226>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:469
		return 30;
    48004dea:	47f9                	li	a5,30
    48004dec:	0a10006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:471
	}
	else if (idx == 27) {
    48004df0:	fe442783          	lw	a5,-28(s0)
    48004df4:	0007871b          	sext.w	a4,a5
    48004df8:	47ed                	li	a5,27
    48004dfa:	00f71563          	bne	a4,a5,48004e04 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x23a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:472
		return 31;
    48004dfe:	47fd                	li	a5,31
    48004e00:	08d0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:474
	}
	else if (idx == 28) {
    48004e04:	fe442783          	lw	a5,-28(s0)
    48004e08:	0007871b          	sext.w	a4,a5
    48004e0c:	47f1                	li	a5,28
    48004e0e:	00f71663          	bne	a4,a5,48004e1a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x250>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:475
		return 32;
    48004e12:	02000793          	li	a5,32
    48004e16:	0770006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:477
	}
	else if (idx == 29) {
    48004e1a:	fe442783          	lw	a5,-28(s0)
    48004e1e:	0007871b          	sext.w	a4,a5
    48004e22:	47f5                	li	a5,29
    48004e24:	00f71663          	bne	a4,a5,48004e30 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x266>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:478
		return 33;
    48004e28:	02100793          	li	a5,33
    48004e2c:	0610006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:480
	}
	else if (idx == 30) {
    48004e30:	fe442783          	lw	a5,-28(s0)
    48004e34:	0007871b          	sext.w	a4,a5
    48004e38:	47f9                	li	a5,30
    48004e3a:	00f71663          	bne	a4,a5,48004e46 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x27c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:481
		return 34;
    48004e3e:	02200793          	li	a5,34
    48004e42:	04b0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:483
	}
	else if (idx == 31) {
    48004e46:	fe442783          	lw	a5,-28(s0)
    48004e4a:	0007871b          	sext.w	a4,a5
    48004e4e:	47fd                	li	a5,31
    48004e50:	00f71663          	bne	a4,a5,48004e5c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x292>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:484
		return 35;
    48004e54:	02300793          	li	a5,35
    48004e58:	0350006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:486
	}
	else if (idx == 32) {
    48004e5c:	fe442783          	lw	a5,-28(s0)
    48004e60:	0007871b          	sext.w	a4,a5
    48004e64:	02000793          	li	a5,32
    48004e68:	00f71663          	bne	a4,a5,48004e74 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x2aa>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:487
		return 36;
    48004e6c:	02400793          	li	a5,36
    48004e70:	01d0006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:489
	}
	else if (idx == 33) {
    48004e74:	fe442783          	lw	a5,-28(s0)
    48004e78:	0007871b          	sext.w	a4,a5
    48004e7c:	02100793          	li	a5,33
    48004e80:	00f71663          	bne	a4,a5,48004e8c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x2c2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:490
		return 37;
    48004e84:	02500793          	li	a5,37
    48004e88:	0050006f          	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:492
	}
	else if (idx == 34) {
    48004e8c:	fe442783          	lw	a5,-28(s0)
    48004e90:	0007871b          	sext.w	a4,a5
    48004e94:	02200793          	li	a5,34
    48004e98:	00f71563          	bne	a4,a5,48004ea2 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x2d8>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:493
		return 38;
    48004e9c:	02600793          	li	a5,38
    48004ea0:	a7f5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:495
	}
	else if (idx == 35) {
    48004ea2:	fe442783          	lw	a5,-28(s0)
    48004ea6:	0007871b          	sext.w	a4,a5
    48004eaa:	02300793          	li	a5,35
    48004eae:	00f71563          	bne	a4,a5,48004eb8 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x2ee>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:496
		return 39;
    48004eb2:	02700793          	li	a5,39
    48004eb6:	afd9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:498
	}
	else if (idx == 36) {
    48004eb8:	fe442783          	lw	a5,-28(s0)
    48004ebc:	0007871b          	sext.w	a4,a5
    48004ec0:	02400793          	li	a5,36
    48004ec4:	00f71563          	bne	a4,a5,48004ece <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x304>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:499
		return 40;
    48004ec8:	02800793          	li	a5,40
    48004ecc:	a7c1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:501
	}
	else if (idx == 37) {
    48004ece:	fe442783          	lw	a5,-28(s0)
    48004ed2:	0007871b          	sext.w	a4,a5
    48004ed6:	02500793          	li	a5,37
    48004eda:	00f71563          	bne	a4,a5,48004ee4 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x31a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:502
		return 41;
    48004ede:	02900793          	li	a5,41
    48004ee2:	a76d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:504
	}
	else if (idx == 38) {
    48004ee4:	fe442783          	lw	a5,-28(s0)
    48004ee8:	0007871b          	sext.w	a4,a5
    48004eec:	02600793          	li	a5,38
    48004ef0:	00f71563          	bne	a4,a5,48004efa <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x330>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:505
		return 42;
    48004ef4:	02a00793          	li	a5,42
    48004ef8:	af51                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:507
	}
	else if (idx == 39) {
    48004efa:	fe442783          	lw	a5,-28(s0)
    48004efe:	0007871b          	sext.w	a4,a5
    48004f02:	02700793          	li	a5,39
    48004f06:	00f71563          	bne	a4,a5,48004f10 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x346>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:508
		return 43;
    48004f0a:	02b00793          	li	a5,43
    48004f0e:	afbd                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:510
	}
	else if (idx == 40) {
    48004f10:	fe442783          	lw	a5,-28(s0)
    48004f14:	0007871b          	sext.w	a4,a5
    48004f18:	02800793          	li	a5,40
    48004f1c:	00f71563          	bne	a4,a5,48004f26 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x35c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:511
		return 44;
    48004f20:	02c00793          	li	a5,44
    48004f24:	a7a5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:513
	}
	else if (idx == 41) {
    48004f26:	fe442783          	lw	a5,-28(s0)
    48004f2a:	0007871b          	sext.w	a4,a5
    48004f2e:	02900793          	li	a5,41
    48004f32:	00f71563          	bne	a4,a5,48004f3c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x372>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:514
		return 45;
    48004f36:	02d00793          	li	a5,45
    48004f3a:	af89                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:516
	}
	else if (idx == 42) {
    48004f3c:	fe442783          	lw	a5,-28(s0)
    48004f40:	0007871b          	sext.w	a4,a5
    48004f44:	02a00793          	li	a5,42
    48004f48:	00f71563          	bne	a4,a5,48004f52 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x388>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:517
		return 46;
    48004f4c:	02e00793          	li	a5,46
    48004f50:	af35                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:519
	}
	else if (idx == 43) {
    48004f52:	fe442783          	lw	a5,-28(s0)
    48004f56:	0007871b          	sext.w	a4,a5
    48004f5a:	02b00793          	li	a5,43
    48004f5e:	00f71563          	bne	a4,a5,48004f68 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x39e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:520
		return 47;
    48004f62:	02f00793          	li	a5,47
    48004f66:	a71d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:522
	}
	else if (idx == 44) {
    48004f68:	fe442783          	lw	a5,-28(s0)
    48004f6c:	0007871b          	sext.w	a4,a5
    48004f70:	02c00793          	li	a5,44
    48004f74:	00f71563          	bne	a4,a5,48004f7e <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x3b4>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:523
		return 48;
    48004f78:	03000793          	li	a5,48
    48004f7c:	af01                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:525
	}
	else if (idx == 45) {
    48004f7e:	fe442783          	lw	a5,-28(s0)
    48004f82:	0007871b          	sext.w	a4,a5
    48004f86:	02d00793          	li	a5,45
    48004f8a:	00f71563          	bne	a4,a5,48004f94 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x3ca>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:526
		return 49;
    48004f8e:	03100793          	li	a5,49
    48004f92:	aded                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:528
	}
	else if (idx == 46) {
    48004f94:	fe442783          	lw	a5,-28(s0)
    48004f98:	0007871b          	sext.w	a4,a5
    48004f9c:	02e00793          	li	a5,46
    48004fa0:	00f71563          	bne	a4,a5,48004faa <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x3e0>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:529
		return 50;
    48004fa4:	03200793          	li	a5,50
    48004fa8:	a5d5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:531
	}
	else if (idx == 47) {
    48004faa:	fe442783          	lw	a5,-28(s0)
    48004fae:	0007871b          	sext.w	a4,a5
    48004fb2:	02f00793          	li	a5,47
    48004fb6:	00f71563          	bne	a4,a5,48004fc0 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x3f6>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:532
		return 51;
    48004fba:	03300793          	li	a5,51
    48004fbe:	a5f9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:534
	}
	else if (idx == 48) {
    48004fc0:	fe442783          	lw	a5,-28(s0)
    48004fc4:	0007871b          	sext.w	a4,a5
    48004fc8:	03000793          	li	a5,48
    48004fcc:	00f71563          	bne	a4,a5,48004fd6 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x40c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:535
		return 52;
    48004fd0:	03400793          	li	a5,52
    48004fd4:	ad65                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:537
	}
	else if (idx == 49) {
    48004fd6:	fe442783          	lw	a5,-28(s0)
    48004fda:	0007871b          	sext.w	a4,a5
    48004fde:	03100793          	li	a5,49
    48004fe2:	00f71563          	bne	a4,a5,48004fec <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x422>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:538
		return 53;
    48004fe6:	03500793          	li	a5,53
    48004fea:	a54d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:540
	}
	else if (idx == 50) {
    48004fec:	fe442783          	lw	a5,-28(s0)
    48004ff0:	0007871b          	sext.w	a4,a5
    48004ff4:	03200793          	li	a5,50
    48004ff8:	00f71563          	bne	a4,a5,48005002 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x438>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:541
		return 54;
    48004ffc:	03600793          	li	a5,54
    48005000:	a571                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:543
	}
	else if (idx == 51) {
    48005002:	fe442783          	lw	a5,-28(s0)
    48005006:	0007871b          	sext.w	a4,a5
    4800500a:	03300793          	li	a5,51
    4800500e:	00f71563          	bne	a4,a5,48005018 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x44e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:544
		return 55;
    48005012:	03700793          	li	a5,55
    48005016:	ad9d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:546
	}
	else if (idx == 52) {
    48005018:	fe442783          	lw	a5,-28(s0)
    4800501c:	0007871b          	sext.w	a4,a5
    48005020:	03400793          	li	a5,52
    48005024:	00f71563          	bne	a4,a5,4800502e <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x464>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:547
		return 56;
    48005028:	03800793          	li	a5,56
    4800502c:	a585                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:549
	}
	else if (idx == 53) {
    4800502e:	fe442783          	lw	a5,-28(s0)
    48005032:	0007871b          	sext.w	a4,a5
    48005036:	03500793          	li	a5,53
    4800503a:	00f71563          	bne	a4,a5,48005044 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x47a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:550
		return 57;
    4800503e:	03900793          	li	a5,57
    48005042:	a5a9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:552
	}
	else if (idx == 54) {
    48005044:	fe442783          	lw	a5,-28(s0)
    48005048:	0007871b          	sext.w	a4,a5
    4800504c:	03600793          	li	a5,54
    48005050:	00f71563          	bne	a4,a5,4800505a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x490>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:553
		return 58;
    48005054:	03a00793          	li	a5,58
    48005058:	ad15                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:555
	}
	else if (idx == 55) {
    4800505a:	fe442783          	lw	a5,-28(s0)
    4800505e:	0007871b          	sext.w	a4,a5
    48005062:	03700793          	li	a5,55
    48005066:	00f71563          	bne	a4,a5,48005070 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x4a6>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:556
		return 59;
    4800506a:	03b00793          	li	a5,59
    4800506e:	ad39                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:558
	}
	else if (idx == 56) {
    48005070:	fe442783          	lw	a5,-28(s0)
    48005074:	0007871b          	sext.w	a4,a5
    48005078:	03800793          	li	a5,56
    4800507c:	00f71563          	bne	a4,a5,48005086 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x4bc>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:559
		return 60;
    48005080:	03c00793          	li	a5,60
    48005084:	a521                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:561
	}
	else if (idx == 57) {
    48005086:	fe442783          	lw	a5,-28(s0)
    4800508a:	0007871b          	sext.w	a4,a5
    4800508e:	03900793          	li	a5,57
    48005092:	00f71563          	bne	a4,a5,4800509c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x4d2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:562
		return 61;
    48005096:	03d00793          	li	a5,61
    4800509a:	abcd                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:564
	}
	else if (idx == 58) {
    4800509c:	fe442783          	lw	a5,-28(s0)
    480050a0:	0007871b          	sext.w	a4,a5
    480050a4:	03a00793          	li	a5,58
    480050a8:	00f71563          	bne	a4,a5,480050b2 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x4e8>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:565
		return 62;
    480050ac:	03e00793          	li	a5,62
    480050b0:	abf1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:567
	}
	else if (idx == 59) {
    480050b2:	fe442783          	lw	a5,-28(s0)
    480050b6:	0007871b          	sext.w	a4,a5
    480050ba:	03b00793          	li	a5,59
    480050be:	00f71563          	bne	a4,a5,480050c8 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x4fe>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:568
		return 63;
    480050c2:	03f00793          	li	a5,63
    480050c6:	a3d9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:570
	}
	else if (idx == 60) {
    480050c8:	fe442783          	lw	a5,-28(s0)
    480050cc:	0007871b          	sext.w	a4,a5
    480050d0:	03c00793          	li	a5,60
    480050d4:	00f71563          	bne	a4,a5,480050de <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x514>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:571
		return 64;
    480050d8:	04000793          	li	a5,64
    480050dc:	ab45                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:573
	}
	else if (idx == 61) {
    480050de:	fe442783          	lw	a5,-28(s0)
    480050e2:	0007871b          	sext.w	a4,a5
    480050e6:	03d00793          	li	a5,61
    480050ea:	00f71563          	bne	a4,a5,480050f4 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x52a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:574
		return 65;
    480050ee:	04100793          	li	a5,65
    480050f2:	ab69                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:576
	}
	else if (idx == 62) {
    480050f4:	fe442783          	lw	a5,-28(s0)
    480050f8:	0007871b          	sext.w	a4,a5
    480050fc:	03e00793          	li	a5,62
    48005100:	00f71563          	bne	a4,a5,4800510a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x540>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:577
		return 66;
    48005104:	04200793          	li	a5,66
    48005108:	a351                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:579
	}
	else if (idx == 63) {
    4800510a:	fe442783          	lw	a5,-28(s0)
    4800510e:	0007871b          	sext.w	a4,a5
    48005112:	03f00793          	li	a5,63
    48005116:	00f71563          	bne	a4,a5,48005120 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x556>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:580
		return 67;
    4800511a:	04300793          	li	a5,67
    4800511e:	a3bd                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:582
	}
	else if (idx == 64) {
    48005120:	fe442783          	lw	a5,-28(s0)
    48005124:	0007871b          	sext.w	a4,a5
    48005128:	04000793          	li	a5,64
    4800512c:	00f71563          	bne	a4,a5,48005136 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x56c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:583
		return 68;
    48005130:	04400793          	li	a5,68
    48005134:	aba1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:585
	}
	else if (idx == 65) {
    48005136:	fe442783          	lw	a5,-28(s0)
    4800513a:	0007871b          	sext.w	a4,a5
    4800513e:	04100793          	li	a5,65
    48005142:	00f71563          	bne	a4,a5,4800514c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x582>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:586
		return 69;
    48005146:	04500793          	li	a5,69
    4800514a:	a389                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:588
	}
	else if (idx == 66) {
    4800514c:	fe442783          	lw	a5,-28(s0)
    48005150:	0007871b          	sext.w	a4,a5
    48005154:	04200793          	li	a5,66
    48005158:	00f71563          	bne	a4,a5,48005162 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x598>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:589
		return 70;
    4800515c:	04600793          	li	a5,70
    48005160:	a335                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:591
	}
	else if (idx == 67) {
    48005162:	fe442783          	lw	a5,-28(s0)
    48005166:	0007871b          	sext.w	a4,a5
    4800516a:	04300793          	li	a5,67
    4800516e:	00f71563          	bne	a4,a5,48005178 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x5ae>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:592
		return 71;
    48005172:	04700793          	li	a5,71
    48005176:	ab19                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:594
	}
	else if (idx == 68) {
    48005178:	fe442783          	lw	a5,-28(s0)
    4800517c:	0007871b          	sext.w	a4,a5
    48005180:	04400793          	li	a5,68
    48005184:	00f71563          	bne	a4,a5,4800518e <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x5c4>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:595
		return 72;
    48005188:	04800793          	li	a5,72
    4800518c:	a301                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:597
	}
	else if (idx == 69) {
    4800518e:	fe442783          	lw	a5,-28(s0)
    48005192:	0007871b          	sext.w	a4,a5
    48005196:	04500793          	li	a5,69
    4800519a:	00f71563          	bne	a4,a5,480051a4 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x5da>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:598
		return 73;
    4800519e:	04900793          	li	a5,73
    480051a2:	a1ed                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:600
	}
	else if (idx == 70) {
    480051a4:	fe442783          	lw	a5,-28(s0)
    480051a8:	0007871b          	sext.w	a4,a5
    480051ac:	04600793          	li	a5,70
    480051b0:	00f71563          	bne	a4,a5,480051ba <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x5f0>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:601
		return 74;
    480051b4:	04a00793          	li	a5,74
    480051b8:	a9d1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:603
	}
	else if (idx == 71) {
    480051ba:	fe442783          	lw	a5,-28(s0)
    480051be:	0007871b          	sext.w	a4,a5
    480051c2:	04700793          	li	a5,71
    480051c6:	00f71563          	bne	a4,a5,480051d0 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x606>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:604
		return 75;
    480051ca:	04b00793          	li	a5,75
    480051ce:	a97d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:606
	}
	else if (idx == 72) {
    480051d0:	fe442783          	lw	a5,-28(s0)
    480051d4:	0007871b          	sext.w	a4,a5
    480051d8:	04800793          	li	a5,72
    480051dc:	00f71563          	bne	a4,a5,480051e6 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x61c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:607
		return 76;
    480051e0:	04c00793          	li	a5,76
    480051e4:	a165                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:609
	}
	else if (idx == 73) {
    480051e6:	fe442783          	lw	a5,-28(s0)
    480051ea:	0007871b          	sext.w	a4,a5
    480051ee:	04900793          	li	a5,73
    480051f2:	00f71563          	bne	a4,a5,480051fc <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x632>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:610
		return 77;
    480051f6:	04d00793          	li	a5,77
    480051fa:	a949                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:612
	}
	else if (idx == 74) {
    480051fc:	fe442783          	lw	a5,-28(s0)
    48005200:	0007871b          	sext.w	a4,a5
    48005204:	04a00793          	li	a5,74
    48005208:	00f71563          	bne	a4,a5,48005212 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x648>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:613
		return 78;
    4800520c:	04e00793          	li	a5,78
    48005210:	a9b5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:615
	}
	else if (idx == 75) {
    48005212:	fe442783          	lw	a5,-28(s0)
    48005216:	0007871b          	sext.w	a4,a5
    4800521a:	04b00793          	li	a5,75
    4800521e:	00f71563          	bne	a4,a5,48005228 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x65e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:616
		return 79;
    48005222:	04f00793          	li	a5,79
    48005226:	a19d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:618
	}
	else if (idx == 76) {
    48005228:	fe442783          	lw	a5,-28(s0)
    4800522c:	0007871b          	sext.w	a4,a5
    48005230:	04c00793          	li	a5,76
    48005234:	00f71563          	bne	a4,a5,4800523e <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x674>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:619
		return 80;
    48005238:	05000793          	li	a5,80
    4800523c:	a981                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:621
	}
	else if (idx == 77) {
    4800523e:	fe442783          	lw	a5,-28(s0)
    48005242:	0007871b          	sext.w	a4,a5
    48005246:	04d00793          	li	a5,77
    4800524a:	00f71563          	bne	a4,a5,48005254 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x68a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:622
		return 81;
    4800524e:	05100793          	li	a5,81
    48005252:	a92d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:624
	}
	else if (idx == 78) {
    48005254:	fe442783          	lw	a5,-28(s0)
    48005258:	0007871b          	sext.w	a4,a5
    4800525c:	04e00793          	li	a5,78
    48005260:	00f71563          	bne	a4,a5,4800526a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x6a0>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:625
		return 82;
    48005264:	05200793          	li	a5,82
    48005268:	a115                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:627
	}
	else if (idx == 79) {
    4800526a:	fe442783          	lw	a5,-28(s0)
    4800526e:	0007871b          	sext.w	a4,a5
    48005272:	04f00793          	li	a5,79
    48005276:	00f71563          	bne	a4,a5,48005280 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x6b6>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:628
		return 83;
    4800527a:	05300793          	li	a5,83
    4800527e:	a139                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:630
	}
	else if (idx == 80) {
    48005280:	fe442783          	lw	a5,-28(s0)
    48005284:	0007871b          	sext.w	a4,a5
    48005288:	05000793          	li	a5,80
    4800528c:	00f71563          	bne	a4,a5,48005296 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x6cc>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:631
		return 84;
    48005290:	05400793          	li	a5,84
    48005294:	aee5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:633
	}
	else if (idx == 81) {
    48005296:	fe442783          	lw	a5,-28(s0)
    4800529a:	0007871b          	sext.w	a4,a5
    4800529e:	05100793          	li	a5,81
    480052a2:	00f71563          	bne	a4,a5,480052ac <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x6e2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:634
		return 85;
    480052a6:	05500793          	li	a5,85
    480052aa:	a6cd                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:636
	}
	else if (idx == 82) {
    480052ac:	fe442783          	lw	a5,-28(s0)
    480052b0:	0007871b          	sext.w	a4,a5
    480052b4:	05200793          	li	a5,82
    480052b8:	00f71563          	bne	a4,a5,480052c2 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x6f8>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:637
		return 86;
    480052bc:	05600793          	li	a5,86
    480052c0:	a6f1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:639
	}
	else if (idx == 83) {
    480052c2:	fe442783          	lw	a5,-28(s0)
    480052c6:	0007871b          	sext.w	a4,a5
    480052ca:	05300793          	li	a5,83
    480052ce:	00f71563          	bne	a4,a5,480052d8 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x70e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:640
		return 87;
    480052d2:	05700793          	li	a5,87
    480052d6:	ae5d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:642
	}
	else if (idx == 84) {
    480052d8:	fe442783          	lw	a5,-28(s0)
    480052dc:	0007871b          	sext.w	a4,a5
    480052e0:	05400793          	li	a5,84
    480052e4:	00f71563          	bne	a4,a5,480052ee <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x724>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:643
		return 88;
    480052e8:	05800793          	li	a5,88
    480052ec:	a645                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:645
	}
	else if (idx == 85) {
    480052ee:	fe442783          	lw	a5,-28(s0)
    480052f2:	0007871b          	sext.w	a4,a5
    480052f6:	05500793          	li	a5,85
    480052fa:	00f71563          	bne	a4,a5,48005304 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x73a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:646
		return 89;
    480052fe:	05900793          	li	a5,89
    48005302:	a669                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:648
	}
	else if (idx == 86) {
    48005304:	fe442783          	lw	a5,-28(s0)
    48005308:	0007871b          	sext.w	a4,a5
    4800530c:	05600793          	li	a5,86
    48005310:	00f71563          	bne	a4,a5,4800531a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x750>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:649
		return 90;
    48005314:	05a00793          	li	a5,90
    48005318:	ae95                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:651
	}
	else if (idx == 87) {
    4800531a:	fe442783          	lw	a5,-28(s0)
    4800531e:	0007871b          	sext.w	a4,a5
    48005322:	05700793          	li	a5,87
    48005326:	00f71563          	bne	a4,a5,48005330 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x766>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:652
		return 91;
    4800532a:	05b00793          	li	a5,91
    4800532e:	aeb9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:654
	}
	else if (idx == 88) {
    48005330:	fe442783          	lw	a5,-28(s0)
    48005334:	0007871b          	sext.w	a4,a5
    48005338:	05800793          	li	a5,88
    4800533c:	00f71563          	bne	a4,a5,48005346 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x77c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:655
		return 92;
    48005340:	05c00793          	li	a5,92
    48005344:	a6a1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:657
	}
	else if (idx == 89) {
    48005346:	fe442783          	lw	a5,-28(s0)
    4800534a:	0007871b          	sext.w	a4,a5
    4800534e:	05900793          	li	a5,89
    48005352:	00f71563          	bne	a4,a5,4800535c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x792>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:658
		return 93;
    48005356:	05d00793          	li	a5,93
    4800535a:	ae0d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:660
	}
	else if (idx == 90) {
    4800535c:	fe442783          	lw	a5,-28(s0)
    48005360:	0007871b          	sext.w	a4,a5
    48005364:	05a00793          	li	a5,90
    48005368:	00f71563          	bne	a4,a5,48005372 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x7a8>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:661
		return 94;
    4800536c:	05e00793          	li	a5,94
    48005370:	ae31                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:663
	}
	else if (idx == 91) {
    48005372:	fe442783          	lw	a5,-28(s0)
    48005376:	0007871b          	sext.w	a4,a5
    4800537a:	05b00793          	li	a5,91
    4800537e:	00f71563          	bne	a4,a5,48005388 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x7be>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:664
		return 95;
    48005382:	05f00793          	li	a5,95
    48005386:	a619                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:666
	}
	else if (idx == 92) {
    48005388:	fe442783          	lw	a5,-28(s0)
    4800538c:	0007871b          	sext.w	a4,a5
    48005390:	05c00793          	li	a5,92
    48005394:	00f71563          	bne	a4,a5,4800539e <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x7d4>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:667
		return 96;
    48005398:	06000793          	li	a5,96
    4800539c:	acc5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:669
	}
	else if (idx == 93) {
    4800539e:	fe442783          	lw	a5,-28(s0)
    480053a2:	0007871b          	sext.w	a4,a5
    480053a6:	05d00793          	li	a5,93
    480053aa:	00f71563          	bne	a4,a5,480053b4 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x7ea>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:670
		return 97;
    480053ae:	06100793          	li	a5,97
    480053b2:	ace9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:672
	}
	else if (idx == 94) {
    480053b4:	fe442783          	lw	a5,-28(s0)
    480053b8:	0007871b          	sext.w	a4,a5
    480053bc:	05e00793          	li	a5,94
    480053c0:	00f71563          	bne	a4,a5,480053ca <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x800>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:673
		return 98;
    480053c4:	06200793          	li	a5,98
    480053c8:	a4d1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:675
	}
	else if (idx == 95) {
    480053ca:	fe442783          	lw	a5,-28(s0)
    480053ce:	0007871b          	sext.w	a4,a5
    480053d2:	05f00793          	li	a5,95
    480053d6:	00f71563          	bne	a4,a5,480053e0 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x816>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:676
		return 99;
    480053da:	06300793          	li	a5,99
    480053de:	a47d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:678
	}
	else if (idx == 96) {
    480053e0:	fe442783          	lw	a5,-28(s0)
    480053e4:	0007871b          	sext.w	a4,a5
    480053e8:	06000793          	li	a5,96
    480053ec:	00f71563          	bne	a4,a5,480053f6 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x82c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:679
		return 100;
    480053f0:	06400793          	li	a5,100
    480053f4:	ac61                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:681
	}
	else if (idx == 97) {
    480053f6:	fe442783          	lw	a5,-28(s0)
    480053fa:	0007871b          	sext.w	a4,a5
    480053fe:	06100793          	li	a5,97
    48005402:	00f71563          	bne	a4,a5,4800540c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x842>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:682
		return 101;
    48005406:	06500793          	li	a5,101
    4800540a:	a449                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:684
	}
	else if (idx == 98) {
    4800540c:	fe442783          	lw	a5,-28(s0)
    48005410:	0007871b          	sext.w	a4,a5
    48005414:	06200793          	li	a5,98
    48005418:	00f71563          	bne	a4,a5,48005422 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x858>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:685
		return 102;
    4800541c:	06600793          	li	a5,102
    48005420:	a4b5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:687
	}
	else if (idx == 99) {
    48005422:	fe442783          	lw	a5,-28(s0)
    48005426:	0007871b          	sext.w	a4,a5
    4800542a:	06300793          	li	a5,99
    4800542e:	00f71563          	bne	a4,a5,48005438 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x86e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:688
		return 103;
    48005432:	06700793          	li	a5,103
    48005436:	ac99                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:690
	}
	else if (idx == 100) {
    48005438:	fe442783          	lw	a5,-28(s0)
    4800543c:	0007871b          	sext.w	a4,a5
    48005440:	06400793          	li	a5,100
    48005444:	00f71563          	bne	a4,a5,4800544e <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x884>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:691
		return 104;
    48005448:	06800793          	li	a5,104
    4800544c:	a481                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:693
	}
	else if (idx == 101) {
    4800544e:	fe442783          	lw	a5,-28(s0)
    48005452:	0007871b          	sext.w	a4,a5
    48005456:	06500793          	li	a5,101
    4800545a:	00f71563          	bne	a4,a5,48005464 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x89a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:694
		return 105;
    4800545e:	06900793          	li	a5,105
    48005462:	a42d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:696
	}
	else if (idx == 102) {
    48005464:	fe442783          	lw	a5,-28(s0)
    48005468:	0007871b          	sext.w	a4,a5
    4800546c:	06600793          	li	a5,102
    48005470:	00f71563          	bne	a4,a5,4800547a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x8b0>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:697
		return 106;
    48005474:	06a00793          	li	a5,106
    48005478:	ac11                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:699
	}
	else if (idx == 103) {
    4800547a:	fe442783          	lw	a5,-28(s0)
    4800547e:	0007871b          	sext.w	a4,a5
    48005482:	06700793          	li	a5,103
    48005486:	00f71563          	bne	a4,a5,48005490 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x8c6>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:700
		return 107;
    4800548a:	06b00793          	li	a5,107
    4800548e:	aafd                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:702
	}
	else if (idx == 104) {
    48005490:	fe442783          	lw	a5,-28(s0)
    48005494:	0007871b          	sext.w	a4,a5
    48005498:	06800793          	li	a5,104
    4800549c:	00f71563          	bne	a4,a5,480054a6 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x8dc>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:703
		return 108;
    480054a0:	06c00793          	li	a5,108
    480054a4:	a2e5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:705
	}
	else if (idx == 105) {
    480054a6:	fe442783          	lw	a5,-28(s0)
    480054aa:	0007871b          	sext.w	a4,a5
    480054ae:	06900793          	li	a5,105
    480054b2:	00f71563          	bne	a4,a5,480054bc <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x8f2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:706
		return 109;
    480054b6:	06d00793          	li	a5,109
    480054ba:	aac9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:708
	}
	else if (idx == 106) {
    480054bc:	fe442783          	lw	a5,-28(s0)
    480054c0:	0007871b          	sext.w	a4,a5
    480054c4:	06a00793          	li	a5,106
    480054c8:	00f71563          	bne	a4,a5,480054d2 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x908>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:709
		return 110;
    480054cc:	06e00793          	li	a5,110
    480054d0:	aa75                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:711
	}
	else if (idx == 107) {
    480054d2:	fe442783          	lw	a5,-28(s0)
    480054d6:	0007871b          	sext.w	a4,a5
    480054da:	06b00793          	li	a5,107
    480054de:	00f71563          	bne	a4,a5,480054e8 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x91e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:712
		return 111;
    480054e2:	06f00793          	li	a5,111
    480054e6:	a25d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:714
	}
	else if (idx == 108) {
    480054e8:	fe442783          	lw	a5,-28(s0)
    480054ec:	0007871b          	sext.w	a4,a5
    480054f0:	06c00793          	li	a5,108
    480054f4:	00f71563          	bne	a4,a5,480054fe <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x934>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:715
		return 112;
    480054f8:	07000793          	li	a5,112
    480054fc:	aa41                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:717
	}
	else if (idx == 109) {
    480054fe:	fe442783          	lw	a5,-28(s0)
    48005502:	0007871b          	sext.w	a4,a5
    48005506:	06d00793          	li	a5,109
    4800550a:	00f71563          	bne	a4,a5,48005514 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x94a>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:718
		return 113;
    4800550e:	07100793          	li	a5,113
    48005512:	aaad                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:720
	}
	else if (idx == 110) {
    48005514:	fe442783          	lw	a5,-28(s0)
    48005518:	0007871b          	sext.w	a4,a5
    4800551c:	06e00793          	li	a5,110
    48005520:	00f71563          	bne	a4,a5,4800552a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x960>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:721
		return 114;
    48005524:	07200793          	li	a5,114
    48005528:	a295                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:723
	}
	else if (idx == 111) {
    4800552a:	fe442783          	lw	a5,-28(s0)
    4800552e:	0007871b          	sext.w	a4,a5
    48005532:	06f00793          	li	a5,111
    48005536:	00f71563          	bne	a4,a5,48005540 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x976>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:724
		return 115;
    4800553a:	07300793          	li	a5,115
    4800553e:	a2b9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:726
	}
	else if (idx == 112) {
    48005540:	fe442783          	lw	a5,-28(s0)
    48005544:	0007871b          	sext.w	a4,a5
    48005548:	07000793          	li	a5,112
    4800554c:	00f71563          	bne	a4,a5,48005556 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x98c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:727
		return 116;
    48005550:	07400793          	li	a5,116
    48005554:	aa25                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:729
	}
	else if (idx == 113) {
    48005556:	fe442783          	lw	a5,-28(s0)
    4800555a:	0007871b          	sext.w	a4,a5
    4800555e:	07100793          	li	a5,113
    48005562:	00f71563          	bne	a4,a5,4800556c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x9a2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:730
		return 117;
    48005566:	07500793          	li	a5,117
    4800556a:	a20d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:732
	}
	else if (idx == 114) {
    4800556c:	fe442783          	lw	a5,-28(s0)
    48005570:	0007871b          	sext.w	a4,a5
    48005574:	07200793          	li	a5,114
    48005578:	00f71563          	bne	a4,a5,48005582 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x9b8>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:733
		return 118;
    4800557c:	07600793          	li	a5,118
    48005580:	a231                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:735
	}
	else if (idx == 115) {
    48005582:	fe442783          	lw	a5,-28(s0)
    48005586:	0007871b          	sext.w	a4,a5
    4800558a:	07300793          	li	a5,115
    4800558e:	00f71563          	bne	a4,a5,48005598 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x9ce>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:736
		return 119;
    48005592:	07700793          	li	a5,119
    48005596:	a8dd                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:738
	}
	else if (idx == 116) {
    48005598:	fe442783          	lw	a5,-28(s0)
    4800559c:	0007871b          	sext.w	a4,a5
    480055a0:	07400793          	li	a5,116
    480055a4:	00f71563          	bne	a4,a5,480055ae <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x9e4>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:739
		return 120;
    480055a8:	07800793          	li	a5,120
    480055ac:	a0c5                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:741
	}
	else if (idx == 117) {
    480055ae:	fe442783          	lw	a5,-28(s0)
    480055b2:	0007871b          	sext.w	a4,a5
    480055b6:	07500793          	li	a5,117
    480055ba:	00f71563          	bne	a4,a5,480055c4 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0x9fa>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:742
		return 121;
    480055be:	07900793          	li	a5,121
    480055c2:	a0e9                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:744
	}
	else if (idx == 118) {
    480055c4:	fe442783          	lw	a5,-28(s0)
    480055c8:	0007871b          	sext.w	a4,a5
    480055cc:	07600793          	li	a5,118
    480055d0:	00f71563          	bne	a4,a5,480055da <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xa10>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:745
		return 122;
    480055d4:	07a00793          	li	a5,122
    480055d8:	a855                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:747
	}
	else if (idx == 119) {
    480055da:	fe442783          	lw	a5,-28(s0)
    480055de:	0007871b          	sext.w	a4,a5
    480055e2:	07700793          	li	a5,119
    480055e6:	00f71563          	bne	a4,a5,480055f0 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xa26>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:748
		return 123;
    480055ea:	07b00793          	li	a5,123
    480055ee:	a879                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:750
	}
	else if (idx == 120) {
    480055f0:	fe442783          	lw	a5,-28(s0)
    480055f4:	0007871b          	sext.w	a4,a5
    480055f8:	07800793          	li	a5,120
    480055fc:	00f71563          	bne	a4,a5,48005606 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xa3c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:751
		return 124;
    48005600:	07c00793          	li	a5,124
    48005604:	a061                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:753
	}
	else if (idx == 121) {
    48005606:	fe442783          	lw	a5,-28(s0)
    4800560a:	0007871b          	sext.w	a4,a5
    4800560e:	07900793          	li	a5,121
    48005612:	00f71563          	bne	a4,a5,4800561c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xa52>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:754
		return 125;
    48005616:	07d00793          	li	a5,125
    4800561a:	a88d                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:756
	}
	else if (idx == 122) {
    4800561c:	fe442783          	lw	a5,-28(s0)
    48005620:	0007871b          	sext.w	a4,a5
    48005624:	07a00793          	li	a5,122
    48005628:	00f71563          	bne	a4,a5,48005632 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xa68>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:757
		return 126;
    4800562c:	07e00793          	li	a5,126
    48005630:	a8b1                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:759
	}
	else if (idx == 123) {
    48005632:	fe442783          	lw	a5,-28(s0)
    48005636:	0007871b          	sext.w	a4,a5
    4800563a:	07b00793          	li	a5,123
    4800563e:	00f71563          	bne	a4,a5,48005648 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xa7e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:760
		return 127;
    48005642:	07f00793          	li	a5,127
    48005646:	a099                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:762
	}
	else if (idx == 124) {
    48005648:	fe442783          	lw	a5,-28(s0)
    4800564c:	0007871b          	sext.w	a4,a5
    48005650:	07c00793          	li	a5,124
    48005654:	00f71563          	bne	a4,a5,4800565e <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xa94>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:763
		return 128;
    48005658:	08000793          	li	a5,128
    4800565c:	a805                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:765
	}
	else if (idx == 125) {
    4800565e:	fe442783          	lw	a5,-28(s0)
    48005662:	0007871b          	sext.w	a4,a5
    48005666:	07d00793          	li	a5,125
    4800566a:	00f71563          	bne	a4,a5,48005674 <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xaaa>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:766
		return 129;
    4800566e:	08100793          	li	a5,129
    48005672:	a829                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:768
	}
	else if (idx == 126) {
    48005674:	fe442783          	lw	a5,-28(s0)
    48005678:	0007871b          	sext.w	a4,a5
    4800567c:	07e00793          	li	a5,126
    48005680:	00f71563          	bne	a4,a5,4800568a <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac0>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:769
		return 130;
    48005684:	08200793          	li	a5,130
    48005688:	a011                	j	4800568c <__metal_driver_sifive_global_external_interrupts0_interrupt_lines+0xac2>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:772
	}
	else {
		return 0;
    4800568a:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:774
	}
}
    4800568c:	853e                	mv	a0,a5
    4800568e:	6462                	ld	s0,24(sp)
    48005690:	6105                	add	sp,sp,32
    48005692:	8082                	ret

0000000048005694 <__metal_driver_sifive_global_external_interrupt_init>:
__metal_driver_sifive_global_external_interrupt_init():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:14
#include <metal/io.h>
#include <metal/machine.h>
#include <metal/shutdown.h>

void __metal_driver_sifive_global_external_interrupt_init(
    struct metal_interrupt *controller) {
    48005694:	715d                	add	sp,sp,-80
    48005696:	e486                	sd	ra,72(sp)
    48005698:	e0a2                	sd	s0,64(sp)
    4800569a:	fc26                	sd	s1,56(sp)
    4800569c:	0880                	add	s0,sp,80
    4800569e:	faa43c23          	sd	a0,-72(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:17
    struct __metal_driver_sifive_global_external_interrupts0 *global0;

    global0 = (struct __metal_driver_sifive_global_external_interrupts0
    480056a2:	fb843783          	ld	a5,-72(s0)
    480056a6:	fcf43823          	sd	a5,-48(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:19
                   *)(controller);
    if (!global0->init_done) {
    480056aa:	fd043783          	ld	a5,-48(s0)
    480056ae:	479c                	lw	a5,8(a5)
    480056b0:	ebbd                	bnez	a5,48005726 <__metal_driver_sifive_global_external_interrupt_init+0x92>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:21
        struct metal_interrupt *intc =
            __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    480056b2:	fb843503          	ld	a0,-72(s0)
    480056b6:	cbcff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    480056ba:	fca43423          	sd	a0,-56(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:24
                controller);

        if (intc) {
    480056be:	fc843783          	ld	a5,-56(s0)
    480056c2:	c3b5                	beqz	a5,48005726 <__metal_driver_sifive_global_external_interrupt_init+0x92>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:25
            intc->vtable->interrupt_init(intc);
    480056c4:	fc843783          	ld	a5,-56(s0)
    480056c8:	639c                	ld	a5,0(a5)
    480056ca:	639c                	ld	a5,0(a5)
    480056cc:	fc843503          	ld	a0,-56(s0)
    480056d0:	9782                	jalr	a5
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:28
            /* Register its interrupts with with parent controller */
            for (
                int i = 0;
    480056d2:	fc042e23          	sw	zero,-36(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:27
            for (
    480056d6:	a80d                	j	48005708 <__metal_driver_sifive_global_external_interrupt_init+0x74>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:33
                i <
                __metal_driver_sifive_global_external_interrupts0_num_interrupts(
                    controller);
                i++) {
                intc->vtable->interrupt_register(
    480056d8:	fc843783          	ld	a5,-56(s0)
    480056dc:	639c                	ld	a5,0(a5)
    480056de:	7f84                	ld	s1,56(a5)
    480056e0:	fdc42783          	lw	a5,-36(s0)
    480056e4:	85be                	mv	a1,a5
    480056e6:	fb843503          	ld	a0,-72(s0)
    480056ea:	ce0ff0ef          	jal	48004bca <__metal_driver_sifive_global_external_interrupts0_interrupt_lines>
    480056ee:	87aa                	mv	a5,a0
    480056f0:	fb843683          	ld	a3,-72(s0)
    480056f4:	4601                	li	a2,0
    480056f6:	85be                	mv	a1,a5
    480056f8:	fc843503          	ld	a0,-56(s0)
    480056fc:	9482                	jalr	s1
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:32
                i++) {
    480056fe:	fdc42783          	lw	a5,-36(s0)
    48005702:	2785                	addw	a5,a5,1
    48005704:	fcf42e23          	sw	a5,-36(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:30
                __metal_driver_sifive_global_external_interrupts0_num_interrupts(
    48005708:	fb843503          	ld	a0,-72(s0)
    4800570c:	c94ff0ef          	jal	48004ba0 <__metal_driver_sifive_global_external_interrupts0_num_interrupts>
    48005710:	87aa                	mv	a5,a0
    48005712:	873e                	mv	a4,a5
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:29
                i <
    48005714:	fdc42783          	lw	a5,-36(s0)
    48005718:	2781                	sext.w	a5,a5
    4800571a:	fae7cfe3          	blt	a5,a4,480056d8 <__metal_driver_sifive_global_external_interrupt_init+0x44>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:39
                    intc,
                    __metal_driver_sifive_global_external_interrupts0_interrupt_lines(
                        controller, i),
                    NULL, controller);
            }
            global0->init_done = 1;
    4800571e:	fd043783          	ld	a5,-48(s0)
    48005722:	4705                	li	a4,1
    48005724:	c798                	sw	a4,8(a5)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:42
        }
    }
}
    48005726:	0001                	nop
    48005728:	60a6                	ld	ra,72(sp)
    4800572a:	6406                	ld	s0,64(sp)
    4800572c:	74e2                	ld	s1,56(sp)
    4800572e:	6161                	add	sp,sp,80
    48005730:	8082                	ret

0000000048005732 <__metal_driver_sifive_global_external_interrupt_register>:
__metal_driver_sifive_global_external_interrupt_register():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:46

int __metal_driver_sifive_global_external_interrupt_register(
    struct metal_interrupt *controller, int id, metal_interrupt_handler_t isr,
    void *priv) {
    48005732:	7139                	add	sp,sp,-64
    48005734:	fc06                	sd	ra,56(sp)
    48005736:	f822                	sd	s0,48(sp)
    48005738:	0080                	add	s0,sp,64
    4800573a:	fca43c23          	sd	a0,-40(s0)
    4800573e:	87ae                	mv	a5,a1
    48005740:	fcc43423          	sd	a2,-56(s0)
    48005744:	fcd43023          	sd	a3,-64(s0)
    48005748:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:47
    int rc = -1;
    4800574c:	57fd                	li	a5,-1
    4800574e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:49

    if (id != 0) {
    48005752:	fd442783          	lw	a5,-44(s0)
    48005756:	2781                	sext.w	a5,a5
    48005758:	cb9d                	beqz	a5,4800578e <__metal_driver_sifive_global_external_interrupt_register+0x5c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:51
        struct metal_interrupt *intc =
            __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    4800575a:	fd843503          	ld	a0,-40(s0)
    4800575e:	c14ff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    48005762:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:55
                controller);

        /* Enable its interrupts with parent controller */
        if (intc) {
    48005766:	fe043783          	ld	a5,-32(s0)
    4800576a:	c395                	beqz	a5,4800578e <__metal_driver_sifive_global_external_interrupt_register+0x5c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:56
            rc = intc->vtable->interrupt_register(intc, id, isr, priv);
    4800576c:	fe043783          	ld	a5,-32(s0)
    48005770:	639c                	ld	a5,0(a5)
    48005772:	7f9c                	ld	a5,56(a5)
    48005774:	fd442703          	lw	a4,-44(s0)
    48005778:	fc043683          	ld	a3,-64(s0)
    4800577c:	fc843603          	ld	a2,-56(s0)
    48005780:	85ba                	mv	a1,a4
    48005782:	fe043503          	ld	a0,-32(s0)
    48005786:	9782                	jalr	a5
    48005788:	87aa                	mv	a5,a0
    4800578a:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:59
        }
    }
    return rc;
    4800578e:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:60
}
    48005792:	853e                	mv	a0,a5
    48005794:	70e2                	ld	ra,56(sp)
    48005796:	7442                	ld	s0,48(sp)
    48005798:	6121                	add	sp,sp,64
    4800579a:	8082                	ret

000000004800579c <__metal_driver_sifive_global_external_interrupt_enable>:
__metal_driver_sifive_global_external_interrupt_enable():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:63

int __metal_driver_sifive_global_external_interrupt_enable(
    struct metal_interrupt *controller, int id) {
    4800579c:	7179                	add	sp,sp,-48
    4800579e:	f406                	sd	ra,40(sp)
    480057a0:	f022                	sd	s0,32(sp)
    480057a2:	1800                	add	s0,sp,48
    480057a4:	fca43c23          	sd	a0,-40(s0)
    480057a8:	87ae                	mv	a5,a1
    480057aa:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:64
    int rc = -1;
    480057ae:	57fd                	li	a5,-1
    480057b0:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:66

    if (id != 0) {
    480057b4:	fd442783          	lw	a5,-44(s0)
    480057b8:	2781                	sext.w	a5,a5
    480057ba:	c79d                	beqz	a5,480057e8 <__metal_driver_sifive_global_external_interrupt_enable+0x4c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:68
        struct metal_interrupt *intc =
            __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    480057bc:	fd843503          	ld	a0,-40(s0)
    480057c0:	bb2ff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    480057c4:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:72
                controller);

        /* Enable its interrupts with parent controller */
        if (intc) {
    480057c8:	fe043783          	ld	a5,-32(s0)
    480057cc:	cf91                	beqz	a5,480057e8 <__metal_driver_sifive_global_external_interrupt_enable+0x4c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:73
            rc = intc->vtable->interrupt_enable(intc, id);
    480057ce:	fe043783          	ld	a5,-32(s0)
    480057d2:	639c                	ld	a5,0(a5)
    480057d4:	67bc                	ld	a5,72(a5)
    480057d6:	fd442703          	lw	a4,-44(s0)
    480057da:	85ba                	mv	a1,a4
    480057dc:	fe043503          	ld	a0,-32(s0)
    480057e0:	9782                	jalr	a5
    480057e2:	87aa                	mv	a5,a0
    480057e4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:76
        }
    }
    return rc;
    480057e8:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:77
}
    480057ec:	853e                	mv	a0,a5
    480057ee:	70a2                	ld	ra,40(sp)
    480057f0:	7402                	ld	s0,32(sp)
    480057f2:	6145                	add	sp,sp,48
    480057f4:	8082                	ret

00000000480057f6 <__metal_driver_sifive_global_external_interrupt_disable>:
__metal_driver_sifive_global_external_interrupt_disable():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:80

int __metal_driver_sifive_global_external_interrupt_disable(
    struct metal_interrupt *controller, int id) {
    480057f6:	7179                	add	sp,sp,-48
    480057f8:	f406                	sd	ra,40(sp)
    480057fa:	f022                	sd	s0,32(sp)
    480057fc:	1800                	add	s0,sp,48
    480057fe:	fca43c23          	sd	a0,-40(s0)
    48005802:	87ae                	mv	a5,a1
    48005804:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:81
    int rc = -1;
    48005808:	57fd                	li	a5,-1
    4800580a:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:83

    if (id != 0) {
    4800580e:	fd442783          	lw	a5,-44(s0)
    48005812:	2781                	sext.w	a5,a5
    48005814:	c79d                	beqz	a5,48005842 <__metal_driver_sifive_global_external_interrupt_disable+0x4c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:85
        struct metal_interrupt *intc =
            __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    48005816:	fd843503          	ld	a0,-40(s0)
    4800581a:	b58ff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    4800581e:	fea43023          	sd	a0,-32(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:89
                controller);

        /* Enable its interrupts with parent controller */
        if (intc) {
    48005822:	fe043783          	ld	a5,-32(s0)
    48005826:	cf91                	beqz	a5,48005842 <__metal_driver_sifive_global_external_interrupt_disable+0x4c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:90
            rc = intc->vtable->interrupt_disable(intc, id);
    48005828:	fe043783          	ld	a5,-32(s0)
    4800582c:	639c                	ld	a5,0(a5)
    4800582e:	6bbc                	ld	a5,80(a5)
    48005830:	fd442703          	lw	a4,-44(s0)
    48005834:	85ba                	mv	a1,a4
    48005836:	fe043503          	ld	a0,-32(s0)
    4800583a:	9782                	jalr	a5
    4800583c:	87aa                	mv	a5,a0
    4800583e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:93
        }
    }
    return rc;
    48005842:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:94
}
    48005846:	853e                	mv	a0,a5
    48005848:	70a2                	ld	ra,40(sp)
    4800584a:	7402                	ld	s0,32(sp)
    4800584c:	6145                	add	sp,sp,48
    4800584e:	8082                	ret

0000000048005850 <__metal_driver_sifive_global_external_interrupt_set_threshold>:
__metal_driver_sifive_global_external_interrupt_set_threshold():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:97

int __metal_driver_sifive_global_external_interrupt_set_threshold(
    struct metal_interrupt *controller, unsigned int threshold) {
    48005850:	7179                	add	sp,sp,-48
    48005852:	f406                	sd	ra,40(sp)
    48005854:	f022                	sd	s0,32(sp)
    48005856:	1800                	add	s0,sp,48
    48005858:	fca43c23          	sd	a0,-40(s0)
    4800585c:	87ae                	mv	a5,a1
    4800585e:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:99
    struct metal_interrupt *intc =
        __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    48005862:	fd843503          	ld	a0,-40(s0)
    48005866:	b0cff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    4800586a:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:101
            controller);
    if (intc) {
    4800586e:	fe843783          	ld	a5,-24(s0)
    48005872:	cf89                	beqz	a5,4800588c <__metal_driver_sifive_global_external_interrupt_set_threshold+0x3c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:102
        return intc->vtable->interrupt_set_threshold(intc, threshold);
    48005874:	fe843783          	ld	a5,-24(s0)
    48005878:	639c                	ld	a5,0(a5)
    4800587a:	7bbc                	ld	a5,112(a5)
    4800587c:	fd442703          	lw	a4,-44(s0)
    48005880:	85ba                	mv	a1,a4
    48005882:	fe843503          	ld	a0,-24(s0)
    48005886:	9782                	jalr	a5
    48005888:	87aa                	mv	a5,a0
    4800588a:	a011                	j	4800588e <__metal_driver_sifive_global_external_interrupt_set_threshold+0x3e>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:104
    }
    return -1;
    4800588c:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:105
}
    4800588e:	853e                	mv	a0,a5
    48005890:	70a2                	ld	ra,40(sp)
    48005892:	7402                	ld	s0,32(sp)
    48005894:	6145                	add	sp,sp,48
    48005896:	8082                	ret

0000000048005898 <__metal_driver_sifive_global_external_interrupt_get_threshold>:
__metal_driver_sifive_global_external_interrupt_get_threshold():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:108

unsigned int __metal_driver_sifive_global_external_interrupt_get_threshold(
    struct metal_interrupt *controller) {
    48005898:	7179                	add	sp,sp,-48
    4800589a:	f406                	sd	ra,40(sp)
    4800589c:	f022                	sd	s0,32(sp)
    4800589e:	1800                	add	s0,sp,48
    480058a0:	fca43c23          	sd	a0,-40(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:110
    struct metal_interrupt *intc =
        __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    480058a4:	fd843503          	ld	a0,-40(s0)
    480058a8:	acaff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    480058ac:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:113
            controller);

    if (intc) {
    480058b0:	fe843783          	ld	a5,-24(s0)
    480058b4:	cb99                	beqz	a5,480058ca <__metal_driver_sifive_global_external_interrupt_get_threshold+0x32>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:114
        return intc->vtable->interrupt_get_threshold(intc);
    480058b6:	fe843783          	ld	a5,-24(s0)
    480058ba:	639c                	ld	a5,0(a5)
    480058bc:	77bc                	ld	a5,104(a5)
    480058be:	fe843503          	ld	a0,-24(s0)
    480058c2:	9782                	jalr	a5
    480058c4:	87aa                	mv	a5,a0
    480058c6:	2781                	sext.w	a5,a5
    480058c8:	a011                	j	480058cc <__metal_driver_sifive_global_external_interrupt_get_threshold+0x34>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:116
    }
    return 0;
    480058ca:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:117
}
    480058cc:	853e                	mv	a0,a5
    480058ce:	70a2                	ld	ra,40(sp)
    480058d0:	7402                	ld	s0,32(sp)
    480058d2:	6145                	add	sp,sp,48
    480058d4:	8082                	ret

00000000480058d6 <__metal_driver_sifive_global_external_interrupt_set_priority>:
__metal_driver_sifive_global_external_interrupt_set_priority():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:120

int __metal_driver_sifive_global_external_interrupt_set_priority(
    struct metal_interrupt *controller, int id, unsigned int priority) {
    480058d6:	7179                	add	sp,sp,-48
    480058d8:	f406                	sd	ra,40(sp)
    480058da:	f022                	sd	s0,32(sp)
    480058dc:	1800                	add	s0,sp,48
    480058de:	fca43c23          	sd	a0,-40(s0)
    480058e2:	87ae                	mv	a5,a1
    480058e4:	8732                	mv	a4,a2
    480058e6:	fcf42a23          	sw	a5,-44(s0)
    480058ea:	87ba                	mv	a5,a4
    480058ec:	fcf42823          	sw	a5,-48(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:122
    struct metal_interrupt *intc =
        __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    480058f0:	fd843503          	ld	a0,-40(s0)
    480058f4:	a7eff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    480058f8:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:124
            controller);
    if (intc) {
    480058fc:	fe843783          	ld	a5,-24(s0)
    48005900:	c385                	beqz	a5,48005920 <__metal_driver_sifive_global_external_interrupt_set_priority+0x4a>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:125
        return intc->vtable->interrupt_set_priority(intc, id, priority);
    48005902:	fe843783          	ld	a5,-24(s0)
    48005906:	639c                	ld	a5,0(a5)
    48005908:	63dc                	ld	a5,128(a5)
    4800590a:	fd042683          	lw	a3,-48(s0)
    4800590e:	fd442703          	lw	a4,-44(s0)
    48005912:	8636                	mv	a2,a3
    48005914:	85ba                	mv	a1,a4
    48005916:	fe843503          	ld	a0,-24(s0)
    4800591a:	9782                	jalr	a5
    4800591c:	87aa                	mv	a5,a0
    4800591e:	a011                	j	48005922 <__metal_driver_sifive_global_external_interrupt_set_priority+0x4c>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:127
    }
    return -1;
    48005920:	57fd                	li	a5,-1
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:128
}
    48005922:	853e                	mv	a0,a5
    48005924:	70a2                	ld	ra,40(sp)
    48005926:	7402                	ld	s0,32(sp)
    48005928:	6145                	add	sp,sp,48
    4800592a:	8082                	ret

000000004800592c <__metal_driver_sifive_global_external_interrupt_get_priority>:
__metal_driver_sifive_global_external_interrupt_get_priority():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:131

unsigned int __metal_driver_sifive_global_external_interrupt_get_priority(
    struct metal_interrupt *controller, int id) {
    4800592c:	7179                	add	sp,sp,-48
    4800592e:	f406                	sd	ra,40(sp)
    48005930:	f022                	sd	s0,32(sp)
    48005932:	1800                	add	s0,sp,48
    48005934:	fca43c23          	sd	a0,-40(s0)
    48005938:	87ae                	mv	a5,a1
    4800593a:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:133
    struct metal_interrupt *intc =
        __metal_driver_sifive_global_external_interrupts0_interrupt_parent(
    4800593e:	fd843503          	ld	a0,-40(s0)
    48005942:	a30ff0ef          	jal	48004b72 <__metal_driver_sifive_global_external_interrupts0_interrupt_parent>
    48005946:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:136
            controller);

    if (intc) {
    4800594a:	fe843783          	ld	a5,-24(s0)
    4800594e:	cf91                	beqz	a5,4800596a <__metal_driver_sifive_global_external_interrupt_get_priority+0x3e>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:137
        return intc->vtable->interrupt_get_priority(intc, id);
    48005950:	fe843783          	ld	a5,-24(s0)
    48005954:	639c                	ld	a5,0(a5)
    48005956:	7fbc                	ld	a5,120(a5)
    48005958:	fd442703          	lw	a4,-44(s0)
    4800595c:	85ba                	mv	a1,a4
    4800595e:	fe843503          	ld	a0,-24(s0)
    48005962:	9782                	jalr	a5
    48005964:	87aa                	mv	a5,a0
    48005966:	2781                	sext.w	a5,a5
    48005968:	a011                	j	4800596c <__metal_driver_sifive_global_external_interrupt_get_priority+0x40>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:139
    }
    return 0;
    4800596a:	4781                	li	a5,0
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:140
}
    4800596c:	853e                	mv	a0,a5
    4800596e:	70a2                	ld	ra,40(sp)
    48005970:	7402                	ld	s0,32(sp)
    48005972:	6145                	add	sp,sp,48
    48005974:	8082                	ret

0000000048005976 <__metal_driver_sifive_global_external_command_request>:
__metal_driver_sifive_global_external_command_request():
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:143

int __metal_driver_sifive_global_external_command_request(
    struct metal_interrupt *controller, int command, void *data) {
    48005976:	7139                	add	sp,sp,-64
    48005978:	fc06                	sd	ra,56(sp)
    4800597a:	f822                	sd	s0,48(sp)
    4800597c:	0080                	add	s0,sp,64
    4800597e:	fca43c23          	sd	a0,-40(s0)
    48005982:	87ae                	mv	a5,a1
    48005984:	fcc43423          	sd	a2,-56(s0)
    48005988:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:145
    int idx;
    int rc = -1;
    4800598c:	57fd                	li	a5,-1
    4800598e:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:147

    switch (command) {
    48005992:	fd442783          	lw	a5,-44(s0)
    48005996:	0007871b          	sext.w	a4,a5
    4800599a:	4795                	li	a5,5
    4800599c:	00f70a63          	beq	a4,a5,480059b0 <__metal_driver_sifive_global_external_command_request+0x3a>
    480059a0:	fd442783          	lw	a5,-44(s0)
    480059a4:	0007871b          	sext.w	a4,a5
    480059a8:	4799                	li	a5,6
    480059aa:	00f70b63          	beq	a4,a5,480059c0 <__metal_driver_sifive_global_external_command_request+0x4a>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:162
                __metal_driver_sifive_global_external_interrupts0_interrupt_lines(
                    controller, idx);
        }
        break;
    default:
        break;
    480059ae:	a835                	j	480059ea <__metal_driver_sifive_global_external_command_request+0x74>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:149
        rc = __metal_driver_sifive_global_external_interrupts0_num_interrupts(
    480059b0:	fd843503          	ld	a0,-40(s0)
    480059b4:	9ecff0ef          	jal	48004ba0 <__metal_driver_sifive_global_external_interrupts0_num_interrupts>
    480059b8:	87aa                	mv	a5,a0
    480059ba:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:151
        break;
    480059be:	a035                	j	480059ea <__metal_driver_sifive_global_external_command_request+0x74>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:153
        rc = 0;
    480059c0:	fe042623          	sw	zero,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:154
        if (data) {
    480059c4:	fc843783          	ld	a5,-56(s0)
    480059c8:	c385                	beqz	a5,480059e8 <__metal_driver_sifive_global_external_command_request+0x72>
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:155
            idx = *(int *)data;
    480059ca:	fc843783          	ld	a5,-56(s0)
    480059ce:	439c                	lw	a5,0(a5)
    480059d0:	fef42423          	sw	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:157
                __metal_driver_sifive_global_external_interrupts0_interrupt_lines(
    480059d4:	fe842783          	lw	a5,-24(s0)
    480059d8:	85be                	mv	a1,a5
    480059da:	fd843503          	ld	a0,-40(s0)
    480059de:	9ecff0ef          	jal	48004bca <__metal_driver_sifive_global_external_interrupts0_interrupt_lines>
    480059e2:	87aa                	mv	a5,a0
    480059e4:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:160
        break;
    480059e8:	0001                	nop
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:165
    }

    return rc;
    480059ea:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/drivers/sifive_global-external-interrupts0.c:166
}
    480059ee:	853e                	mv	a0,a5
    480059f0:	70e2                	ld	ra,56(sp)
    480059f2:	7442                	ld	s0,48(sp)
    480059f4:	6121                	add	sp,sp,64
    480059f6:	8082                	ret

00000000480059f8 <__metal_driver_sifive_scr1_base>:
__metal_driver_sifive_scr1_base():
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:780



/* --------------------- sifive_scr1 ------------ */
static __inline__ unsigned long __metal_driver_sifive_scr1_base(const struct __metal_shutdown *sd)
{
    480059f8:	1101                	add	sp,sp,-32
    480059fa:	ec22                	sd	s0,24(sp)
    480059fc:	1000                	add	s0,sp,32
    480059fe:	fea43423          	sd	a0,-24(s0)
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:781
	if ((uintptr_t)sd == (uintptr_t)&__metal_dt_soc_scr_3fffb000) {
    48005a02:	fe843703          	ld	a4,-24(s0)
    48005a06:	e3018793          	add	a5,gp,-464 # 80000fe0 <__metal_dt_soc_scr_3fffb000>
    48005a0a:	00f71563          	bne	a4,a5,48005a14 <__metal_driver_sifive_scr1_base+0x1c>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:782
		return METAL_SIFIVE_SCR1_3FFFB000_BASE_ADDRESS;
    48005a0e:	3fffb7b7          	lui	a5,0x3fffb
    48005a12:	a011                	j	48005a16 <__metal_driver_sifive_scr1_base+0x1e>
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:785
	}
	else {
		return 0;
    48005a14:	4781                	li	a5,0
/nfs/datahdd/users/miguel.guerrero/work/sil-proj-omni/soc-ip-crmla/design/crmla1_cat/sw/freedom-metal/./metal/machine.h:787
	}
}
    48005a16:	853e                	mv	a0,a5
    48005a18:	6462                	ld	s0,24(sp)
    48005a1a:	6105                	add	sp,sp,32
    48005a1c:	8082                	ret

0000000048005a1e <__metal_driver_sifive_scr1_exit>:
__metal_driver_sifive_scr1_exit():
validation-software/freedom-metal/src/drivers/sifive_scr1.c:18
#include <metal/io.h>

void __metal_driver_sifive_scr1_exit(const struct __metal_shutdown *sd,
                                      int code) __attribute__((noreturn));
void __metal_driver_sifive_scr1_exit(const struct __metal_shutdown *sd,
                                      int code) {
    48005a1e:	7179                	add	sp,sp,-48
    48005a20:	f406                	sd	ra,40(sp)
    48005a22:	f022                	sd	s0,32(sp)
    48005a24:	1800                	add	s0,sp,48
    48005a26:	fca43c23          	sd	a0,-40(s0)
    48005a2a:	87ae                	mv	a5,a1
    48005a2c:	fcf42a23          	sw	a5,-44(s0)
validation-software/freedom-metal/src/drivers/sifive_scr1.c:19
    long base = __metal_driver_sifive_scr1_base(sd);
    48005a30:	fd843503          	ld	a0,-40(s0)
    48005a34:	fc5ff0ef          	jal	480059f8 <__metal_driver_sifive_scr1_base>
    48005a38:	87aa                	mv	a5,a0
    48005a3a:	fef43423          	sd	a5,-24(s0)
validation-software/freedom-metal/src/drivers/sifive_scr1.c:20
    uint32_t out = (code << 16) + (code == 0 ? 0x5555 : 0x3333);
    48005a3e:	fd442783          	lw	a5,-44(s0)
    48005a42:	0107979b          	sllw	a5,a5,0x10
    48005a46:	0007871b          	sext.w	a4,a5
    48005a4a:	fd442783          	lw	a5,-44(s0)
    48005a4e:	2781                	sext.w	a5,a5
    48005a50:	e789                	bnez	a5,48005a5a <__metal_driver_sifive_scr1_exit+0x3c>
validation-software/freedom-metal/src/drivers/sifive_scr1.c:20 (discriminator 1)
    48005a52:	6795                	lui	a5,0x5
    48005a54:	55578793          	add	a5,a5,1365 # 5555 <__heap_size+0x4d55>
    48005a58:	a021                	j	48005a60 <__metal_driver_sifive_scr1_exit+0x42>
validation-software/freedom-metal/src/drivers/sifive_scr1.c:20 (discriminator 2)
    48005a5a:	678d                	lui	a5,0x3
    48005a5c:	33378793          	add	a5,a5,819 # 3333 <__heap_size+0x2b33>
validation-software/freedom-metal/src/drivers/sifive_scr1.c:20 (discriminator 4)
    48005a60:	9fb9                	addw	a5,a5,a4
    48005a62:	2781                	sext.w	a5,a5
    48005a64:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/src/drivers/sifive_scr1.c:22 (discriminator 1)
    while (1) {
        __METAL_ACCESS_ONCE((
    48005a68:	fe843783          	ld	a5,-24(s0)
    48005a6c:	07a1                	add	a5,a5,8
    48005a6e:	873e                	mv	a4,a5
validation-software/freedom-metal/src/drivers/sifive_scr1.c:23 (discriminator 1)
            __metal_io_u32 *)(base + METAL_SIFIVE_SCR1_TEST_STATUS_OFFSET)) = out;
    48005a70:	fe442783          	lw	a5,-28(s0)
    48005a74:	c31c                	sw	a5,0(a4)
    48005a76:	bfcd                	j	48005a68 <__metal_driver_sifive_scr1_exit+0x4a>

0000000048005a78 <metal_cpu_get_timer>:
metal_cpu_get_timer():
validation-software/freedom-metal/metal/cpu.h:84
 * Get the value of the cycle count timer for a given CPU
 *
 * @param cpu The CPU device handle
 * @return The value of the CPU cycle count timer
 */
__inline__ unsigned long long metal_cpu_get_timer(struct metal_cpu *cpu) {
    48005a78:	1101                	add	sp,sp,-32
    48005a7a:	ec06                	sd	ra,24(sp)
    48005a7c:	e822                	sd	s0,16(sp)
    48005a7e:	1000                	add	s0,sp,32
    48005a80:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:85
    return cpu->vtable->mcycle_get(cpu);
    48005a84:	fe843783          	ld	a5,-24(s0)
    48005a88:	639c                	ld	a5,0(a5)
    48005a8a:	639c                	ld	a5,0(a5)
    48005a8c:	fe843503          	ld	a0,-24(s0)
    48005a90:	9782                	jalr	a5
    48005a92:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:86
}
    48005a94:	853e                	mv	a0,a5
    48005a96:	60e2                	ld	ra,24(sp)
    48005a98:	6442                	ld	s0,16(sp)
    48005a9a:	6105                	add	sp,sp,32
    48005a9c:	8082                	ret

0000000048005a9e <metal_cpu_get_mcycle_timebase>:
metal_cpu_get_mcycle_timebase():
validation-software/freedom-metal/metal/cpu.h:95
 * Get the value of the timebase of the cycle count timer
 *
 * @param cpu The CPU device handle
 * @return The value of the cycle count timer timebase
 */
__inline__ unsigned long long metal_cpu_get_mcycle_timebase(struct metal_cpu *cpu) {
    48005a9e:	1101                	add	sp,sp,-32
    48005aa0:	ec06                	sd	ra,24(sp)
    48005aa2:	e822                	sd	s0,16(sp)
    48005aa4:	1000                	add	s0,sp,32
    48005aa6:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:96
    return cpu->vtable->mcycle_timebase_get(cpu);
    48005aaa:	fe843783          	ld	a5,-24(s0)
    48005aae:	639c                	ld	a5,0(a5)
    48005ab0:	679c                	ld	a5,8(a5)
    48005ab2:	fe843503          	ld	a0,-24(s0)
    48005ab6:	9782                	jalr	a5
    48005ab8:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:97
}
    48005aba:	853e                	mv	a0,a5
    48005abc:	60e2                	ld	ra,24(sp)
    48005abe:	6442                	ld	s0,16(sp)
    48005ac0:	6105                	add	sp,sp,32
    48005ac2:	8082                	ret

0000000048005ac4 <metal_cpu_get_mtime>:
metal_cpu_get_mtime():
validation-software/freedom-metal/metal/cpu.h:108
 * will be 0.
 *
 * @param cpu The CPU device handle
 * @return The value of mtime, or 0 if failure
 */
__inline__ unsigned long long metal_cpu_get_mtime(struct metal_cpu *cpu) {
    48005ac4:	1101                	add	sp,sp,-32
    48005ac6:	ec06                	sd	ra,24(sp)
    48005ac8:	e822                	sd	s0,16(sp)
    48005aca:	1000                	add	s0,sp,32
    48005acc:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:109
    return cpu->vtable->mtime_get(cpu);
    48005ad0:	fe843783          	ld	a5,-24(s0)
    48005ad4:	639c                	ld	a5,0(a5)
    48005ad6:	6b9c                	ld	a5,16(a5)
    48005ad8:	fe843503          	ld	a0,-24(s0)
    48005adc:	9782                	jalr	a5
    48005ade:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:110
}
    48005ae0:	853e                	mv	a0,a5
    48005ae2:	60e2                	ld	ra,24(sp)
    48005ae4:	6442                	ld	s0,16(sp)
    48005ae6:	6105                	add	sp,sp,32
    48005ae8:	8082                	ret

0000000048005aea <metal_cpu_get_mtime_timebase>:
metal_cpu_get_mtime_timebase():
validation-software/freedom-metal/metal/cpu.h:119
 * Get the value of the timebase of the cycle count timer
 *
 * @param cpu The CPU device handle
 * @return The value of the cycle count timer timebase
 */
__inline__ unsigned long long metal_cpu_get_mtime_timebase(struct metal_cpu *cpu) {
    48005aea:	1101                	add	sp,sp,-32
    48005aec:	ec06                	sd	ra,24(sp)
    48005aee:	e822                	sd	s0,16(sp)
    48005af0:	1000                	add	s0,sp,32
    48005af2:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:120
    return cpu->vtable->mtime_timebase_get(cpu);
    48005af6:	fe843783          	ld	a5,-24(s0)
    48005afa:	639c                	ld	a5,0(a5)
    48005afc:	6f9c                	ld	a5,24(a5)
    48005afe:	fe843503          	ld	a0,-24(s0)
    48005b02:	9782                	jalr	a5
    48005b04:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:121
}
    48005b06:	853e                	mv	a0,a5
    48005b08:	60e2                	ld	ra,24(sp)
    48005b0a:	6442                	ld	s0,16(sp)
    48005b0c:	6105                	add	sp,sp,32
    48005b0e:	8082                	ret

0000000048005b10 <metal_cpu_set_mtimecmp>:
metal_cpu_set_mtimecmp():
validation-software/freedom-metal/metal/cpu.h:135
 * @param cpu The CPU device handle
 * @param time The value to set the compare register to
 * @return The value of mtimecmp or -1 if error
 */
__inline__ int metal_cpu_set_mtimecmp(struct metal_cpu *cpu,
                                      unsigned long long time) {
    48005b10:	1101                	add	sp,sp,-32
    48005b12:	ec06                	sd	ra,24(sp)
    48005b14:	e822                	sd	s0,16(sp)
    48005b16:	1000                	add	s0,sp,32
    48005b18:	fea43423          	sd	a0,-24(s0)
    48005b1c:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/metal/cpu.h:136
    return cpu->vtable->mtimecmp_set(cpu, time);
    48005b20:	fe843783          	ld	a5,-24(s0)
    48005b24:	639c                	ld	a5,0(a5)
    48005b26:	739c                	ld	a5,32(a5)
    48005b28:	fe043583          	ld	a1,-32(s0)
    48005b2c:	fe843503          	ld	a0,-24(s0)
    48005b30:	9782                	jalr	a5
    48005b32:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:137
}
    48005b34:	853e                	mv	a0,a5
    48005b36:	60e2                	ld	ra,24(sp)
    48005b38:	6442                	ld	s0,16(sp)
    48005b3a:	6105                	add	sp,sp,32
    48005b3c:	8082                	ret

0000000048005b3e <metal_cpu_timer_interrupt_controller>:
metal_cpu_timer_interrupt_controller():
validation-software/freedom-metal/metal/cpu.h:149
 *
 * @param cpu The CPU device handle
 * @return A pointer to the timer interrupt handle
 */
__inline__ struct metal_interrupt *
metal_cpu_timer_interrupt_controller(struct metal_cpu *cpu) {
    48005b3e:	1101                	add	sp,sp,-32
    48005b40:	ec06                	sd	ra,24(sp)
    48005b42:	e822                	sd	s0,16(sp)
    48005b44:	1000                	add	s0,sp,32
    48005b46:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:150
    return cpu->vtable->tmr_controller_interrupt(cpu);
    48005b4a:	fe843783          	ld	a5,-24(s0)
    48005b4e:	639c                	ld	a5,0(a5)
    48005b50:	779c                	ld	a5,40(a5)
    48005b52:	fe843503          	ld	a0,-24(s0)
    48005b56:	9782                	jalr	a5
    48005b58:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:151
}
    48005b5a:	853e                	mv	a0,a5
    48005b5c:	60e2                	ld	ra,24(sp)
    48005b5e:	6442                	ld	s0,16(sp)
    48005b60:	6105                	add	sp,sp,32
    48005b62:	8082                	ret

0000000048005b64 <metal_cpu_timer_get_interrupt_id>:
metal_cpu_timer_get_interrupt_id():
validation-software/freedom-metal/metal/cpu.h:160
 * Get the interrupt ID of the real-time clock interrupt
 *
 * @param cpu The CPU device handle
 * @return The timer interrupt ID
 */
__inline__ int metal_cpu_timer_get_interrupt_id(struct metal_cpu *cpu) {
    48005b64:	1101                	add	sp,sp,-32
    48005b66:	ec06                	sd	ra,24(sp)
    48005b68:	e822                	sd	s0,16(sp)
    48005b6a:	1000                	add	s0,sp,32
    48005b6c:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:161
    return cpu->vtable->get_tmr_interrupt_id(cpu);
    48005b70:	fe843783          	ld	a5,-24(s0)
    48005b74:	639c                	ld	a5,0(a5)
    48005b76:	7b9c                	ld	a5,48(a5)
    48005b78:	fe843503          	ld	a0,-24(s0)
    48005b7c:	9782                	jalr	a5
    48005b7e:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:162
}
    48005b80:	853e                	mv	a0,a5
    48005b82:	60e2                	ld	ra,24(sp)
    48005b84:	6442                	ld	s0,16(sp)
    48005b86:	6105                	add	sp,sp,32
    48005b88:	8082                	ret

0000000048005b8a <metal_cpu_software_interrupt_controller>:
metal_cpu_software_interrupt_controller():
validation-software/freedom-metal/metal/cpu.h:174
 *
 * @param cpu The CPU device handle
 * @return A pointer to the software interrupt handle
 */
__inline__ struct metal_interrupt *
metal_cpu_software_interrupt_controller(struct metal_cpu *cpu) {
    48005b8a:	1101                	add	sp,sp,-32
    48005b8c:	ec06                	sd	ra,24(sp)
    48005b8e:	e822                	sd	s0,16(sp)
    48005b90:	1000                	add	s0,sp,32
    48005b92:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:175
    return cpu->vtable->sw_controller_interrupt(cpu);
    48005b96:	fe843783          	ld	a5,-24(s0)
    48005b9a:	639c                	ld	a5,0(a5)
    48005b9c:	7f9c                	ld	a5,56(a5)
    48005b9e:	fe843503          	ld	a0,-24(s0)
    48005ba2:	9782                	jalr	a5
    48005ba4:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:176
}
    48005ba6:	853e                	mv	a0,a5
    48005ba8:	60e2                	ld	ra,24(sp)
    48005baa:	6442                	ld	s0,16(sp)
    48005bac:	6105                	add	sp,sp,32
    48005bae:	8082                	ret

0000000048005bb0 <metal_cpu_software_get_interrupt_id>:
metal_cpu_software_get_interrupt_id():
validation-software/freedom-metal/metal/cpu.h:185
 * Get the interrupt ID for the software/inter-process interrupt
 *
 * @param cpu The CPU device handle
 * @return the software interrupt ID
 */
__inline__ int metal_cpu_software_get_interrupt_id(struct metal_cpu *cpu) {
    48005bb0:	1101                	add	sp,sp,-32
    48005bb2:	ec06                	sd	ra,24(sp)
    48005bb4:	e822                	sd	s0,16(sp)
    48005bb6:	1000                	add	s0,sp,32
    48005bb8:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:186
    return cpu->vtable->get_sw_interrupt_id(cpu);
    48005bbc:	fe843783          	ld	a5,-24(s0)
    48005bc0:	639c                	ld	a5,0(a5)
    48005bc2:	63bc                	ld	a5,64(a5)
    48005bc4:	fe843503          	ld	a0,-24(s0)
    48005bc8:	9782                	jalr	a5
    48005bca:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:187
}
    48005bcc:	853e                	mv	a0,a5
    48005bce:	60e2                	ld	ra,24(sp)
    48005bd0:	6442                	ld	s0,16(sp)
    48005bd2:	6105                	add	sp,sp,32
    48005bd4:	8082                	ret

0000000048005bd6 <metal_cpu_software_set_ipi>:
metal_cpu_software_set_ipi():
validation-software/freedom-metal/metal/cpu.h:200
 *
 * @param cpu The CPU device handle
 * @param hartid The CPU hart ID to be interrupted
 * @return 0 upon success
 */
__inline__ int metal_cpu_software_set_ipi(struct metal_cpu *cpu, int hartid) {
    48005bd6:	1101                	add	sp,sp,-32
    48005bd8:	ec06                	sd	ra,24(sp)
    48005bda:	e822                	sd	s0,16(sp)
    48005bdc:	1000                	add	s0,sp,32
    48005bde:	fea43423          	sd	a0,-24(s0)
    48005be2:	87ae                	mv	a5,a1
    48005be4:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/cpu.h:201
    return cpu->vtable->set_sw_ipi(cpu, hartid);
    48005be8:	fe843783          	ld	a5,-24(s0)
    48005bec:	639c                	ld	a5,0(a5)
    48005bee:	67bc                	ld	a5,72(a5)
    48005bf0:	fe442703          	lw	a4,-28(s0)
    48005bf4:	85ba                	mv	a1,a4
    48005bf6:	fe843503          	ld	a0,-24(s0)
    48005bfa:	9782                	jalr	a5
    48005bfc:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:202
}
    48005bfe:	853e                	mv	a0,a5
    48005c00:	60e2                	ld	ra,24(sp)
    48005c02:	6442                	ld	s0,16(sp)
    48005c04:	6105                	add	sp,sp,32
    48005c06:	8082                	ret

0000000048005c08 <metal_cpu_software_clear_ipi>:
metal_cpu_software_clear_ipi():
validation-software/freedom-metal/metal/cpu.h:215
 *
 * @param cpu The CPU device handle
 * @param hartid The CPU hart ID to clear
 * @return 0 upon success
 */
__inline__ int metal_cpu_software_clear_ipi(struct metal_cpu *cpu, int hartid) {
    48005c08:	1101                	add	sp,sp,-32
    48005c0a:	ec06                	sd	ra,24(sp)
    48005c0c:	e822                	sd	s0,16(sp)
    48005c0e:	1000                	add	s0,sp,32
    48005c10:	fea43423          	sd	a0,-24(s0)
    48005c14:	87ae                	mv	a5,a1
    48005c16:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/cpu.h:216
    return cpu->vtable->clear_sw_ipi(cpu, hartid);
    48005c1a:	fe843783          	ld	a5,-24(s0)
    48005c1e:	639c                	ld	a5,0(a5)
    48005c20:	6bbc                	ld	a5,80(a5)
    48005c22:	fe442703          	lw	a4,-28(s0)
    48005c26:	85ba                	mv	a1,a4
    48005c28:	fe843503          	ld	a0,-24(s0)
    48005c2c:	9782                	jalr	a5
    48005c2e:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:217
}
    48005c30:	853e                	mv	a0,a5
    48005c32:	60e2                	ld	ra,24(sp)
    48005c34:	6442                	ld	s0,16(sp)
    48005c36:	6105                	add	sp,sp,32
    48005c38:	8082                	ret

0000000048005c3a <metal_cpu_get_msip>:
metal_cpu_get_msip():
validation-software/freedom-metal/metal/cpu.h:231
 *
 * @param cpu the CPU device handle
 * @param hartid The CPU hart to read
 * @return 0 upon success
 */
__inline__ int metal_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
    48005c3a:	1101                	add	sp,sp,-32
    48005c3c:	ec06                	sd	ra,24(sp)
    48005c3e:	e822                	sd	s0,16(sp)
    48005c40:	1000                	add	s0,sp,32
    48005c42:	fea43423          	sd	a0,-24(s0)
    48005c46:	87ae                	mv	a5,a1
    48005c48:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/cpu.h:232
    return cpu->vtable->get_msip(cpu, hartid);
    48005c4c:	fe843783          	ld	a5,-24(s0)
    48005c50:	639c                	ld	a5,0(a5)
    48005c52:	6fbc                	ld	a5,88(a5)
    48005c54:	fe442703          	lw	a4,-28(s0)
    48005c58:	85ba                	mv	a1,a4
    48005c5a:	fe843503          	ld	a0,-24(s0)
    48005c5e:	9782                	jalr	a5
    48005c60:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:233
}
    48005c62:	853e                	mv	a0,a5
    48005c64:	60e2                	ld	ra,24(sp)
    48005c66:	6442                	ld	s0,16(sp)
    48005c68:	6105                	add	sp,sp,32
    48005c6a:	8082                	ret

0000000048005c6c <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
validation-software/freedom-metal/metal/cpu.h:247
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt *
metal_cpu_interrupt_controller(struct metal_cpu *cpu) {
    48005c6c:	1101                	add	sp,sp,-32
    48005c6e:	ec06                	sd	ra,24(sp)
    48005c70:	e822                	sd	s0,16(sp)
    48005c72:	1000                	add	s0,sp,32
    48005c74:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:248
    return cpu->vtable->controller_interrupt(cpu);
    48005c78:	fe843783          	ld	a5,-24(s0)
    48005c7c:	639c                	ld	a5,0(a5)
    48005c7e:	73bc                	ld	a5,96(a5)
    48005c80:	fe843503          	ld	a0,-24(s0)
    48005c84:	9782                	jalr	a5
    48005c86:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:249
}
    48005c88:	853e                	mv	a0,a5
    48005c8a:	60e2                	ld	ra,24(sp)
    48005c8c:	6442                	ld	s0,16(sp)
    48005c8e:	6105                	add	sp,sp,32
    48005c90:	8082                	ret

0000000048005c92 <metal_cpu_exception_register>:
metal_cpu_exception_register():
validation-software/freedom-metal/metal/cpu.h:263
 * @param ecode The exception code to register a handler for
 * @param handler Callback function for the exception handler
 * @return 0 upon success
 */
__inline__ int metal_cpu_exception_register(struct metal_cpu *cpu, int ecode,
                                            metal_exception_handler_t handler) {
    48005c92:	7179                	add	sp,sp,-48
    48005c94:	f406                	sd	ra,40(sp)
    48005c96:	f022                	sd	s0,32(sp)
    48005c98:	1800                	add	s0,sp,48
    48005c9a:	fea43423          	sd	a0,-24(s0)
    48005c9e:	87ae                	mv	a5,a1
    48005ca0:	fcc43c23          	sd	a2,-40(s0)
    48005ca4:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/cpu.h:264
    return cpu->vtable->exception_register(cpu, ecode, handler);
    48005ca8:	fe843783          	ld	a5,-24(s0)
    48005cac:	639c                	ld	a5,0(a5)
    48005cae:	77bc                	ld	a5,104(a5)
    48005cb0:	fe442703          	lw	a4,-28(s0)
    48005cb4:	fd843603          	ld	a2,-40(s0)
    48005cb8:	85ba                	mv	a1,a4
    48005cba:	fe843503          	ld	a0,-24(s0)
    48005cbe:	9782                	jalr	a5
    48005cc0:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:265
}
    48005cc2:	853e                	mv	a0,a5
    48005cc4:	70a2                	ld	ra,40(sp)
    48005cc6:	7402                	ld	s0,32(sp)
    48005cc8:	6145                	add	sp,sp,48
    48005cca:	8082                	ret

0000000048005ccc <metal_cpu_get_instruction_length>:
metal_cpu_get_instruction_length():
validation-software/freedom-metal/metal/cpu.h:284
 * @param cpu The CPU device handle
 * @param epc The address of the instruction to measure
 * @return the length of the instruction in bytes
 */
__inline__ int metal_cpu_get_instruction_length(struct metal_cpu *cpu,
                                                uintptr_t epc) {
    48005ccc:	1101                	add	sp,sp,-32
    48005cce:	ec06                	sd	ra,24(sp)
    48005cd0:	e822                	sd	s0,16(sp)
    48005cd2:	1000                	add	s0,sp,32
    48005cd4:	fea43423          	sd	a0,-24(s0)
    48005cd8:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/metal/cpu.h:285
    return cpu->vtable->get_ilen(cpu, epc);
    48005cdc:	fe843783          	ld	a5,-24(s0)
    48005ce0:	639c                	ld	a5,0(a5)
    48005ce2:	7bbc                	ld	a5,112(a5)
    48005ce4:	fe043583          	ld	a1,-32(s0)
    48005ce8:	fe843503          	ld	a0,-24(s0)
    48005cec:	9782                	jalr	a5
    48005cee:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:286
}
    48005cf0:	853e                	mv	a0,a5
    48005cf2:	60e2                	ld	ra,24(sp)
    48005cf4:	6442                	ld	s0,16(sp)
    48005cf6:	6105                	add	sp,sp,32
    48005cf8:	8082                	ret

0000000048005cfa <metal_cpu_get_exception_pc>:
metal_cpu_get_exception_pc():
validation-software/freedom-metal/metal/cpu.h:297
 * undefined outside of an exception handler.
 *
 * @param cpu The CPU device handle
 * @return The value of the program counter at the time of the exception
 */
__inline__ uintptr_t metal_cpu_get_exception_pc(struct metal_cpu *cpu) {
    48005cfa:	1101                	add	sp,sp,-32
    48005cfc:	ec06                	sd	ra,24(sp)
    48005cfe:	e822                	sd	s0,16(sp)
    48005d00:	1000                	add	s0,sp,32
    48005d02:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:298
    return cpu->vtable->get_epc(cpu);
    48005d06:	fe843783          	ld	a5,-24(s0)
    48005d0a:	639c                	ld	a5,0(a5)
    48005d0c:	7fbc                	ld	a5,120(a5)
    48005d0e:	fe843503          	ld	a0,-24(s0)
    48005d12:	9782                	jalr	a5
    48005d14:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:299
}
    48005d16:	853e                	mv	a0,a5
    48005d18:	60e2                	ld	ra,24(sp)
    48005d1a:	6442                	ld	s0,16(sp)
    48005d1c:	6105                	add	sp,sp,32
    48005d1e:	8082                	ret

0000000048005d20 <metal_cpu_set_exception_pc>:
metal_cpu_set_exception_pc():
validation-software/freedom-metal/metal/cpu.h:315
 * @param cpu the CPU device handle
 * @param epc The address to set the exception program counter to
 * @return 0 upon success
 */
__inline__ int metal_cpu_set_exception_pc(struct metal_cpu *cpu,
                                          uintptr_t epc) {
    48005d20:	1101                	add	sp,sp,-32
    48005d22:	ec06                	sd	ra,24(sp)
    48005d24:	e822                	sd	s0,16(sp)
    48005d26:	1000                	add	s0,sp,32
    48005d28:	fea43423          	sd	a0,-24(s0)
    48005d2c:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/metal/cpu.h:316
    return cpu->vtable->set_epc(cpu, epc);
    48005d30:	fe843783          	ld	a5,-24(s0)
    48005d34:	639c                	ld	a5,0(a5)
    48005d36:	63dc                	ld	a5,128(a5)
    48005d38:	fe043583          	ld	a1,-32(s0)
    48005d3c:	fe843503          	ld	a0,-24(s0)
    48005d40:	9782                	jalr	a5
    48005d42:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:317
}
    48005d44:	853e                	mv	a0,a5
    48005d46:	60e2                	ld	ra,24(sp)
    48005d48:	6442                	ld	s0,16(sp)
    48005d4a:	6105                	add	sp,sp,32
    48005d4c:	8082                	ret

0000000048005d4e <metal_cpu_get_buserror>:
metal_cpu_get_buserror():
validation-software/freedom-metal/metal/cpu.h:326
 *
 * @param cpu The CPU device handle
 * @return A pointer to the bus error unit handle
 */
__inline__ struct metal_buserror *
metal_cpu_get_buserror(struct metal_cpu *cpu) {
    48005d4e:	1101                	add	sp,sp,-32
    48005d50:	ec06                	sd	ra,24(sp)
    48005d52:	e822                	sd	s0,16(sp)
    48005d54:	1000                	add	s0,sp,32
    48005d56:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:327
    return cpu->vtable->get_buserror(cpu);
    48005d5a:	fe843783          	ld	a5,-24(s0)
    48005d5e:	639c                	ld	a5,0(a5)
    48005d60:	67dc                	ld	a5,136(a5)
    48005d62:	fe843503          	ld	a0,-24(s0)
    48005d66:	9782                	jalr	a5
    48005d68:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:328
}
    48005d6a:	853e                	mv	a0,a5
    48005d6c:	60e2                	ld	ra,24(sp)
    48005d6e:	6442                	ld	s0,16(sp)
    48005d70:	6105                	add	sp,sp,32
    48005d72:	8082                	ret

0000000048005d74 <metal_cpu_is_worldguard_aware>:
metal_cpu_is_worldguard_aware():
validation-software/freedom-metal/metal/cpu.h:337
 *
 * @param cpu The CPU device handle
 * @return 0 if the CPU does not support WorldGuard, != 0 otherwise
 */
__inline__ int
metal_cpu_is_worldguard_aware(struct metal_cpu *cpu) {
    48005d74:	1101                	add	sp,sp,-32
    48005d76:	ec06                	sd	ra,24(sp)
    48005d78:	e822                	sd	s0,16(sp)
    48005d7a:	1000                	add	s0,sp,32
    48005d7c:	fea43423          	sd	a0,-24(s0)
validation-software/freedom-metal/metal/cpu.h:338
    return cpu->vtable->is_worldguard_aware(cpu);
    48005d80:	fe843783          	ld	a5,-24(s0)
    48005d84:	639c                	ld	a5,0(a5)
    48005d86:	6fdc                	ld	a5,152(a5)
    48005d88:	fe843503          	ld	a0,-24(s0)
    48005d8c:	9782                	jalr	a5
    48005d8e:	87aa                	mv	a5,a0
validation-software/freedom-metal/metal/cpu.h:339
}
    48005d90:	853e                	mv	a0,a5
    48005d92:	60e2                	ld	ra,24(sp)
    48005d94:	6442                	ld	s0,16(sp)
    48005d96:	6105                	add	sp,sp,32
    48005d98:	8082                	ret

0000000048005d9a <metal_cpu_get>:
metal_cpu_get():
validation-software/freedom-metal/src/cpu.c:7
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu *metal_cpu_get(unsigned int hartid) {
    48005d9a:	1101                	add	sp,sp,-32
    48005d9c:	ec22                	sd	s0,24(sp)
    48005d9e:	1000                	add	s0,sp,32
    48005da0:	87aa                	mv	a5,a0
    48005da2:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/cpu.c:8
    if (hartid < __METAL_DT_MAX_HARTS) {
    48005da6:	fec42783          	lw	a5,-20(s0)
    48005daa:	2781                	sext.w	a5,a5
    48005dac:	eb89                	bnez	a5,48005dbe <metal_cpu_get+0x24>
validation-software/freedom-metal/src/cpu.c:9
        return (struct metal_cpu *)__metal_cpu_table[hartid];
    48005dae:	e1018713          	add	a4,gp,-496 # 80000fc0 <__metal_cpu_table>
    48005db2:	fec46783          	lwu	a5,-20(s0)
    48005db6:	078e                	sll	a5,a5,0x3
    48005db8:	97ba                	add	a5,a5,a4
    48005dba:	639c                	ld	a5,0(a5)
    48005dbc:	a011                	j	48005dc0 <metal_cpu_get+0x26>
validation-software/freedom-metal/src/cpu.c:11
    }
    return NULL;
    48005dbe:	4781                	li	a5,0
validation-software/freedom-metal/src/cpu.c:12
}
    48005dc0:	853e                	mv	a0,a5
    48005dc2:	6462                	ld	s0,24(sp)
    48005dc4:	6105                	add	sp,sp,32
    48005dc6:	8082                	ret

0000000048005dc8 <metal_cpu_set_cpu_specific>:
metal_cpu_set_cpu_specific():
validation-software/freedom-metal/src/cpu.c:14

void metal_cpu_set_cpu_specific(struct metal_cpu *cpu, void *cpu_specific) {
    48005dc8:	1101                	add	sp,sp,-32
    48005dca:	ec22                	sd	s0,24(sp)
    48005dcc:	1000                	add	s0,sp,32
    48005dce:	fea43423          	sd	a0,-24(s0)
    48005dd2:	feb43023          	sd	a1,-32(s0)
validation-software/freedom-metal/src/cpu.c:15
    cpu->cpu_specific = cpu_specific;
    48005dd6:	fe843783          	ld	a5,-24(s0)
    48005dda:	fe043703          	ld	a4,-32(s0)
    48005dde:	e798                	sd	a4,8(a5)
validation-software/freedom-metal/src/cpu.c:16
}
    48005de0:	0001                	nop
    48005de2:	6462                	ld	s0,24(sp)
    48005de4:	6105                	add	sp,sp,32
    48005de6:	8082                	ret

0000000048005de8 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
validation-software/freedom-metal/src/cpu.c:18

int metal_cpu_get_current_hartid() {
    48005de8:	1101                	add	sp,sp,-32
    48005dea:	ec22                	sd	s0,24(sp)
    48005dec:	1000                	add	s0,sp,32
validation-software/freedom-metal/src/cpu.c:21
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r"(mhartid));
    48005dee:	f14027f3          	csrr	a5,mhartid
    48005df2:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/cpu.c:22
    return mhartid;
    48005df6:	fec42783          	lw	a5,-20(s0)
validation-software/freedom-metal/src/cpu.c:24
#endif
}
    48005dfa:	853e                	mv	a0,a5
    48005dfc:	6462                	ld	s0,24(sp)
    48005dfe:	6105                	add	sp,sp,32
    48005e00:	8082                	ret

0000000048005e02 <metal_cpu_get_num_harts>:
metal_cpu_get_num_harts():
validation-software/freedom-metal/src/cpu.c:26

int metal_cpu_get_num_harts() { return __METAL_DT_MAX_HARTS; }
    48005e02:	1141                	add	sp,sp,-16
    48005e04:	e422                	sd	s0,8(sp)
    48005e06:	0800                	add	s0,sp,16
    48005e08:	4785                	li	a5,1
    48005e0a:	853e                	mv	a0,a5
    48005e0c:	6422                	ld	s0,8(sp)
    48005e0e:	0141                	add	sp,sp,16
    48005e10:	8082                	ret

0000000048005e12 <__metal_shutdown_exit>:
__metal_shutdown_exit():
validation-software/freedom-metal/metal/shutdown.h:26
};

__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                      int code) __attribute__((noreturn));
__inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                      int code) {
    48005e12:	1101                	add	sp,sp,-32
    48005e14:	ec06                	sd	ra,24(sp)
    48005e16:	e822                	sd	s0,16(sp)
    48005e18:	1000                	add	s0,sp,32
    48005e1a:	fea43423          	sd	a0,-24(s0)
    48005e1e:	87ae                	mv	a5,a1
    48005e20:	fef42223          	sw	a5,-28(s0)
validation-software/freedom-metal/metal/shutdown.h:27
    sd->vtable->exit(sd, code);
    48005e24:	fe843783          	ld	a5,-24(s0)
    48005e28:	639c                	ld	a5,0(a5)
    48005e2a:	639c                	ld	a5,0(a5)
    48005e2c:	fe442703          	lw	a4,-28(s0)
    48005e30:	85ba                	mv	a1,a4
    48005e32:	fe843503          	ld	a0,-24(s0)
    48005e36:	9782                	jalr	a5

0000000048005e38 <metal_shutdown>:
metal_shutdown():
validation-software/freedom-metal/src/shutdown.c:11

extern __inline__ void __metal_shutdown_exit(const struct __metal_shutdown *sd,
                                             int code);

#if defined(__METAL_DT_SHUTDOWN_HANDLE)
void metal_shutdown(int code) {
    48005e38:	1101                	add	sp,sp,-32
    48005e3a:	ec06                	sd	ra,24(sp)
    48005e3c:	e822                	sd	s0,16(sp)
    48005e3e:	1000                	add	s0,sp,32
    48005e40:	87aa                	mv	a5,a0
    48005e42:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/src/shutdown.c:12
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
    48005e46:	fec42783          	lw	a5,-20(s0)
    48005e4a:	85be                	mv	a1,a5
    48005e4c:	e3018513          	add	a0,gp,-464 # 80000fe0 <__metal_dt_soc_scr_3fffb000>
    48005e50:	fc3ff0ef          	jal	48005e12 <__metal_shutdown_exit>
	...

0000000048005f00 <__metal_vector_table>:
IRQ_0():
validation-software/freedom-metal/src/vector.S:76
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
    48005f00:	e2bfb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f04 <IRQ_1>:
IRQ_1():
validation-software/freedom-metal/src/vector.S:78
IRQ_1:
        j metal_interrupt_vector_handler
    48005f04:	e27fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f08 <IRQ_2>:
IRQ_2():
validation-software/freedom-metal/src/vector.S:80
IRQ_2:
        j metal_interrupt_vector_handler
    48005f08:	e23fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f0c <IRQ_3>:
IRQ_3():
validation-software/freedom-metal/src/vector.S:82
IRQ_3:
        j metal_software_interrupt_vector_handler
    48005f0c:	e75fb06f          	j	48001d80 <metal_software_interrupt_vector_handler>

0000000048005f10 <IRQ_4>:
IRQ_4():
validation-software/freedom-metal/src/vector.S:84
IRQ_4:
        j metal_interrupt_vector_handler
    48005f10:	e1bfb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f14 <IRQ_5>:
IRQ_5():
validation-software/freedom-metal/src/vector.S:86
IRQ_5:
        j metal_interrupt_vector_handler
    48005f14:	e17fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f18 <IRQ_6>:
IRQ_6():
validation-software/freedom-metal/src/vector.S:88
IRQ_6:
        j metal_interrupt_vector_handler
    48005f18:	e13fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f1c <IRQ_7>:
IRQ_7():
validation-software/freedom-metal/src/vector.S:90
IRQ_7:
        j metal_timer_interrupt_vector_handler
    48005f1c:	fb3fb06f          	j	48001ece <metal_timer_interrupt_vector_handler>

0000000048005f20 <IRQ_8>:
IRQ_8():
validation-software/freedom-metal/src/vector.S:92
IRQ_8:
        j metal_interrupt_vector_handler
    48005f20:	e0bfb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f24 <IRQ_9>:
IRQ_9():
validation-software/freedom-metal/src/vector.S:94
IRQ_9:
        j metal_interrupt_vector_handler
    48005f24:	e07fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f28 <IRQ_10>:
IRQ_10():
validation-software/freedom-metal/src/vector.S:96
IRQ_10:
        j metal_interrupt_vector_handler
    48005f28:	e03fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f2c <IRQ_11>:
IRQ_11():
validation-software/freedom-metal/src/vector.S:98
IRQ_11:
        j metal_interrupt_vector_handler
    48005f2c:	dfffb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f30 <IRQ_12>:
IRQ_12():
validation-software/freedom-metal/src/vector.S:100
IRQ_12:
        j metal_interrupt_vector_handler
    48005f30:	dfbfb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f34 <IRQ_13>:
IRQ_13():
validation-software/freedom-metal/src/vector.S:102
IRQ_13:
        j metal_interrupt_vector_handler
    48005f34:	df7fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f38 <IRQ_14>:
IRQ_14():
validation-software/freedom-metal/src/vector.S:104
IRQ_14:
        j metal_interrupt_vector_handler
    48005f38:	df3fb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f3c <IRQ_15>:
IRQ_15():
validation-software/freedom-metal/src/vector.S:106
IRQ_15:
        j metal_interrupt_vector_handler
    48005f3c:	deffb06f          	j	48001d2a <metal_interrupt_vector_handler>

0000000048005f40 <IRQ_LC0>:
IRQ_LC0():
validation-software/freedom-metal/src/vector.S:108
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
    48005f40:	bb6fc06f          	j	480022f6 <metal_lc0_interrupt_vector_handler>

0000000048005f44 <IRQ_LC1>:
IRQ_LC1():
validation-software/freedom-metal/src/vector.S:110
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
    48005f44:	c94fc06f          	j	480023d8 <metal_lc1_interrupt_vector_handler>

0000000048005f48 <IRQ_LC2>:
IRQ_LC2():
validation-software/freedom-metal/src/vector.S:112
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
    48005f48:	d72fc06f          	j	480024ba <metal_lc2_interrupt_vector_handler>

0000000048005f4c <IRQ_LC3>:
IRQ_LC3():
validation-software/freedom-metal/src/vector.S:114
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
    48005f4c:	e50fc06f          	j	4800259c <metal_lc3_interrupt_vector_handler>

0000000048005f50 <IRQ_LC4>:
IRQ_LC4():
validation-software/freedom-metal/src/vector.S:116
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
    48005f50:	f2efc06f          	j	4800267e <metal_lc4_interrupt_vector_handler>

0000000048005f54 <IRQ_LC5>:
IRQ_LC5():
validation-software/freedom-metal/src/vector.S:118
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
    48005f54:	80dfc06f          	j	48002760 <metal_lc5_interrupt_vector_handler>

0000000048005f58 <IRQ_LC6>:
IRQ_LC6():
validation-software/freedom-metal/src/vector.S:120
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
    48005f58:	8ebfc06f          	j	48002842 <metal_lc6_interrupt_vector_handler>

0000000048005f5c <IRQ_LC7>:
IRQ_LC7():
validation-software/freedom-metal/src/vector.S:122
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
    48005f5c:	9c9fc06f          	j	48002924 <metal_lc7_interrupt_vector_handler>

0000000048005f60 <IRQ_LC8>:
IRQ_LC8():
validation-software/freedom-metal/src/vector.S:124
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
    48005f60:	aa7fc06f          	j	48002a06 <metal_lc8_interrupt_vector_handler>

0000000048005f64 <IRQ_LC9>:
IRQ_LC9():
validation-software/freedom-metal/src/vector.S:126
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
    48005f64:	b85fc06f          	j	48002ae8 <metal_lc9_interrupt_vector_handler>

0000000048005f68 <IRQ_LC10>:
IRQ_LC10():
validation-software/freedom-metal/src/vector.S:128
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
    48005f68:	c63fc06f          	j	48002bca <metal_lc10_interrupt_vector_handler>

0000000048005f6c <IRQ_LC11>:
IRQ_LC11():
validation-software/freedom-metal/src/vector.S:130
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
    48005f6c:	d41fc06f          	j	48002cac <metal_lc11_interrupt_vector_handler>

0000000048005f70 <IRQ_LC12>:
IRQ_LC12():
validation-software/freedom-metal/src/vector.S:132
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
    48005f70:	e1ffc06f          	j	48002d8e <metal_lc12_interrupt_vector_handler>

0000000048005f74 <IRQ_LC13>:
IRQ_LC13():
validation-software/freedom-metal/src/vector.S:134
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
    48005f74:	efdfc06f          	j	48002e70 <metal_lc13_interrupt_vector_handler>

0000000048005f78 <IRQ_LC14>:
IRQ_LC14():
validation-software/freedom-metal/src/vector.S:136
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
    48005f78:	fdbfc06f          	j	48002f52 <metal_lc14_interrupt_vector_handler>

0000000048005f7c <IRQ_LC15>:
IRQ_LC15():
validation-software/freedom-metal/src/vector.S:138
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
    48005f7c:	8b8fd06f          	j	48003034 <metal_lc15_interrupt_vector_handler>
	...

0000000048006000 <atexit>:
atexit():
    48006000:	85aa                	mv	a1,a0
    48006002:	4681                	li	a3,0
    48006004:	4601                	li	a2,0
    48006006:	4501                	li	a0,0
    48006008:	a0c9                	j	480060ca <__register_exitproc>

000000004800600a <exit>:
exit():
    4800600a:	1141                	add	sp,sp,-16
    4800600c:	4581                	li	a1,0
    4800600e:	e022                	sd	s0,0(sp)
    48006010:	e406                	sd	ra,8(sp)
    48006012:	842a                	mv	s0,a0
    48006014:	126000ef          	jal	4800613a <__call_exitprocs>
    48006018:	e901b503          	ld	a0,-368(gp) # 80001040 <_global_impure_ptr>
    4800601c:	6d3c                	ld	a5,88(a0)
    4800601e:	c391                	beqz	a5,48006022 <exit+0x18>
    48006020:	9782                	jalr	a5
    48006022:	8522                	mv	a0,s0
    48006024:	1da000ef          	jal	480061fe <_exit>

0000000048006028 <__libc_fini_array>:
__libc_fini_array():
    48006028:	1101                	add	sp,sp,-32
    4800602a:	e822                	sd	s0,16(sp)
    4800602c:	ffffa797          	auipc	a5,0xffffa
    48006030:	4cc78793          	add	a5,a5,1228 # 480004f8 <__fini_array_end>
    48006034:	ffffa417          	auipc	s0,0xffffa
    48006038:	4c440413          	add	s0,s0,1220 # 480004f8 <__fini_array_end>
    4800603c:	8c1d                	sub	s0,s0,a5
    4800603e:	e426                	sd	s1,8(sp)
    48006040:	ec06                	sd	ra,24(sp)
    48006042:	40345493          	sra	s1,s0,0x3
    48006046:	c881                	beqz	s1,48006056 <__libc_fini_array+0x2e>
    48006048:	1461                	add	s0,s0,-8
    4800604a:	943e                	add	s0,s0,a5
    4800604c:	601c                	ld	a5,0(s0)
    4800604e:	14fd                	add	s1,s1,-1
    48006050:	1461                	add	s0,s0,-8
    48006052:	9782                	jalr	a5
    48006054:	fce5                	bnez	s1,4800604c <__libc_fini_array+0x24>
    48006056:	60e2                	ld	ra,24(sp)
    48006058:	6442                	ld	s0,16(sp)
    4800605a:	64a2                	ld	s1,8(sp)
    4800605c:	6105                	add	sp,sp,32
    4800605e:	8082                	ret

0000000048006060 <__libc_init_array>:
__libc_init_array():
    48006060:	1101                	add	sp,sp,-32
    48006062:	e822                	sd	s0,16(sp)
    48006064:	e04a                	sd	s2,0(sp)
    48006066:	ffffa797          	auipc	a5,0xffffa
    4800606a:	48a78793          	add	a5,a5,1162 # 480004f0 <__init_array_start>
    4800606e:	ffffa417          	auipc	s0,0xffffa
    48006072:	48240413          	add	s0,s0,1154 # 480004f0 <__init_array_start>
    48006076:	ec06                	sd	ra,24(sp)
    48006078:	e426                	sd	s1,8(sp)
    4800607a:	40878933          	sub	s2,a5,s0
    4800607e:	00878b63          	beq	a5,s0,48006094 <__libc_init_array+0x34>
    48006082:	40395913          	sra	s2,s2,0x3
    48006086:	4481                	li	s1,0
    48006088:	601c                	ld	a5,0(s0)
    4800608a:	0485                	add	s1,s1,1
    4800608c:	0421                	add	s0,s0,8
    4800608e:	9782                	jalr	a5
    48006090:	ff24ece3          	bltu	s1,s2,48006088 <__libc_init_array+0x28>
    48006094:	ffffa797          	auipc	a5,0xffffa
    48006098:	46478793          	add	a5,a5,1124 # 480004f8 <__fini_array_end>
    4800609c:	ffffa417          	auipc	s0,0xffffa
    480060a0:	45440413          	add	s0,s0,1108 # 480004f0 <__init_array_start>
    480060a4:	40878933          	sub	s2,a5,s0
    480060a8:	40395913          	sra	s2,s2,0x3
    480060ac:	00878963          	beq	a5,s0,480060be <__libc_init_array+0x5e>
    480060b0:	4481                	li	s1,0
    480060b2:	601c                	ld	a5,0(s0)
    480060b4:	0485                	add	s1,s1,1
    480060b6:	0421                	add	s0,s0,8
    480060b8:	9782                	jalr	a5
    480060ba:	ff24ece3          	bltu	s1,s2,480060b2 <__libc_init_array+0x52>
    480060be:	60e2                	ld	ra,24(sp)
    480060c0:	6442                	ld	s0,16(sp)
    480060c2:	64a2                	ld	s1,8(sp)
    480060c4:	6902                	ld	s2,0(sp)
    480060c6:	6105                	add	sp,sp,32
    480060c8:	8082                	ret

00000000480060ca <__register_exitproc>:
__register_exitproc():
    480060ca:	e901b703          	ld	a4,-368(gp) # 80001040 <_global_impure_ptr>
    480060ce:	1f873783          	ld	a5,504(a4)
    480060d2:	c3a1                	beqz	a5,48006112 <__register_exitproc+0x48>
    480060d4:	4798                	lw	a4,8(a5)
    480060d6:	487d                	li	a6,31
    480060d8:	04e84f63          	blt	a6,a4,48006136 <__register_exitproc+0x6c>
    480060dc:	c11d                	beqz	a0,48006102 <__register_exitproc+0x38>
    480060de:	20f768b3          	sh3add	a7,a4,a5
    480060e2:	10c8b823          	sd	a2,272(a7)
    480060e6:	3107a803          	lw	a6,784(a5)
    480060ea:	4605                	li	a2,1
    480060ec:	00e6163b          	sllw	a2,a2,a4
    480060f0:	00c86833          	or	a6,a6,a2
    480060f4:	3107a823          	sw	a6,784(a5)
    480060f8:	20d8b823          	sd	a3,528(a7)
    480060fc:	4689                	li	a3,2
    480060fe:	00d50f63          	beq	a0,a3,4800611c <__register_exitproc+0x52>
    48006102:	0017069b          	addw	a3,a4,1
    48006106:	c794                	sw	a3,8(a5)
    48006108:	20f76733          	sh3add	a4,a4,a5
    4800610c:	4501                	li	a0,0
    4800610e:	eb0c                	sd	a1,16(a4)
    48006110:	8082                	ret
    48006112:	20070793          	add	a5,a4,512
    48006116:	1ef73c23          	sd	a5,504(a4)
    4800611a:	bf6d                	j	480060d4 <__register_exitproc+0xa>
    4800611c:	3147a683          	lw	a3,788(a5)
    48006120:	4501                	li	a0,0
    48006122:	8ed1                	or	a3,a3,a2
    48006124:	30d7aa23          	sw	a3,788(a5)
    48006128:	0017069b          	addw	a3,a4,1
    4800612c:	c794                	sw	a3,8(a5)
    4800612e:	20f76733          	sh3add	a4,a4,a5
    48006132:	eb0c                	sd	a1,16(a4)
    48006134:	8082                	ret
    48006136:	557d                	li	a0,-1
    48006138:	8082                	ret

000000004800613a <__call_exitprocs>:
__call_exitprocs():
    4800613a:	715d                	add	sp,sp,-80
    4800613c:	f052                	sd	s4,32(sp)
    4800613e:	e901ba03          	ld	s4,-368(gp) # 80001040 <_global_impure_ptr>
    48006142:	f84a                	sd	s2,48(sp)
    48006144:	1f8a3903          	ld	s2,504(s4)
    48006148:	e486                	sd	ra,72(sp)
    4800614a:	e0a2                	sd	s0,64(sp)
    4800614c:	fc26                	sd	s1,56(sp)
    4800614e:	f44e                	sd	s3,40(sp)
    48006150:	ec56                	sd	s5,24(sp)
    48006152:	e85a                	sd	s6,16(sp)
    48006154:	e45e                	sd	s7,8(sp)
    48006156:	e062                	sd	s8,0(sp)
    48006158:	02090963          	beqz	s2,4800618a <__call_exitprocs+0x50>
    4800615c:	8b2a                	mv	s6,a0
    4800615e:	8bae                	mv	s7,a1
    48006160:	4a85                	li	s5,1
    48006162:	59fd                	li	s3,-1
    48006164:	00892483          	lw	s1,8(s2)
    48006168:	fff4841b          	addw	s0,s1,-1
    4800616c:	00044f63          	bltz	s0,4800618a <__call_exitprocs+0x50>
    48006170:	0485                	add	s1,s1,1
    48006172:	2124e4b3          	sh3add	s1,s1,s2
    48006176:	020b8663          	beqz	s7,480061a2 <__call_exitprocs+0x68>
    4800617a:	2004b783          	ld	a5,512(s1)
    4800617e:	03778263          	beq	a5,s7,480061a2 <__call_exitprocs+0x68>
    48006182:	347d                	addw	s0,s0,-1
    48006184:	14e1                	add	s1,s1,-8
    48006186:	ff3418e3          	bne	s0,s3,48006176 <__call_exitprocs+0x3c>
    4800618a:	60a6                	ld	ra,72(sp)
    4800618c:	6406                	ld	s0,64(sp)
    4800618e:	74e2                	ld	s1,56(sp)
    48006190:	7942                	ld	s2,48(sp)
    48006192:	79a2                	ld	s3,40(sp)
    48006194:	7a02                	ld	s4,32(sp)
    48006196:	6ae2                	ld	s5,24(sp)
    48006198:	6b42                	ld	s6,16(sp)
    4800619a:	6ba2                	ld	s7,8(sp)
    4800619c:	6c02                	ld	s8,0(sp)
    4800619e:	6161                	add	sp,sp,80
    480061a0:	8082                	ret
    480061a2:	00892783          	lw	a5,8(s2)
    480061a6:	6098                	ld	a4,0(s1)
    480061a8:	37fd                	addw	a5,a5,-1
    480061aa:	04878463          	beq	a5,s0,480061f2 <__call_exitprocs+0xb8>
    480061ae:	0004b023          	sd	zero,0(s1)
    480061b2:	db61                	beqz	a4,48006182 <__call_exitprocs+0x48>
    480061b4:	31092783          	lw	a5,784(s2)
    480061b8:	008a96bb          	sllw	a3,s5,s0
    480061bc:	00892c03          	lw	s8,8(s2)
    480061c0:	8ff5                	and	a5,a5,a3
    480061c2:	2781                	sext.w	a5,a5
    480061c4:	ef89                	bnez	a5,480061de <__call_exitprocs+0xa4>
    480061c6:	9702                	jalr	a4
    480061c8:	00892703          	lw	a4,8(s2)
    480061cc:	1f8a3783          	ld	a5,504(s4)
    480061d0:	01871463          	bne	a4,s8,480061d8 <__call_exitprocs+0x9e>
    480061d4:	fb2787e3          	beq	a5,s2,48006182 <__call_exitprocs+0x48>
    480061d8:	dbcd                	beqz	a5,4800618a <__call_exitprocs+0x50>
    480061da:	893e                	mv	s2,a5
    480061dc:	b761                	j	48006164 <__call_exitprocs+0x2a>
    480061de:	31492783          	lw	a5,788(s2)
    480061e2:	1004b583          	ld	a1,256(s1)
    480061e6:	8ff5                	and	a5,a5,a3
    480061e8:	2781                	sext.w	a5,a5
    480061ea:	e799                	bnez	a5,480061f8 <__call_exitprocs+0xbe>
    480061ec:	855a                	mv	a0,s6
    480061ee:	9702                	jalr	a4
    480061f0:	bfe1                	j	480061c8 <__call_exitprocs+0x8e>
    480061f2:	00892423          	sw	s0,8(s2)
    480061f6:	bf75                	j	480061b2 <__call_exitprocs+0x78>
    480061f8:	852e                	mv	a0,a1
    480061fa:	9702                	jalr	a4
    480061fc:	b7f1                	j	480061c8 <__call_exitprocs+0x8e>

00000000480061fe <_exit>:
_exit():
validation-software/freedom-metal/gloss/sys_exit.c:3
#include <metal/shutdown.h>

void _exit(int exit_status) {
    480061fe:	1101                	add	sp,sp,-32
    48006200:	ec06                	sd	ra,24(sp)
    48006202:	e822                	sd	s0,16(sp)
    48006204:	1000                	add	s0,sp,32
    48006206:	87aa                	mv	a5,a0
    48006208:	fef42623          	sw	a5,-20(s0)
validation-software/freedom-metal/gloss/sys_exit.c:4
    metal_shutdown(exit_status);
    4800620c:	fec42783          	lw	a5,-20(s0)
    48006210:	853e                	mv	a0,a5
    48006212:	c27ff0ef          	jal	48005e38 <metal_shutdown>
